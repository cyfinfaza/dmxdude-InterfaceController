
dmxdude-InterfaceController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000306c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800312c  0800312c  0000412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003290  08003290  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003290  08003290  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003290  08003290  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003290  08003290  00004290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003294  08003294  00004294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003298  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a7c  2000000c  080032a4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a88  080032a4  00005a88  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150f1  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f7  00000000  00000000  0001a125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000ad69  00000000  00000000  0001c91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  00027688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b72  00000000  00000000  00028438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013fb9  00000000  00000000  00028faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016411  00000000  00000000  0003cf63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007de36  00000000  00000000  00053374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d11aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002488  00000000  00000000  000d11f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000d3678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003114 	.word	0x08003114

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003114 	.word	0x08003114

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <cobs_encode>:
 *                 operation and the length of the result (that was written to
 *                 dst_buf_ptr)
 */
cobs_encode_result cobs_encode(void *dst_buf_ptr, size_t dst_buf_len,
                               const void *src_ptr, size_t src_len)
{
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	46c6      	mov	lr, r8
 80003f8:	b500      	push	{lr}
    cobs_encode_result result = {0u, COBS_ENCODE_OK};
 80003fa:	2400      	movs	r4, #0
 80003fc:	6004      	str	r4, [r0, #0]
 80003fe:	7104      	strb	r4, [r0, #4]
    const uint8_t *src_read_ptr = src_ptr;
    const uint8_t *src_end_ptr = src_read_ptr + src_len;
 8000400:	9c06      	ldr	r4, [sp, #24]
 8000402:	46a0      	mov	r8, r4
 8000404:	4498      	add	r8, r3
    uint8_t *dst_buf_start_ptr = dst_buf_ptr;
    uint8_t *dst_buf_end_ptr = dst_buf_start_ptr + dst_buf_len;
 8000406:	188a      	adds	r2, r1, r2
    uint8_t *dst_code_write_ptr = dst_buf_ptr;
    uint8_t *dst_write_ptr = dst_code_write_ptr + 1u;
 8000408:	1c4c      	adds	r4, r1, #1
    uint8_t src_byte = 0u;
    uint8_t search_len = 1u;

    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
 800040a:	2900      	cmp	r1, #0
 800040c:	d011      	beq.n	8000432 <cobs_encode+0x3e>
 800040e:	2b00      	cmp	r3, #0
 8000410:	d00f      	beq.n	8000432 <cobs_encode+0x3e>
    {
        result.status = COBS_ENCODE_NULL_POINTER;
        return result;
    }

    if (src_len != 0u)
 8000412:	9d06      	ldr	r5, [sp, #24]
 8000414:	2d00      	cmp	r5, #0
 8000416:	d10f      	bne.n	8000438 <cobs_encode+0x44>
    uint8_t *dst_code_write_ptr = dst_buf_ptr;
 8000418:	468c      	mov	ip, r1
    uint8_t search_len = 1u;
 800041a:	3501      	adds	r5, #1

    /* We've reached the end of the source data (or possibly run out of output buffer)
     * Finalise the remaining output. In particular, write the code (length) byte.
     * Update the pointer to calculate the final output length.
     */
    if (dst_code_write_ptr >= dst_buf_end_ptr)
 800041c:	4594      	cmp	ip, r2
 800041e:	d335      	bcc.n	800048c <cobs_encode+0x98>
    {
        /* We've run out of output buffer to write the code byte. */
        result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
 8000420:	7903      	ldrb	r3, [r0, #4]
 8000422:	2402      	movs	r4, #2
 8000424:	4323      	orrs	r3, r4
 8000426:	7103      	strb	r3, [r0, #4]
        /* Write the last code (length) byte. */
        *dst_code_write_ptr = search_len;
    }

    /* Calculate the output length, from the value of dst_code_write_ptr */
    result.out_len = (size_t)(dst_write_ptr - dst_buf_start_ptr);
 8000428:	1a52      	subs	r2, r2, r1
 800042a:	6002      	str	r2, [r0, #0]

    return result;
}
 800042c:	bc80      	pop	{r7}
 800042e:	46b8      	mov	r8, r7
 8000430:	bdf0      	pop	{r4, r5, r6, r7, pc}
        result.status = COBS_ENCODE_NULL_POINTER;
 8000432:	2301      	movs	r3, #1
 8000434:	7103      	strb	r3, [r0, #4]
        return result;
 8000436:	e7f9      	b.n	800042c <cobs_encode+0x38>
    uint8_t *dst_code_write_ptr = dst_buf_ptr;
 8000438:	468c      	mov	ip, r1
    uint8_t search_len = 1u;
 800043a:	2501      	movs	r5, #1
 800043c:	e00c      	b.n	8000458 <cobs_encode+0x64>
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
 800043e:	2302      	movs	r3, #2
 8000440:	7103      	strb	r3, [r0, #4]
                break;
 8000442:	e7eb      	b.n	800041c <cobs_encode+0x28>
                *dst_write_ptr++ = src_byte;
 8000444:	1c67      	adds	r7, r4, #1
 8000446:	7023      	strb	r3, [r4, #0]
                search_len++;
 8000448:	3501      	adds	r5, #1
 800044a:	b2ed      	uxtb	r5, r5
                if (src_read_ptr >= src_end_ptr)
 800044c:	45b0      	cmp	r8, r6
 800044e:	d91b      	bls.n	8000488 <cobs_encode+0x94>
                if (search_len == 0xFFu)
 8000450:	2dff      	cmp	r5, #255	@ 0xff
 8000452:	d00f      	beq.n	8000474 <cobs_encode+0x80>
                search_len = 1u;
 8000454:	003c      	movs	r4, r7
 8000456:	0033      	movs	r3, r6
            if (dst_write_ptr >= dst_buf_end_ptr)
 8000458:	4294      	cmp	r4, r2
 800045a:	d2f0      	bcs.n	800043e <cobs_encode+0x4a>
            src_byte = *src_read_ptr++;
 800045c:	1c5e      	adds	r6, r3, #1
 800045e:	781b      	ldrb	r3, [r3, #0]
            if (src_byte == 0u)
 8000460:	2b00      	cmp	r3, #0
 8000462:	d1ef      	bne.n	8000444 <cobs_encode+0x50>
                *dst_code_write_ptr = search_len;
 8000464:	4663      	mov	r3, ip
 8000466:	701d      	strb	r5, [r3, #0]
                dst_code_write_ptr = dst_write_ptr++;
 8000468:	1c67      	adds	r7, r4, #1
                if (src_read_ptr >= src_end_ptr)
 800046a:	45b0      	cmp	r8, r6
 800046c:	d908      	bls.n	8000480 <cobs_encode+0x8c>
                dst_code_write_ptr = dst_write_ptr++;
 800046e:	46a4      	mov	ip, r4
                search_len = 1u;
 8000470:	2501      	movs	r5, #1
 8000472:	e7ef      	b.n	8000454 <cobs_encode+0x60>
                    *dst_code_write_ptr = search_len;
 8000474:	4663      	mov	r3, ip
 8000476:	701d      	strb	r5, [r3, #0]
                    dst_code_write_ptr = dst_write_ptr++;
 8000478:	46bc      	mov	ip, r7
 800047a:	1ca7      	adds	r7, r4, #2
                    search_len = 1u;
 800047c:	3dfe      	subs	r5, #254	@ 0xfe
 800047e:	e7e9      	b.n	8000454 <cobs_encode+0x60>
                dst_code_write_ptr = dst_write_ptr++;
 8000480:	46a4      	mov	ip, r4
 8000482:	003c      	movs	r4, r7
                search_len = 1u;
 8000484:	2501      	movs	r5, #1
 8000486:	e7c9      	b.n	800041c <cobs_encode+0x28>
                *dst_write_ptr++ = src_byte;
 8000488:	003c      	movs	r4, r7
 800048a:	e7c7      	b.n	800041c <cobs_encode+0x28>
        *dst_code_write_ptr = search_len;
 800048c:	4663      	mov	r3, ip
 800048e:	701d      	strb	r5, [r3, #0]
 8000490:	0022      	movs	r2, r4
 8000492:	e7c9      	b.n	8000428 <cobs_encode+0x34>

08000494 <DMX512_RxFlush>:
	USART1->CR2 |= USART_CR2_LBDIE;			 // LIN break detection interrupt

	USART1->CR1 |= USART_CR1_RE; // Enable receiver
}

static void DMX512_RxFlush() {
 8000494:	b510      	push	{r4, lr}
	DMX512_Frame *frame = &rx_queue.queue[rx_queue.w];
 8000496:	4b13      	ldr	r3, [pc, #76]	@ (80004e4 <DMX512_RxFlush+0x50>)
 8000498:	4a13      	ldr	r2, [pc, #76]	@ (80004e8 <DMX512_RxFlush+0x54>)
 800049a:	5c98      	ldrb	r0, [r3, r2]
	if (frame->dmx_data_length > 0) {
 800049c:	01c2      	lsls	r2, r0, #7
 800049e:	1812      	adds	r2, r2, r0
 80004a0:	0092      	lsls	r2, r2, #2
 80004a2:	189b      	adds	r3, r3, r2
 80004a4:	4a11      	ldr	r2, [pc, #68]	@ (80004ec <DMX512_RxFlush+0x58>)
 80004a6:	4694      	mov	ip, r2
 80004a8:	4463      	add	r3, ip
 80004aa:	881b      	ldrh	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d100      	bne.n	80004b2 <DMX512_RxFlush+0x1e>
		frame = &rx_queue.queue[rx_queue.w];
		frame->dmx_data_length = 0;
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
	}
}
 80004b0:	bd10      	pop	{r4, pc}
		rx_queue.w = (rx_queue.w + 1) % DMX512_FRAME_QUEUE_SIZE;
 80004b2:	3001      	adds	r0, #1
 80004b4:	2103      	movs	r1, #3
 80004b6:	f7ff ff97 	bl	80003e8 <__aeabi_idivmod>
 80004ba:	4b0a      	ldr	r3, [pc, #40]	@ (80004e4 <DMX512_RxFlush+0x50>)
 80004bc:	4a0a      	ldr	r2, [pc, #40]	@ (80004e8 <DMX512_RxFlush+0x54>)
 80004be:	5499      	strb	r1, [r3, r2]
		frame->dmx_data_length = 0;
 80004c0:	22ff      	movs	r2, #255	@ 0xff
 80004c2:	400a      	ands	r2, r1
 80004c4:	01d1      	lsls	r1, r2, #7
 80004c6:	1889      	adds	r1, r1, r2
 80004c8:	0089      	lsls	r1, r1, #2
 80004ca:	185b      	adds	r3, r3, r1
 80004cc:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <DMX512_RxFlush+0x58>)
 80004ce:	4694      	mov	ip, r2
 80004d0:	4463      	add	r3, ip
 80004d2:	2200      	movs	r2, #0
 80004d4:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80004d6:	20a0      	movs	r0, #160	@ 0xa0
 80004d8:	2102      	movs	r1, #2
 80004da:	05c0      	lsls	r0, r0, #23
 80004dc:	f000 ffa0 	bl	8001420 <HAL_GPIO_TogglePin>
}
 80004e0:	e7e6      	b.n	80004b0 <DMX512_RxFlush+0x1c>
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	20000028 	.word	0x20000028
 80004e8:	0000060d 	.word	0x0000060d
 80004ec:	00000202 	.word	0x00000202

080004f0 <DMX512_Init>:
	USART1->CR1 |= USART_CR1_RXNEIE_RXFNEIE; // RX not empty interrupt
 80004f0:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <DMX512_Init+0x24>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	2120      	movs	r1, #32
 80004f6:	430a      	orrs	r2, r1
 80004f8:	601a      	str	r2, [r3, #0]
	USART1->CR1 |= USART_CR1_IDLEIE;		 // IDLE line detected interrupt
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	3910      	subs	r1, #16
 80004fe:	430a      	orrs	r2, r1
 8000500:	601a      	str	r2, [r3, #0]
	USART1->CR2 |= USART_CR2_LBDIE;			 // LIN break detection interrupt
 8000502:	685a      	ldr	r2, [r3, #4]
 8000504:	3130      	adds	r1, #48	@ 0x30
 8000506:	430a      	orrs	r2, r1
 8000508:	605a      	str	r2, [r3, #4]
	USART1->CR1 |= USART_CR1_RE; // Enable receiver
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	393c      	subs	r1, #60	@ 0x3c
 800050e:	430a      	orrs	r2, r1
 8000510:	601a      	str	r2, [r3, #0]
}
 8000512:	4770      	bx	lr
 8000514:	40013800 	.word	0x40013800

08000518 <DMX512_GetFrame>:

int DMX512_GetFrame(DMX512_Frame **frame) {
 8000518:	b570      	push	{r4, r5, r6, lr}
	if (rx_queue.r == rx_queue.w) {
 800051a:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <DMX512_GetFrame+0x34>)
 800051c:	4a0c      	ldr	r2, [pc, #48]	@ (8000550 <DMX512_GetFrame+0x38>)
 800051e:	5c9a      	ldrb	r2, [r3, r2]
 8000520:	490c      	ldr	r1, [pc, #48]	@ (8000554 <DMX512_GetFrame+0x3c>)
 8000522:	5c5b      	ldrb	r3, [r3, r1]
 8000524:	429a      	cmp	r2, r3
 8000526:	d00e      	beq.n	8000546 <DMX512_GetFrame+0x2e>
		return -1; // No new frame
	}
	*frame = &rx_queue.queue[rx_queue.r];
 8000528:	01d3      	lsls	r3, r2, #7
 800052a:	189b      	adds	r3, r3, r2
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	4c07      	ldr	r4, [pc, #28]	@ (800054c <DMX512_GetFrame+0x34>)
 8000530:	191b      	adds	r3, r3, r4
 8000532:	6003      	str	r3, [r0, #0]
	rx_queue.r = (rx_queue.r + 1) % DMX512_FRAME_QUEUE_SIZE;
 8000534:	4d06      	ldr	r5, [pc, #24]	@ (8000550 <DMX512_GetFrame+0x38>)
 8000536:	5d60      	ldrb	r0, [r4, r5]
 8000538:	3001      	adds	r0, #1
 800053a:	2103      	movs	r1, #3
 800053c:	f7ff ff54 	bl	80003e8 <__aeabi_idivmod>
 8000540:	5561      	strb	r1, [r4, r5]
	return 0; // Success
 8000542:	2000      	movs	r0, #0
}
 8000544:	bd70      	pop	{r4, r5, r6, pc}
		return -1; // No new frame
 8000546:	2001      	movs	r0, #1
 8000548:	4240      	negs	r0, r0
 800054a:	e7fb      	b.n	8000544 <DMX512_GetFrame+0x2c>
 800054c:	20000028 	.word	0x20000028
 8000550:	0000060c 	.word	0x0000060c
 8000554:	0000060d 	.word	0x0000060d

08000558 <DMX512_Loop>:

void DMX512_Loop() {
 8000558:	b570      	push	{r4, r5, r6, lr}
	DMX512_Frame *frame = &rx_queue.queue[rx_queue.w];
 800055a:	4b2d      	ldr	r3, [pc, #180]	@ (8000610 <DMX512_Loop+0xb8>)
 800055c:	4a2d      	ldr	r2, [pc, #180]	@ (8000614 <DMX512_Loop+0xbc>)
 800055e:	5c9c      	ldrb	r4, [r3, r2]
	// wait for data to be received, detect idle line to reset counter
	if (USART1->ISR & USART_ISR_RXNE_RXFNE) {
 8000560:	4b2d      	ldr	r3, [pc, #180]	@ (8000618 <DMX512_Loop+0xc0>)
 8000562:	69db      	ldr	r3, [r3, #28]
 8000564:	069b      	lsls	r3, r3, #26
 8000566:	d518      	bpl.n	800059a <DMX512_Loop+0x42>
		if (frame->dmx_data_length < DMX512_DATA_SIZE) {
 8000568:	4b29      	ldr	r3, [pc, #164]	@ (8000610 <DMX512_Loop+0xb8>)
 800056a:	01e2      	lsls	r2, r4, #7
 800056c:	1912      	adds	r2, r2, r4
 800056e:	0091      	lsls	r1, r2, #2
 8000570:	185b      	adds	r3, r3, r1
 8000572:	4a2a      	ldr	r2, [pc, #168]	@ (800061c <DMX512_Loop+0xc4>)
 8000574:	4694      	mov	ip, r2
 8000576:	4463      	add	r3, ip
 8000578:	8819      	ldrh	r1, [r3, #0]
 800057a:	2380      	movs	r3, #128	@ 0x80
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	4299      	cmp	r1, r3
 8000580:	d826      	bhi.n	80005d0 <DMX512_Loop+0x78>
			frame->dmx_data[frame->dmx_data_length++] = (uint8_t) (USART1->RDR & 0xFF); // Write directly to frame
 8000582:	4b25      	ldr	r3, [pc, #148]	@ (8000618 <DMX512_Loop+0xc0>)
 8000584:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8000586:	4b22      	ldr	r3, [pc, #136]	@ (8000610 <DMX512_Loop+0xb8>)
 8000588:	01e2      	lsls	r2, r4, #7
 800058a:	1912      	adds	r2, r2, r4
 800058c:	0090      	lsls	r0, r2, #2
 800058e:	181b      	adds	r3, r3, r0
 8000590:	4662      	mov	r2, ip
 8000592:	189a      	adds	r2, r3, r2
 8000594:	1c48      	adds	r0, r1, #1
 8000596:	8010      	strh	r0, [r2, #0]
 8000598:	545d      	strb	r5, [r3, r1]
		} else {
			DMX512_RxFlush(); // Queue frame if buffer full
		}
	}
	if (USART1->ISR & USART_ISR_LBDF) {
 800059a:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <DMX512_Loop+0xc0>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	05db      	lsls	r3, r3, #23
 80005a0:	d419      	bmi.n	80005d6 <DMX512_Loop+0x7e>
		USART1->ICR |= USART_ICR_LBDCF; // Clear the break detection flag
		DMX512_RxFlush();				// Queue frame on break detection
	} else if (USART1->ISR & USART_ISR_IDLE && frame->dmx_data_length > 0) {
 80005a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000618 <DMX512_Loop+0xc0>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	06db      	lsls	r3, r3, #27
 80005a8:	d51d      	bpl.n	80005e6 <DMX512_Loop+0x8e>
 80005aa:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <DMX512_Loop+0xb8>)
 80005ac:	01e2      	lsls	r2, r4, #7
 80005ae:	1912      	adds	r2, r2, r4
 80005b0:	0091      	lsls	r1, r2, #2
 80005b2:	185b      	adds	r3, r3, r1
 80005b4:	4a19      	ldr	r2, [pc, #100]	@ (800061c <DMX512_Loop+0xc4>)
 80005b6:	4694      	mov	ip, r2
 80005b8:	4463      	add	r3, ip
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d012      	beq.n	80005e6 <DMX512_Loop+0x8e>
		USART1->ICR |= USART_ICR_IDLECF; // Clear the idle line flag
 80005c0:	4a15      	ldr	r2, [pc, #84]	@ (8000618 <DMX512_Loop+0xc0>)
 80005c2:	6a13      	ldr	r3, [r2, #32]
 80005c4:	2110      	movs	r1, #16
 80005c6:	430b      	orrs	r3, r1
 80005c8:	6213      	str	r3, [r2, #32]
		DMX512_RxFlush(); // Queue frame on idle line detection
 80005ca:	f7ff ff63 	bl	8000494 <DMX512_RxFlush>
 80005ce:	e00a      	b.n	80005e6 <DMX512_Loop+0x8e>
			DMX512_RxFlush(); // Queue frame if buffer full
 80005d0:	f7ff ff60 	bl	8000494 <DMX512_RxFlush>
 80005d4:	e7e1      	b.n	800059a <DMX512_Loop+0x42>
		USART1->ICR |= USART_ICR_LBDCF; // Clear the break detection flag
 80005d6:	4a10      	ldr	r2, [pc, #64]	@ (8000618 <DMX512_Loop+0xc0>)
 80005d8:	6a11      	ldr	r1, [r2, #32]
 80005da:	2380      	movs	r3, #128	@ 0x80
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	430b      	orrs	r3, r1
 80005e0:	6213      	str	r3, [r2, #32]
		DMX512_RxFlush();				// Queue frame on break detection
 80005e2:	f7ff ff57 	bl	8000494 <DMX512_RxFlush>
	}
	// write pin A8 to the same value as SR NE
	if (USART1->ISR & USART_ISR_NE) {
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <DMX512_Loop+0xc0>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	075b      	lsls	r3, r3, #29
 80005ec:	d507      	bpl.n	80005fe <DMX512_Loop+0xa6>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // Set pin A8 if NE flag is set
 80005ee:	2180      	movs	r1, #128	@ 0x80
 80005f0:	20a0      	movs	r0, #160	@ 0xa0
 80005f2:	2201      	movs	r2, #1
 80005f4:	0049      	lsls	r1, r1, #1
 80005f6:	05c0      	lsls	r0, r0, #23
 80005f8:	f000 ff0c 	bl	8001414 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // Reset pin A8 if NE flag is not set
	}
}
 80005fc:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // Reset pin A8 if NE flag is not set
 80005fe:	2180      	movs	r1, #128	@ 0x80
 8000600:	20a0      	movs	r0, #160	@ 0xa0
 8000602:	2200      	movs	r2, #0
 8000604:	0049      	lsls	r1, r1, #1
 8000606:	05c0      	lsls	r0, r0, #23
 8000608:	f000 ff04 	bl	8001414 <HAL_GPIO_WritePin>
}
 800060c:	e7f6      	b.n	80005fc <DMX512_Loop+0xa4>
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	20000028 	.word	0x20000028
 8000614:	0000060d 	.word	0x0000060d
 8000618:	40013800 	.word	0x40013800
 800061c:	00000202 	.word	0x00000202

08000620 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000624:	2214      	movs	r2, #20
 8000626:	2100      	movs	r1, #0
 8000628:	a803      	add	r0, sp, #12
 800062a:	f002 fd47 	bl	80030bc <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_GPIO_Init+0x54>)
 8000630:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000632:	2401      	movs	r4, #1
 8000634:	4322      	orrs	r2, r4
 8000636:	635a      	str	r2, [r3, #52]	@ 0x34
 8000638:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800063a:	4022      	ands	r2, r4
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000640:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000642:	2502      	movs	r5, #2
 8000644:	432a      	orrs	r2, r5
 8000646:	635a      	str	r2, [r3, #52]	@ 0x34
 8000648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800064a:	402b      	ands	r3, r5
 800064c:	9302      	str	r3, [sp, #8]
 800064e:	9b02      	ldr	r3, [sp, #8]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000650:	26a0      	movs	r6, #160	@ 0xa0
 8000652:	05f6      	lsls	r6, r6, #23
 8000654:	2200      	movs	r2, #0
 8000656:	2102      	movs	r1, #2
 8000658:	0030      	movs	r0, r6
 800065a:	f000 fedb 	bl	8001414 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED2_Pin */
	GPIO_InitStruct.Pin = LED2_Pin;
 800065e:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	9306      	str	r3, [sp, #24]
	HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000668:	a903      	add	r1, sp, #12
 800066a:	0030      	movs	r0, r6
 800066c:	f000 fdfa 	bl	8001264 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000670:	b008      	add	sp, #32
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	40021000 	.word	0x40021000

08000678 <MX_DMA_Init>:
static void MX_DMA_Init(void) {
 8000678:	b500      	push	{lr}
 800067a:	b083      	sub	sp, #12
	__HAL_RCC_DMA1_CLK_ENABLE();
 800067c:	4a09      	ldr	r2, [pc, #36]	@ (80006a4 <MX_DMA_Init+0x2c>)
 800067e:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8000680:	2301      	movs	r3, #1
 8000682:	4319      	orrs	r1, r3
 8000684:	6391      	str	r1, [r2, #56]	@ 0x38
 8000686:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000688:	4013      	ands	r3, r2
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	2009      	movs	r0, #9
 8000694:	f000 fbec 	bl	8000e70 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000698:	2009      	movs	r0, #9
 800069a:	f000 fbed 	bl	8000e78 <HAL_NVIC_EnableIRQ>
}
 800069e:	b003      	add	sp, #12
 80006a0:	bd00      	pop	{pc}
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	40021000 	.word	0x40021000

080006a8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80006a8:	b510      	push	{r4, lr}
	if (htim->Instance == TIM14) {
 80006aa:	6802      	ldr	r2, [r0, #0]
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d000      	beq.n	80006b4 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 80006b2:	bd10      	pop	{r4, pc}
		timer_isr_count++;
 80006b4:	4a04      	ldr	r2, [pc, #16]	@ (80006c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006b6:	6813      	ldr	r3, [r2, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	6013      	str	r3, [r2, #0]
		DMX512_Loop();
 80006bc:	f7ff ff4c 	bl	8000558 <DMX512_Loop>
}
 80006c0:	e7f7      	b.n	80006b2 <HAL_TIM_PeriodElapsedCallback+0xa>
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	40002000 	.word	0x40002000
 80006c8:	20000650 	.word	0x20000650

080006cc <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

// DMA transmit complete callback for USART2
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart->Instance == USART2) {
 80006cc:	6802      	ldr	r2, [r0, #0]
 80006ce:	4b04      	ldr	r3, [pc, #16]	@ (80006e0 <HAL_UART_TxCpltCallback+0x14>)
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d000      	beq.n	80006d6 <HAL_UART_TxCpltCallback+0xa>
		usart2_tx_busy = 0;
	}
}
 80006d4:	4770      	bx	lr
		usart2_tx_busy = 0;
 80006d6:	4b03      	ldr	r3, [pc, #12]	@ (80006e4 <HAL_UART_TxCpltCallback+0x18>)
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
}
 80006dc:	e7fa      	b.n	80006d4 <HAL_UART_TxCpltCallback+0x8>
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	40004400 	.word	0x40004400
 80006e4:	20000878 	.word	0x20000878

080006e8 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006ea:	e7fe      	b.n	80006ea <Error_Handler+0x2>

080006ec <MX_USART1_UART_Init>:
static void MX_USART1_UART_Init(void) {
 80006ec:	b510      	push	{r4, lr}
	huart1.Instance = USART1;
 80006ee:	4818      	ldr	r0, [pc, #96]	@ (8000750 <MX_USART1_UART_Init+0x64>)
 80006f0:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <MX_USART1_UART_Init+0x68>)
 80006f2:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 250000;
 80006f4:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <MX_USART1_UART_Init+0x6c>)
 80006f6:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f8:	2300      	movs	r3, #0
 80006fa:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_2;
 80006fc:	2280      	movs	r2, #128	@ 0x80
 80006fe:	0192      	lsls	r2, r2, #6
 8000700:	60c2      	str	r2, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000702:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000704:	220c      	movs	r2, #12
 8000706:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000708:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800070a:	61c3      	str	r3, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070c:	6203      	str	r3, [r0, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800070e:	6243      	str	r3, [r0, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000710:	6283      	str	r3, [r0, #40]	@ 0x28
	if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK) {
 8000712:	2100      	movs	r1, #0
 8000714:	f002 fbe6 	bl	8002ee4 <HAL_LIN_Init>
 8000718:	2800      	cmp	r0, #0
 800071a:	d111      	bne.n	8000740 <MX_USART1_UART_Init+0x54>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 800071c:	480c      	ldr	r0, [pc, #48]	@ (8000750 <MX_USART1_UART_Init+0x64>)
 800071e:	2100      	movs	r1, #0
 8000720:	f002 fc7e 	bl	8003020 <HAL_UARTEx_SetTxFifoThreshold>
 8000724:	2800      	cmp	r0, #0
 8000726:	d10d      	bne.n	8000744 <MX_USART1_UART_Init+0x58>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000728:	4809      	ldr	r0, [pc, #36]	@ (8000750 <MX_USART1_UART_Init+0x64>)
 800072a:	2100      	movs	r1, #0
 800072c:	f002 fc9e 	bl	800306c <HAL_UARTEx_SetRxFifoThreshold>
 8000730:	2800      	cmp	r0, #0
 8000732:	d109      	bne.n	8000748 <MX_USART1_UART_Init+0x5c>
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8000734:	4806      	ldr	r0, [pc, #24]	@ (8000750 <MX_USART1_UART_Init+0x64>)
 8000736:	f002 fc53 	bl	8002fe0 <HAL_UARTEx_DisableFifoMode>
 800073a:	2800      	cmp	r0, #0
 800073c:	d106      	bne.n	800074c <MX_USART1_UART_Init+0x60>
}
 800073e:	bd10      	pop	{r4, pc}
		Error_Handler();
 8000740:	f7ff ffd2 	bl	80006e8 <Error_Handler>
		Error_Handler();
 8000744:	f7ff ffd0 	bl	80006e8 <Error_Handler>
		Error_Handler();
 8000748:	f7ff ffce 	bl	80006e8 <Error_Handler>
		Error_Handler();
 800074c:	f7ff ffcc 	bl	80006e8 <Error_Handler>
 8000750:	2000074c 	.word	0x2000074c
 8000754:	40013800 	.word	0x40013800
 8000758:	0003d090 	.word	0x0003d090

0800075c <MX_TIM14_Init>:
static void MX_TIM14_Init(void) {
 800075c:	b510      	push	{r4, lr}
	htim14.Instance = TIM14;
 800075e:	4809      	ldr	r0, [pc, #36]	@ (8000784 <MX_TIM14_Init+0x28>)
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_TIM14_Init+0x2c>)
 8000762:	6003      	str	r3, [r0, #0]
	htim14.Init.Prescaler = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	6043      	str	r3, [r0, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	6083      	str	r3, [r0, #8]
	htim14.Init.Period = 480;
 800076a:	22f0      	movs	r2, #240	@ 0xf0
 800076c:	0052      	lsls	r2, r2, #1
 800076e:	60c2      	str	r2, [r0, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000770:	6103      	str	r3, [r0, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000772:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8000774:	f001 fbbc 	bl	8001ef0 <HAL_TIM_Base_Init>
 8000778:	2800      	cmp	r0, #0
 800077a:	d100      	bne.n	800077e <MX_TIM14_Init+0x22>
}
 800077c:	bd10      	pop	{r4, pc}
		Error_Handler();
 800077e:	f7ff ffb3 	bl	80006e8 <Error_Handler>
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	200007e0 	.word	0x200007e0
 8000788:	40002000 	.word	0x40002000

0800078c <MX_USART2_UART_Init>:
static void MX_USART2_UART_Init(void) {
 800078c:	b510      	push	{r4, lr}
	huart2.Instance = USART2;
 800078e:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <MX_USART2_UART_Init+0x34>)
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_USART2_UART_Init+0x38>)
 8000792:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 921600;
 8000794:	23e1      	movs	r3, #225	@ 0xe1
 8000796:	031b      	lsls	r3, r3, #12
 8000798:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	2300      	movs	r3, #0
 800079c:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800079e:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007a0:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007a2:	220c      	movs	r2, #12
 80007a4:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	61c3      	str	r3, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	6203      	str	r3, [r0, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ac:	6243      	str	r3, [r0, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ae:	6283      	str	r3, [r0, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80007b0:	f002 fb60 	bl	8002e74 <HAL_UART_Init>
 80007b4:	2800      	cmp	r0, #0
 80007b6:	d100      	bne.n	80007ba <MX_USART2_UART_Init+0x2e>
}
 80007b8:	bd10      	pop	{r4, pc}
		Error_Handler();
 80007ba:	f7ff ff95 	bl	80006e8 <Error_Handler>
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	200006b8 	.word	0x200006b8
 80007c4:	40004400 	.word	0x40004400

080007c8 <MX_TIM1_Init>:
static void MX_TIM1_Init(void) {
 80007c8:	b500      	push	{lr}
 80007ca:	b099      	sub	sp, #100	@ 0x64
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80007cc:	220c      	movs	r2, #12
 80007ce:	2100      	movs	r1, #0
 80007d0:	a815      	add	r0, sp, #84	@ 0x54
 80007d2:	f002 fc73 	bl	80030bc <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80007d6:	221c      	movs	r2, #28
 80007d8:	2100      	movs	r1, #0
 80007da:	a80e      	add	r0, sp, #56	@ 0x38
 80007dc:	f002 fc6e 	bl	80030bc <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80007e0:	2234      	movs	r2, #52	@ 0x34
 80007e2:	2100      	movs	r1, #0
 80007e4:	a801      	add	r0, sp, #4
 80007e6:	f002 fc69 	bl	80030bc <memset>
	htim1.Instance = TIM1;
 80007ea:	4828      	ldr	r0, [pc, #160]	@ (800088c <MX_TIM1_Init+0xc4>)
 80007ec:	4b28      	ldr	r3, [pc, #160]	@ (8000890 <MX_TIM1_Init+0xc8>)
 80007ee:	6003      	str	r3, [r0, #0]
	htim1.Init.Prescaler = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	6043      	str	r3, [r0, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f4:	6083      	str	r3, [r0, #8]
	htim1.Init.Period = 1000;
 80007f6:	22fa      	movs	r2, #250	@ 0xfa
 80007f8:	0092      	lsls	r2, r2, #2
 80007fa:	60c2      	str	r2, [r0, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fc:	6103      	str	r3, [r0, #16]
	htim1.Init.RepetitionCounter = 0;
 80007fe:	6143      	str	r3, [r0, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000800:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000802:	f001 fba5 	bl	8001f50 <HAL_TIM_PWM_Init>
 8000806:	2800      	cmp	r0, #0
 8000808:	d137      	bne.n	800087a <MX_TIM1_Init+0xb2>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080a:	2300      	movs	r3, #0
 800080c:	9315      	str	r3, [sp, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800080e:	9316      	str	r3, [sp, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000810:	9317      	str	r3, [sp, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8000812:	481e      	ldr	r0, [pc, #120]	@ (800088c <MX_TIM1_Init+0xc4>)
 8000814:	a915      	add	r1, sp, #84	@ 0x54
 8000816:	f001 fd49 	bl	80022ac <HAL_TIMEx_MasterConfigSynchronization>
 800081a:	2800      	cmp	r0, #0
 800081c:	d12f      	bne.n	800087e <MX_TIM1_Init+0xb6>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800081e:	2360      	movs	r3, #96	@ 0x60
 8000820:	930e      	str	r3, [sp, #56]	@ 0x38
	sConfigOC.Pulse = 10;
 8000822:	3b56      	subs	r3, #86	@ 0x56
 8000824:	930f      	str	r3, [sp, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000826:	2300      	movs	r3, #0
 8000828:	9310      	str	r3, [sp, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800082a:	9311      	str	r3, [sp, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800082c:	9312      	str	r3, [sp, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800082e:	9313      	str	r3, [sp, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000830:	9314      	str	r3, [sp, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000832:	4816      	ldr	r0, [pc, #88]	@ (800088c <MX_TIM1_Init+0xc4>)
 8000834:	2200      	movs	r2, #0
 8000836:	a90e      	add	r1, sp, #56	@ 0x38
 8000838:	f001 fbf6 	bl	8002028 <HAL_TIM_PWM_ConfigChannel>
 800083c:	2800      	cmp	r0, #0
 800083e:	d120      	bne.n	8000882 <MX_TIM1_Init+0xba>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	9301      	str	r3, [sp, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000844:	9302      	str	r3, [sp, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000846:	9303      	str	r3, [sp, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000848:	9304      	str	r3, [sp, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800084a:	9305      	str	r3, [sp, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800084c:	2280      	movs	r2, #128	@ 0x80
 800084e:	0192      	lsls	r2, r2, #6
 8000850:	9206      	str	r2, [sp, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000852:	9307      	str	r3, [sp, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000854:	9308      	str	r3, [sp, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000856:	9309      	str	r3, [sp, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000858:	2280      	movs	r2, #128	@ 0x80
 800085a:	0492      	lsls	r2, r2, #18
 800085c:	920a      	str	r2, [sp, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 800085e:	930b      	str	r3, [sp, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000860:	930c      	str	r3, [sp, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000862:	930d      	str	r3, [sp, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000864:	4809      	ldr	r0, [pc, #36]	@ (800088c <MX_TIM1_Init+0xc4>)
 8000866:	a901      	add	r1, sp, #4
 8000868:	f001 fd58 	bl	800231c <HAL_TIMEx_ConfigBreakDeadTime>
 800086c:	2800      	cmp	r0, #0
 800086e:	d10a      	bne.n	8000886 <MX_TIM1_Init+0xbe>
	HAL_TIM_MspPostInit(&htim1);
 8000870:	4806      	ldr	r0, [pc, #24]	@ (800088c <MX_TIM1_Init+0xc4>)
 8000872:	f000 f963 	bl	8000b3c <HAL_TIM_MspPostInit>
}
 8000876:	b019      	add	sp, #100	@ 0x64
 8000878:	bd00      	pop	{pc}
		Error_Handler();
 800087a:	f7ff ff35 	bl	80006e8 <Error_Handler>
		Error_Handler();
 800087e:	f7ff ff33 	bl	80006e8 <Error_Handler>
		Error_Handler();
 8000882:	f7ff ff31 	bl	80006e8 <Error_Handler>
		Error_Handler();
 8000886:	f7ff ff2f 	bl	80006e8 <Error_Handler>
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	2000082c 	.word	0x2000082c
 8000890:	40012c00 	.word	0x40012c00

08000894 <SystemClock_Config>:
void SystemClock_Config(void) {
 8000894:	b500      	push	{lr}
 8000896:	b08d      	sub	sp, #52	@ 0x34
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000898:	221c      	movs	r2, #28
 800089a:	2100      	movs	r1, #0
 800089c:	a805      	add	r0, sp, #20
 800089e:	f002 fc0d 	bl	80030bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008a2:	2214      	movs	r2, #20
 80008a4:	2100      	movs	r1, #0
 80008a6:	4668      	mov	r0, sp
 80008a8:	f002 fc08 	bl	80030bc <memset>
	__HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80008ac:	4a13      	ldr	r2, [pc, #76]	@ (80008fc <SystemClock_Config+0x68>)
 80008ae:	6813      	ldr	r3, [r2, #0]
 80008b0:	2107      	movs	r1, #7
 80008b2:	438b      	bics	r3, r1
 80008b4:	3906      	subs	r1, #6
 80008b6:	430b      	orrs	r3, r1
 80008b8:	6013      	str	r3, [r2, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ba:	2302      	movs	r3, #2
 80008bc:	9305      	str	r3, [sp, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008be:	33fe      	adds	r3, #254	@ 0xfe
 80008c0:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	9309      	str	r3, [sp, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c6:	3340      	adds	r3, #64	@ 0x40
 80008c8:	930a      	str	r3, [sp, #40]	@ 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008ca:	a805      	add	r0, sp, #20
 80008cc:	f000 fdb0 	bl	8001430 <HAL_RCC_OscConfig>
 80008d0:	2800      	cmp	r0, #0
 80008d2:	d10e      	bne.n	80008f2 <SystemClock_Config+0x5e>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80008d4:	2307      	movs	r3, #7
 80008d6:	9300      	str	r3, [sp, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008d8:	2300      	movs	r3, #0
 80008da:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008dc:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008de:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008e0:	9304      	str	r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80008e2:	2101      	movs	r1, #1
 80008e4:	4668      	mov	r0, sp
 80008e6:	f000 ff31 	bl	800174c <HAL_RCC_ClockConfig>
 80008ea:	2800      	cmp	r0, #0
 80008ec:	d103      	bne.n	80008f6 <SystemClock_Config+0x62>
}
 80008ee:	b00d      	add	sp, #52	@ 0x34
 80008f0:	bd00      	pop	{pc}
		Error_Handler();
 80008f2:	f7ff fef9 	bl	80006e8 <Error_Handler>
		Error_Handler();
 80008f6:	f7ff fef7 	bl	80006e8 <Error_Handler>
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	40022000 	.word	0x40022000

08000900 <main>:
int main(void) {
 8000900:	b510      	push	{r4, lr}
 8000902:	4c54      	ldr	r4, [pc, #336]	@ (8000a54 <main+0x154>)
 8000904:	44a5      	add	sp, r4
	HAL_Init();
 8000906:	f000 fa49 	bl	8000d9c <HAL_Init>
	SystemClock_Config();
 800090a:	f7ff ffc3 	bl	8000894 <SystemClock_Config>
	MX_GPIO_Init();
 800090e:	f7ff fe87 	bl	8000620 <MX_GPIO_Init>
	MX_DMA_Init();
 8000912:	f7ff feb1 	bl	8000678 <MX_DMA_Init>
	MX_USART1_UART_Init();
 8000916:	f7ff fee9 	bl	80006ec <MX_USART1_UART_Init>
	MX_TIM14_Init();
 800091a:	f7ff ff1f 	bl	800075c <MX_TIM14_Init>
	MX_USART2_UART_Init();
 800091e:	f7ff ff35 	bl	800078c <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8000922:	f7ff ff51 	bl	80007c8 <MX_TIM1_Init>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000926:	20a0      	movs	r0, #160	@ 0xa0
 8000928:	2101      	movs	r1, #1
 800092a:	05c0      	lsls	r0, r0, #23
 800092c:	f000 fd78 	bl	8001420 <HAL_GPIO_TogglePin>
	DMX512_Init(&huart1);           // Initialize DMX512 with USART1
 8000930:	4849      	ldr	r0, [pc, #292]	@ (8000a58 <main+0x158>)
 8000932:	f7ff fddd 	bl	80004f0 <DMX512_Init>
	HAL_TIM_Base_Start_IT(&htim14); // Start timer interrupt for DMX512 loop
 8000936:	4849      	ldr	r0, [pc, #292]	@ (8000a5c <main+0x15c>)
 8000938:	f001 f9ac 	bl	8001c94 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800093c:	4848      	ldr	r0, [pc, #288]	@ (8000a60 <main+0x160>)
 800093e:	2100      	movs	r1, #0
 8000940:	f001 fc22 	bl	8002188 <HAL_TIM_PWM_Start>
	uint8_t zero_byte = 0;
 8000944:	4947      	ldr	r1, [pc, #284]	@ (8000a64 <main+0x164>)
 8000946:	4469      	add	r1, sp
 8000948:	2300      	movs	r3, #0
 800094a:	700b      	strb	r3, [r1, #0]
	HAL_UART_Transmit(&huart2, &zero_byte, 1, HAL_MAX_DELAY);
 800094c:	3301      	adds	r3, #1
 800094e:	4846      	ldr	r0, [pc, #280]	@ (8000a68 <main+0x168>)
 8000950:	425b      	negs	r3, r3
 8000952:	2201      	movs	r2, #1
 8000954:	f002 f9a5 	bl	8002ca2 <HAL_UART_Transmit>
 8000958:	e04d      	b.n	80009f6 <main+0xf6>
			current_frame = frame;
 800095a:	4b44      	ldr	r3, [pc, #272]	@ (8000a6c <main+0x16c>)
 800095c:	9a02      	ldr	r2, [sp, #8]
 800095e:	601a      	str	r2, [r3, #0]
			last_dmx_frame_time = HAL_GetTick();
 8000960:	f000 fa34 	bl	8000dcc <HAL_GetTick>
 8000964:	4b42      	ldr	r3, [pc, #264]	@ (8000a70 <main+0x170>)
 8000966:	6018      	str	r0, [r3, #0]
			if (!usart2_tx_busy && frame->dmx_data_length > 0) {
 8000968:	4b42      	ldr	r3, [pc, #264]	@ (8000a74 <main+0x174>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d14b      	bne.n	8000a08 <main+0x108>
 8000970:	9c02      	ldr	r4, [sp, #8]
 8000972:	4b41      	ldr	r3, [pc, #260]	@ (8000a78 <main+0x178>)
 8000974:	5ae1      	ldrh	r1, [r4, r3]
 8000976:	2900      	cmp	r1, #0
 8000978:	d046      	beq.n	8000a08 <main+0x108>
				msg_buf[0] = 0; // message code
 800097a:	ab05      	add	r3, sp, #20
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
				for (uint16_t i = 0; i < frame->dmx_data_length; ++i) {
 8000980:	2300      	movs	r3, #0
 8000982:	4299      	cmp	r1, r3
 8000984:	d905      	bls.n	8000992 <main+0x92>
					msg_buf[i + 1] = frame->dmx_data[i];
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	5ce0      	ldrb	r0, [r4, r3]
 800098a:	ab05      	add	r3, sp, #20
 800098c:	5498      	strb	r0, [r3, r2]
				for (uint16_t i = 0; i < frame->dmx_data_length; ++i) {
 800098e:	b293      	uxth	r3, r2
 8000990:	e7f7      	b.n	8000982 <main+0x82>
				size_t msg_len = frame->dmx_data_length + 1;
 8000992:	3101      	adds	r1, #1
				cobs_encode_result enc_res = cobs_encode(usart2_tx_buf, sizeof(usart2_tx_buf), msg_buf, msg_len);
 8000994:	ac03      	add	r4, sp, #12
 8000996:	4839      	ldr	r0, [pc, #228]	@ (8000a7c <main+0x17c>)
 8000998:	9100      	str	r1, [sp, #0]
 800099a:	ab05      	add	r3, sp, #20
 800099c:	4a38      	ldr	r2, [pc, #224]	@ (8000a80 <main+0x180>)
 800099e:	0001      	movs	r1, r0
 80009a0:	0020      	movs	r0, r4
 80009a2:	f7ff fd27 	bl	80003f4 <cobs_encode>
				if (enc_res.status == COBS_ENCODE_OK) {
 80009a6:	7923      	ldrb	r3, [r4, #4]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d12d      	bne.n	8000a08 <main+0x108>
					usart2_tx_buf[enc_res.out_len] = 0;
 80009ac:	9a03      	ldr	r2, [sp, #12]
 80009ae:	4933      	ldr	r1, [pc, #204]	@ (8000a7c <main+0x17c>)
 80009b0:	548b      	strb	r3, [r1, r2]
					enc_res.out_len++;
 80009b2:	3201      	adds	r2, #1
 80009b4:	9203      	str	r2, [sp, #12]
					usart2_tx_busy = 1;
 80009b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a74 <main+0x174>)
 80009b8:	2001      	movs	r0, #1
 80009ba:	7018      	strb	r0, [r3, #0]
					HAL_UART_Transmit_DMA(&huart2, usart2_tx_buf, enc_res.out_len);
 80009bc:	b292      	uxth	r2, r2
 80009be:	482a      	ldr	r0, [pc, #168]	@ (8000a68 <main+0x168>)
 80009c0:	f001 fd62 	bl	8002488 <HAL_UART_Transmit_DMA>
 80009c4:	e020      	b.n	8000a08 <main+0x108>
			main_loop_freq = main_loop_count;
 80009c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a84 <main+0x184>)
 80009c8:	4a2f      	ldr	r2, [pc, #188]	@ (8000a88 <main+0x188>)
 80009ca:	6811      	ldr	r1, [r2, #0]
 80009cc:	6019      	str	r1, [r3, #0]
			main_loop_count = 0;
 80009ce:	2100      	movs	r1, #0
 80009d0:	6011      	str	r1, [r2, #0]
			timer_isr_freq = timer_isr_count;
 80009d2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a8c <main+0x18c>)
 80009d4:	4a2e      	ldr	r2, [pc, #184]	@ (8000a90 <main+0x190>)
 80009d6:	6810      	ldr	r0, [r2, #0]
 80009d8:	6018      	str	r0, [r3, #0]
			timer_isr_count = 0;
 80009da:	6011      	str	r1, [r2, #0]
			freq_monitor_start = HAL_GetTick();
 80009dc:	f000 f9f6 	bl	8000dcc <HAL_GetTick>
 80009e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a94 <main+0x194>)
 80009e2:	6018      	str	r0, [r3, #0]
 80009e4:	e017      	b.n	8000a16 <main+0x116>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, led1_blink_state ? 100 : 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	e030      	b.n	8000a4c <main+0x14c>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80009ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000a60 <main+0x160>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	2300      	movs	r3, #0
 80009f0:	6353      	str	r3, [r2, #52]	@ 0x34
			led1_blink_state = 0;
 80009f2:	4a29      	ldr	r2, [pc, #164]	@ (8000a98 <main+0x198>)
 80009f4:	7013      	strb	r3, [r2, #0]
		main_loop_count++;
 80009f6:	4a24      	ldr	r2, [pc, #144]	@ (8000a88 <main+0x188>)
 80009f8:	6813      	ldr	r3, [r2, #0]
 80009fa:	3301      	adds	r3, #1
 80009fc:	6013      	str	r3, [r2, #0]
		if (DMX512_GetFrame(&frame) == 0) {
 80009fe:	a802      	add	r0, sp, #8
 8000a00:	f7ff fd8a 	bl	8000518 <DMX512_GetFrame>
 8000a04:	2800      	cmp	r0, #0
 8000a06:	d0a8      	beq.n	800095a <main+0x5a>
		if (HAL_GetTick() - freq_monitor_start >= 100) {
 8000a08:	f000 f9e0 	bl	8000dcc <HAL_GetTick>
 8000a0c:	4b21      	ldr	r3, [pc, #132]	@ (8000a94 <main+0x194>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	1ac0      	subs	r0, r0, r3
 8000a12:	2863      	cmp	r0, #99	@ 0x63
 8000a14:	d8d7      	bhi.n	80009c6 <main+0xc6>
		if (HAL_GetTick() - last_dmx_frame_time < 100) {
 8000a16:	f000 f9d9 	bl	8000dcc <HAL_GetTick>
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <main+0x170>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	1ac0      	subs	r0, r0, r3
 8000a20:	2863      	cmp	r0, #99	@ 0x63
 8000a22:	d8e2      	bhi.n	80009ea <main+0xea>
			if (HAL_GetTick() - led1_blink_start > 50) { // 5Hz = 200ms period, 100ms toggle
 8000a24:	f000 f9d2 	bl	8000dcc <HAL_GetTick>
 8000a28:	4b1c      	ldr	r3, [pc, #112]	@ (8000a9c <main+0x19c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	1ac0      	subs	r0, r0, r3
 8000a2e:	2832      	cmp	r0, #50	@ 0x32
 8000a30:	d9e1      	bls.n	80009f6 <main+0xf6>
				led1_blink_start = HAL_GetTick();
 8000a32:	f000 f9cb 	bl	8000dcc <HAL_GetTick>
 8000a36:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <main+0x19c>)
 8000a38:	6018      	str	r0, [r3, #0]
				led1_blink_state = !led1_blink_state;
 8000a3a:	4a17      	ldr	r2, [pc, #92]	@ (8000a98 <main+0x198>)
 8000a3c:	7813      	ldrb	r3, [r2, #0]
 8000a3e:	4259      	negs	r1, r3
 8000a40:	414b      	adcs	r3, r1
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	7013      	strb	r3, [r2, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, led1_blink_state ? 100 : 0);
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0cd      	beq.n	80009e6 <main+0xe6>
 8000a4a:	2264      	movs	r2, #100	@ 0x64
 8000a4c:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <main+0x160>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a52:	e7d0      	b.n	80009f6 <main+0xf6>
 8000a54:	fffffde8 	.word	0xfffffde8
 8000a58:	2000074c 	.word	0x2000074c
 8000a5c:	200007e0 	.word	0x200007e0
 8000a60:	2000082c 	.word	0x2000082c
 8000a64:	00000217 	.word	0x00000217
 8000a68:	200006b8 	.word	0x200006b8
 8000a6c:	20000644 	.word	0x20000644
 8000a70:	20000640 	.word	0x20000640
 8000a74:	20000878 	.word	0x20000878
 8000a78:	00000202 	.word	0x00000202
 8000a7c:	2000087c 	.word	0x2000087c
 8000a80:	00000206 	.word	0x00000206
 8000a84:	20000654 	.word	0x20000654
 8000a88:	20000658 	.word	0x20000658
 8000a8c:	2000064c 	.word	0x2000064c
 8000a90:	20000650 	.word	0x20000650
 8000a94:	20000648 	.word	0x20000648
 8000a98:	2000063c 	.word	0x2000063c
 8000a9c:	20000638 	.word	0x20000638

08000aa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <HAL_MspInit+0x2c>)
 8000aa4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4311      	orrs	r1, r2
 8000aaa:	6419      	str	r1, [r3, #64]	@ 0x40
 8000aac:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000aae:	400a      	ands	r2, r1
 8000ab0:	9200      	str	r2, [sp, #0]
 8000ab2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ab6:	2180      	movs	r1, #128	@ 0x80
 8000ab8:	0549      	lsls	r1, r1, #21
 8000aba:	430a      	orrs	r2, r1
 8000abc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ac0:	400b      	ands	r3, r1
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	b002      	add	sp, #8
 8000ac8:	4770      	bx	lr
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ad0:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8000ad2:	6802      	ldr	r2, [r0, #0]
 8000ad4:	4b07      	ldr	r3, [pc, #28]	@ (8000af4 <HAL_TIM_PWM_MspInit+0x24>)
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d001      	beq.n	8000ade <HAL_TIM_PWM_MspInit+0xe>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000ada:	b002      	add	sp, #8
 8000adc:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_TIM_PWM_MspInit+0x28>)
 8000ae0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ae2:	2180      	movs	r1, #128	@ 0x80
 8000ae4:	0109      	lsls	r1, r1, #4
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aec:	400b      	ands	r3, r1
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	9b01      	ldr	r3, [sp, #4]
}
 8000af2:	e7f2      	b.n	8000ada <HAL_TIM_PWM_MspInit+0xa>
 8000af4:	40012c00 	.word	0x40012c00
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000afc:	b500      	push	{lr}
 8000afe:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM14)
 8000b00:	6802      	ldr	r2, [r0, #0]
 8000b02:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <HAL_TIM_Base_MspInit+0x38>)
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d001      	beq.n	8000b0c <HAL_TIM_Base_MspInit+0x10>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8000b08:	b003      	add	sp, #12
 8000b0a:	bd00      	pop	{pc}
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <HAL_TIM_Base_MspInit+0x3c>)
 8000b0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b10:	2180      	movs	r1, #128	@ 0x80
 8000b12:	0209      	lsls	r1, r1, #8
 8000b14:	430a      	orrs	r2, r1
 8000b16:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	400b      	ands	r3, r1
 8000b1c:	9301      	str	r3, [sp, #4]
 8000b1e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	2013      	movs	r0, #19
 8000b26:	f000 f9a3 	bl	8000e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000b2a:	2013      	movs	r0, #19
 8000b2c:	f000 f9a4 	bl	8000e78 <HAL_NVIC_EnableIRQ>
}
 8000b30:	e7ea      	b.n	8000b08 <HAL_TIM_Base_MspInit+0xc>
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	40002000 	.word	0x40002000
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b3c:	b510      	push	{r4, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	2214      	movs	r2, #20
 8000b44:	2100      	movs	r1, #0
 8000b46:	a801      	add	r0, sp, #4
 8000b48:	f002 fab8 	bl	80030bc <memset>
  if(htim->Instance==TIM1)
 8000b4c:	6822      	ldr	r2, [r4, #0]
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <HAL_TIM_MspPostInit+0x44>)
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d001      	beq.n	8000b58 <HAL_TIM_MspPostInit+0x1c>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b54:	b006      	add	sp, #24
 8000b56:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <HAL_TIM_MspPostInit+0x48>)
 8000b5a:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	4319      	orrs	r1, r3
 8000b60:	6351      	str	r1, [r2, #52]	@ 0x34
 8000b62:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000b64:	401a      	ands	r2, r3
 8000b66:	9200      	str	r2, [sp, #0]
 8000b68:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b6a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8000b70:	3303      	adds	r3, #3
 8000b72:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	20a0      	movs	r0, #160	@ 0xa0
 8000b76:	a901      	add	r1, sp, #4
 8000b78:	05c0      	lsls	r0, r0, #23
 8000b7a:	f000 fb73 	bl	8001264 <HAL_GPIO_Init>
}
 8000b7e:	e7e9      	b.n	8000b54 <HAL_TIM_MspPostInit+0x18>
 8000b80:	40012c00 	.word	0x40012c00
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b88:	b510      	push	{r4, lr}
 8000b8a:	b090      	sub	sp, #64	@ 0x40
 8000b8c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	2214      	movs	r2, #20
 8000b90:	2100      	movs	r1, #0
 8000b92:	a80b      	add	r0, sp, #44	@ 0x2c
 8000b94:	f002 fa92 	bl	80030bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b98:	221c      	movs	r2, #28
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	a804      	add	r0, sp, #16
 8000b9e:	f002 fa8d 	bl	80030bc <memset>
  if(huart->Instance==USART1)
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	4a38      	ldr	r2, [pc, #224]	@ (8000c88 <HAL_UART_MspInit+0x100>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d004      	beq.n	8000bb4 <HAL_UART_MspInit+0x2c>

    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8000baa:	4a38      	ldr	r2, [pc, #224]	@ (8000c8c <HAL_UART_MspInit+0x104>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d029      	beq.n	8000c04 <HAL_UART_MspInit+0x7c>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bb0:	b010      	add	sp, #64	@ 0x40
 8000bb2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb8:	a804      	add	r0, sp, #16
 8000bba:	f000 feb5 	bl	8001928 <HAL_RCCEx_PeriphCLKConfig>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	d11d      	bne.n	8000bfe <HAL_UART_MspInit+0x76>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bc2:	4b33      	ldr	r3, [pc, #204]	@ (8000c90 <HAL_UART_MspInit+0x108>)
 8000bc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bc6:	2180      	movs	r1, #128	@ 0x80
 8000bc8:	01c9      	lsls	r1, r1, #7
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bd0:	400a      	ands	r2, r1
 8000bd2:	9200      	str	r2, [sp, #0]
 8000bd4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000bd8:	2202      	movs	r2, #2
 8000bda:	4311      	orrs	r1, r2
 8000bdc:	6359      	str	r1, [r3, #52]	@ 0x34
 8000bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000be0:	4013      	ands	r3, r2
 8000be2:	9301      	str	r3, [sp, #4]
 8000be4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000be6:	23c0      	movs	r3, #192	@ 0xc0
 8000be8:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	920c      	str	r2, [sp, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	930d      	str	r3, [sp, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	930e      	str	r3, [sp, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000bf2:	930f      	str	r3, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	a90b      	add	r1, sp, #44	@ 0x2c
 8000bf6:	4827      	ldr	r0, [pc, #156]	@ (8000c94 <HAL_UART_MspInit+0x10c>)
 8000bf8:	f000 fb34 	bl	8001264 <HAL_GPIO_Init>
 8000bfc:	e7d8      	b.n	8000bb0 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8000bfe:	f7ff fd73 	bl	80006e8 <Error_Handler>
 8000c02:	e7de      	b.n	8000bc2 <HAL_UART_MspInit+0x3a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c04:	4b22      	ldr	r3, [pc, #136]	@ (8000c90 <HAL_UART_MspInit+0x108>)
 8000c06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c08:	2180      	movs	r1, #128	@ 0x80
 8000c0a:	0289      	lsls	r1, r1, #10
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c12:	400a      	ands	r2, r1
 8000c14:	9202      	str	r2, [sp, #8]
 8000c16:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4311      	orrs	r1, r2
 8000c1e:	6359      	str	r1, [r3, #52]	@ 0x34
 8000c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c22:	4013      	ands	r3, r2
 8000c24:	9303      	str	r3, [sp, #12]
 8000c26:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 8000c28:	2390      	movs	r3, #144	@ 0x90
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	3b1f      	subs	r3, #31
 8000c30:	3bff      	subs	r3, #255	@ 0xff
 8000c32:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c34:	920f      	str	r2, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	20a0      	movs	r0, #160	@ 0xa0
 8000c38:	a90b      	add	r1, sp, #44	@ 0x2c
 8000c3a:	05c0      	lsls	r0, r0, #23
 8000c3c:	f000 fb12 	bl	8001264 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8000c40:	4815      	ldr	r0, [pc, #84]	@ (8000c98 <HAL_UART_MspInit+0x110>)
 8000c42:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <HAL_UART_MspInit+0x114>)
 8000c44:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000c46:	2335      	movs	r3, #53	@ 0x35
 8000c48:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c4a:	3b25      	subs	r3, #37	@ 0x25
 8000c4c:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c56:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c58:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000c5a:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000c5c:	2380      	movs	r3, #128	@ 0x80
 8000c5e:	015b      	lsls	r3, r3, #5
 8000c60:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000c62:	f000 f96d 	bl	8000f40 <HAL_DMA_Init>
 8000c66:	2800      	cmp	r0, #0
 8000c68:	d10b      	bne.n	8000c82 <HAL_UART_MspInit+0xfa>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <HAL_UART_MspInit+0x110>)
 8000c6c:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8000c6e:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	201c      	movs	r0, #28
 8000c76:	f000 f8fb 	bl	8000e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c7a:	201c      	movs	r0, #28
 8000c7c:	f000 f8fc 	bl	8000e78 <HAL_NVIC_EnableIRQ>
}
 8000c80:	e796      	b.n	8000bb0 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8000c82:	f7ff fd31 	bl	80006e8 <Error_Handler>
 8000c86:	e7f0      	b.n	8000c6a <HAL_UART_MspInit+0xe2>
 8000c88:	40013800 	.word	0x40013800
 8000c8c:	40004400 	.word	0x40004400
 8000c90:	40021000 	.word	0x40021000
 8000c94:	50000400 	.word	0x50000400
 8000c98:	2000065c 	.word	0x2000065c
 8000c9c:	40020008 	.word	0x40020008

08000ca0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler>

08000ca2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <HardFault_Handler>

08000ca4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ca4:	4770      	bx	lr

08000ca6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000caa:	f000 f883 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cae:	bd10      	pop	{r4, pc}

08000cb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cb0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000cb2:	4802      	ldr	r0, [pc, #8]	@ (8000cbc <DMA1_Channel1_IRQHandler+0xc>)
 8000cb4:	f000 fa70 	bl	8001198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cb8:	bd10      	pop	{r4, pc}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	2000065c 	.word	0x2000065c

08000cc0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000cc0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000cc2:	4802      	ldr	r0, [pc, #8]	@ (8000ccc <TIM14_IRQHandler+0xc>)
 8000cc4:	f001 f81e 	bl	8001d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000cc8:	bd10      	pop	{r4, pc}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	200007e0 	.word	0x200007e0

08000cd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cd0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cd2:	4802      	ldr	r0, [pc, #8]	@ (8000cdc <USART2_IRQHandler+0xc>)
 8000cd4:	f001 fcaa 	bl	800262c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cd8:	bd10      	pop	{r4, pc}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	200006b8 	.word	0x200006b8

08000ce0 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ce0:	4b02      	ldr	r3, [pc, #8]	@ (8000cec <SystemInit+0xc>)
 8000ce2:	2280      	movs	r2, #128	@ 0x80
 8000ce4:	0512      	lsls	r2, r2, #20
 8000ce6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ce8:	4770      	bx	lr
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cf0:	480d      	ldr	r0, [pc, #52]	@ (8000d28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cf2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cf4:	f7ff fff4 	bl	8000ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000cf8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000cfa:	e003      	b.n	8000d04 <LoopCopyDataInit>

08000cfc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000cfe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d00:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d02:	3104      	adds	r1, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d04:	480a      	ldr	r0, [pc, #40]	@ (8000d30 <LoopForever+0xa>)
  ldr r3, =_edata
 8000d06:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <LoopForever+0xe>)
  adds r2, r0, r1
 8000d08:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d0a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d0c:	d3f6      	bcc.n	8000cfc <CopyDataInit>
  ldr r2, =_sbss
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d38 <LoopForever+0x12>)
  b LoopFillZerobss
 8000d10:	e002      	b.n	8000d18 <LoopFillZerobss>

08000d12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  str  r3, [r2]
 8000d14:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d16:	3204      	adds	r2, #4

08000d18 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <LoopForever+0x16>)
  cmp r2, r3
 8000d1a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d1c:	d3f9      	bcc.n	8000d12 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000d1e:	f002 f9d5 	bl	80030cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d22:	f7ff fded 	bl	8000900 <main>

08000d26 <LoopForever>:

LoopForever:
    b LoopForever
 8000d26:	e7fe      	b.n	8000d26 <LoopForever>
  ldr   r0, =_estack
 8000d28:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000d2c:	08003298 	.word	0x08003298
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d34:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000d38:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000d3c:	20000a88 	.word	0x20000a88

08000d40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC1_IRQHandler>
	...

08000d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b510      	push	{r4, lr}
 8000d46:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <HAL_InitTick+0x4c>)
 8000d4a:	7819      	ldrb	r1, [r3, #0]
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	d101      	bne.n	8000d54 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d50:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000d52:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000d54:	20fa      	movs	r0, #250	@ 0xfa
 8000d56:	0080      	lsls	r0, r0, #2
 8000d58:	f7ff f9d6 	bl	8000108 <__udivsi3>
 8000d5c:	0001      	movs	r1, r0
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <HAL_InitTick+0x50>)
 8000d60:	6818      	ldr	r0, [r3, #0]
 8000d62:	f7ff f9d1 	bl	8000108 <__udivsi3>
 8000d66:	f000 f893 	bl	8000e90 <HAL_SYSTICK_Config>
 8000d6a:	2800      	cmp	r0, #0
 8000d6c:	d10d      	bne.n	8000d8a <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	2c03      	cmp	r4, #3
 8000d70:	d901      	bls.n	8000d76 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8000d72:	2001      	movs	r0, #1
 8000d74:	e7ed      	b.n	8000d52 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d76:	3001      	adds	r0, #1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	0021      	movs	r1, r4
 8000d7c:	4240      	negs	r0, r0
 8000d7e:	f000 f877 	bl	8000e70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d82:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <HAL_InitTick+0x54>)
 8000d84:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d86:	2000      	movs	r0, #0
 8000d88:	e7e3      	b.n	8000d52 <HAL_InitTick+0xe>
      status = HAL_ERROR;
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	e7e1      	b.n	8000d52 <HAL_InitTick+0xe>
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	20000004 	.word	0x20000004
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000008 	.word	0x20000008

08000d9c <HAL_Init>:
{
 8000d9c:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9e:	2003      	movs	r0, #3
 8000da0:	f7ff ffd0 	bl	8000d44 <HAL_InitTick>
 8000da4:	1e04      	subs	r4, r0, #0
 8000da6:	d002      	beq.n	8000dae <HAL_Init+0x12>
    status = HAL_ERROR;
 8000da8:	2401      	movs	r4, #1
}
 8000daa:	0020      	movs	r0, r4
 8000dac:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000dae:	f7ff fe77 	bl	8000aa0 <HAL_MspInit>
 8000db2:	e7fa      	b.n	8000daa <HAL_Init+0xe>

08000db4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000db4:	4b03      	ldr	r3, [pc, #12]	@ (8000dc4 <HAL_IncTick+0x10>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4a03      	ldr	r2, [pc, #12]	@ (8000dc8 <HAL_IncTick+0x14>)
 8000dba:	6811      	ldr	r1, [r2, #0]
 8000dbc:	185b      	adds	r3, r3, r1
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	4770      	bx	lr
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	20000004 	.word	0x20000004
 8000dc8:	20000a84 	.word	0x20000a84

08000dcc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000dcc:	4b01      	ldr	r3, [pc, #4]	@ (8000dd4 <HAL_GetTick+0x8>)
 8000dce:	6818      	ldr	r0, [r3, #0]
}
 8000dd0:	4770      	bx	lr
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	20000a84 	.word	0x20000a84

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	db11      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dde:	0883      	lsrs	r3, r0, #2
 8000de0:	4d13      	ldr	r5, [pc, #76]	@ (8000e30 <__NVIC_SetPriority+0x58>)
 8000de2:	33c0      	adds	r3, #192	@ 0xc0
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	595c      	ldr	r4, [r3, r5]
 8000de8:	2203      	movs	r2, #3
 8000dea:	4010      	ands	r0, r2
 8000dec:	00c0      	lsls	r0, r0, #3
 8000dee:	32fc      	adds	r2, #252	@ 0xfc
 8000df0:	0016      	movs	r6, r2
 8000df2:	4086      	lsls	r6, r0
 8000df4:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000df6:	0189      	lsls	r1, r1, #6
 8000df8:	400a      	ands	r2, r1
 8000dfa:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dfc:	4322      	orrs	r2, r4
 8000dfe:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e00:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e02:	230f      	movs	r3, #15
 8000e04:	4003      	ands	r3, r0
 8000e06:	3b08      	subs	r3, #8
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	3306      	adds	r3, #6
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4a09      	ldr	r2, [pc, #36]	@ (8000e34 <__NVIC_SetPriority+0x5c>)
 8000e10:	4694      	mov	ip, r2
 8000e12:	4463      	add	r3, ip
 8000e14:	685c      	ldr	r4, [r3, #4]
 8000e16:	2203      	movs	r2, #3
 8000e18:	4010      	ands	r0, r2
 8000e1a:	00c0      	lsls	r0, r0, #3
 8000e1c:	32fc      	adds	r2, #252	@ 0xfc
 8000e1e:	0015      	movs	r5, r2
 8000e20:	4085      	lsls	r5, r0
 8000e22:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e24:	0189      	lsls	r1, r1, #6
 8000e26:	400a      	ands	r2, r1
 8000e28:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e2a:	4322      	orrs	r2, r4
 8000e2c:	605a      	str	r2, [r3, #4]
}
 8000e2e:	e7e7      	b.n	8000e00 <__NVIC_SetPriority+0x28>
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	3801      	subs	r0, #1
 8000e3a:	2380      	movs	r3, #128	@ 0x80
 8000e3c:	045b      	lsls	r3, r3, #17
 8000e3e:	4298      	cmp	r0, r3
 8000e40:	d20f      	bcs.n	8000e62 <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e42:	4a09      	ldr	r2, [pc, #36]	@ (8000e68 <SysTick_Config+0x30>)
 8000e44:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e46:	4809      	ldr	r0, [pc, #36]	@ (8000e6c <SysTick_Config+0x34>)
 8000e48:	6a03      	ldr	r3, [r0, #32]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	21c0      	movs	r1, #192	@ 0xc0
 8000e50:	0609      	lsls	r1, r1, #24
 8000e52:	430b      	orrs	r3, r1
 8000e54:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e56:	2300      	movs	r3, #0
 8000e58:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5a:	3307      	adds	r3, #7
 8000e5c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e5e:	2000      	movs	r0, #0
}
 8000e60:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e62:	2001      	movs	r0, #1
 8000e64:	e7fc      	b.n	8000e60 <SysTick_Config+0x28>
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	e000e010 	.word	0xe000e010
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e72:	f7ff ffb1 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000e76:	bd10      	pop	{r4, pc}

08000e78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	db05      	blt.n	8000e88 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7c:	221f      	movs	r2, #31
 8000e7e:	4002      	ands	r2, r0
 8000e80:	2301      	movs	r3, #1
 8000e82:	4093      	lsls	r3, r2
 8000e84:	4a01      	ldr	r2, [pc, #4]	@ (8000e8c <HAL_NVIC_EnableIRQ+0x14>)
 8000e86:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000e88:	4770      	bx	lr
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e90:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 8000e92:	f7ff ffd1 	bl	8000e38 <SysTick_Config>
}
 8000e96:	bd10      	pop	{r4, pc}

08000e98 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e98:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e9a:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8000e9c:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 8000e9e:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000ea0:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d002      	beq.n	8000eac <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ea6:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8000ea8:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8000eaa:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8000eac:	4f0b      	ldr	r7, [pc, #44]	@ (8000edc <DMA_SetConfig+0x44>)
 8000eae:	687c      	ldr	r4, [r7, #4]
 8000eb0:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8000eb2:	261c      	movs	r6, #28
 8000eb4:	402e      	ands	r6, r5
 8000eb6:	2501      	movs	r5, #1
 8000eb8:	40b5      	lsls	r5, r6
 8000eba:	432c      	orrs	r4, r5
 8000ebc:	607c      	str	r4, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ebe:	6804      	ldr	r4, [r0, #0]
 8000ec0:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ec2:	6883      	ldr	r3, [r0, #8]
 8000ec4:	2b10      	cmp	r3, #16
 8000ec6:	d004      	beq.n	8000ed2 <DMA_SetConfig+0x3a>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000ec8:	6803      	ldr	r3, [r0, #0]
 8000eca:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000ecc:	6803      	ldr	r3, [r0, #0]
 8000ece:	60da      	str	r2, [r3, #12]
  }
}
 8000ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8000ed2:	6803      	ldr	r3, [r0, #0]
 8000ed4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000ed6:	6803      	ldr	r3, [r0, #0]
 8000ed8:	60d9      	str	r1, [r3, #12]
 8000eda:	e7f9      	b.n	8000ed0 <DMA_SetConfig+0x38>
 8000edc:	40020000 	.word	0x40020000

08000ee0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000ee0:	b510      	push	{r4, lr}
 8000ee2:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000ee4:	6803      	ldr	r3, [r0, #0]
 8000ee6:	20ff      	movs	r0, #255	@ 0xff
 8000ee8:	4018      	ands	r0, r3
 8000eea:	3808      	subs	r0, #8
 8000eec:	2114      	movs	r1, #20
 8000eee:	f7ff f90b 	bl	8000108 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8000ef2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000ef4:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000ef6:	4a06      	ldr	r2, [pc, #24]	@ (8000f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8000ef8:	4694      	mov	ip, r2
 8000efa:	4463      	add	r3, ip
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	6463      	str	r3, [r4, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8000f02:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000f04:	231c      	movs	r3, #28
 8000f06:	4018      	ands	r0, r3
 8000f08:	3b1b      	subs	r3, #27
 8000f0a:	4083      	lsls	r3, r0
 8000f0c:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 8000f0e:	bd10      	pop	{r4, pc}
 8000f10:	10008200 	.word	0x10008200
 8000f14:	40020880 	.word	0x40020880

08000f18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000f18:	6842      	ldr	r2, [r0, #4]
 8000f1a:	23ff      	movs	r3, #255	@ 0xff
 8000f1c:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8000f1e:	4a06      	ldr	r2, [pc, #24]	@ (8000f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8000f20:	189a      	adds	r2, r3, r2
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	6502      	str	r2, [r0, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000f26:	4a05      	ldr	r2, [pc, #20]	@ (8000f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8000f28:	6542      	str	r2, [r0, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	401a      	ands	r2, r3
 8000f30:	2301      	movs	r3, #1
 8000f32:	4093      	lsls	r3, r2
 8000f34:	6583      	str	r3, [r0, #88]	@ 0x58
}
 8000f36:	4770      	bx	lr
 8000f38:	1000823f 	.word	0x1000823f
 8000f3c:	40020940 	.word	0x40020940

08000f40 <HAL_DMA_Init>:
{
 8000f40:	b570      	push	{r4, r5, r6, lr}
 8000f42:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8000f44:	d04d      	beq.n	8000fe2 <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000f46:	6805      	ldr	r5, [r0, #0]
 8000f48:	4b27      	ldr	r3, [pc, #156]	@ (8000fe8 <HAL_DMA_Init+0xa8>)
 8000f4a:	18e8      	adds	r0, r5, r3
 8000f4c:	2114      	movs	r1, #20
 8000f4e:	f7ff f8db 	bl	8000108 <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8000f52:	0080      	lsls	r0, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000f54:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f56:	2325      	movs	r3, #37	@ 0x25
 8000f58:	2202      	movs	r2, #2
 8000f5a:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f5c:	682b      	ldr	r3, [r5, #0]
 8000f5e:	4a23      	ldr	r2, [pc, #140]	@ (8000fec <HAL_DMA_Init+0xac>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000f64:	6821      	ldr	r1, [r4, #0]
 8000f66:	680a      	ldr	r2, [r1, #0]
 8000f68:	68a3      	ldr	r3, [r4, #8]
 8000f6a:	68e0      	ldr	r0, [r4, #12]
 8000f6c:	4303      	orrs	r3, r0
 8000f6e:	6920      	ldr	r0, [r4, #16]
 8000f70:	4303      	orrs	r3, r0
 8000f72:	6960      	ldr	r0, [r4, #20]
 8000f74:	4303      	orrs	r3, r0
 8000f76:	69a0      	ldr	r0, [r4, #24]
 8000f78:	4303      	orrs	r3, r0
 8000f7a:	69e0      	ldr	r0, [r4, #28]
 8000f7c:	4303      	orrs	r3, r0
 8000f7e:	6a20      	ldr	r0, [r4, #32]
 8000f80:	4303      	orrs	r3, r0
 8000f82:	4313      	orrs	r3, r2
 8000f84:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000f86:	0020      	movs	r0, r4
 8000f88:	f7ff ffaa 	bl	8000ee0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f8c:	68a2      	ldr	r2, [r4, #8]
 8000f8e:	2380      	movs	r3, #128	@ 0x80
 8000f90:	01db      	lsls	r3, r3, #7
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d018      	beq.n	8000fc8 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f96:	6861      	ldr	r1, [r4, #4]
 8000f98:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8000f9a:	23ff      	movs	r3, #255	@ 0xff
 8000f9c:	400b      	ands	r3, r1
 8000f9e:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fa0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000fa2:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8000fa4:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000fa6:	6863      	ldr	r3, [r4, #4]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d90f      	bls.n	8000fce <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000fb2:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000fb4:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8000fba:	2225      	movs	r2, #37	@ 0x25
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8000fc0:	3a01      	subs	r2, #1
 8000fc2:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8000fc4:	2000      	movs	r0, #0
}
 8000fc6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	6063      	str	r3, [r4, #4]
 8000fcc:	e7e3      	b.n	8000f96 <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000fce:	0020      	movs	r0, r4
 8000fd0:	f7ff ffa2 	bl	8000f18 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000fd4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fda:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000fdc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	e7e9      	b.n	8000fb6 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	e7ef      	b.n	8000fc6 <HAL_DMA_Init+0x86>
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	bffdfff8 	.word	0xbffdfff8
 8000fec:	ffff800f 	.word	0xffff800f

08000ff0 <HAL_DMA_Start_IT>:
{
 8000ff0:	b570      	push	{r4, r5, r6, lr}
 8000ff2:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8000ff4:	2024      	movs	r0, #36	@ 0x24
 8000ff6:	5c20      	ldrb	r0, [r4, r0]
 8000ff8:	2801      	cmp	r0, #1
 8000ffa:	d046      	beq.n	800108a <HAL_DMA_Start_IT+0x9a>
 8000ffc:	2024      	movs	r0, #36	@ 0x24
 8000ffe:	2501      	movs	r5, #1
 8001000:	5425      	strb	r5, [r4, r0]
  if (HAL_DMA_STATE_READY == hdma->State)
 8001002:	3001      	adds	r0, #1
 8001004:	5c20      	ldrb	r0, [r4, r0]
 8001006:	2801      	cmp	r0, #1
 8001008:	d007      	beq.n	800101a <HAL_DMA_Start_IT+0x2a>
    __HAL_UNLOCK(hdma);
 800100a:	2324      	movs	r3, #36	@ 0x24
 800100c:	2200      	movs	r2, #0
 800100e:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8001010:	2002      	movs	r0, #2
  __HAL_UNLOCK(hdma);
 8001012:	2324      	movs	r3, #36	@ 0x24
 8001014:	2200      	movs	r2, #0
 8001016:	54e2      	strb	r2, [r4, r3]
}
 8001018:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800101a:	3024      	adds	r0, #36	@ 0x24
 800101c:	3501      	adds	r5, #1
 800101e:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001020:	2000      	movs	r0, #0
 8001022:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001024:	6825      	ldr	r5, [r4, #0]
 8001026:	6828      	ldr	r0, [r5, #0]
 8001028:	2601      	movs	r6, #1
 800102a:	43b0      	bics	r0, r6
 800102c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800102e:	0020      	movs	r0, r4
 8001030:	f7ff ff32 	bl	8000e98 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8001034:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001036:	2b00      	cmp	r3, #0
 8001038:	d01c      	beq.n	8001074 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800103a:	6822      	ldr	r2, [r4, #0]
 800103c:	6813      	ldr	r3, [r2, #0]
 800103e:	210e      	movs	r1, #14
 8001040:	430b      	orrs	r3, r1
 8001042:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001044:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001046:	6813      	ldr	r3, [r2, #0]
 8001048:	03db      	lsls	r3, r3, #15
 800104a:	d504      	bpl.n	8001056 <HAL_DMA_Start_IT+0x66>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800104c:	6811      	ldr	r1, [r2, #0]
 800104e:	2380      	movs	r3, #128	@ 0x80
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	430b      	orrs	r3, r1
 8001054:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8001056:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001058:	2b00      	cmp	r3, #0
 800105a:	d004      	beq.n	8001066 <HAL_DMA_Start_IT+0x76>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800105c:	6819      	ldr	r1, [r3, #0]
 800105e:	2280      	movs	r2, #128	@ 0x80
 8001060:	0052      	lsls	r2, r2, #1
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001066:	6822      	ldr	r2, [r4, #0]
 8001068:	6813      	ldr	r3, [r2, #0]
 800106a:	2101      	movs	r1, #1
 800106c:	430b      	orrs	r3, r1
 800106e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001070:	2000      	movs	r0, #0
 8001072:	e7ce      	b.n	8001012 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001074:	6822      	ldr	r2, [r4, #0]
 8001076:	6813      	ldr	r3, [r2, #0]
 8001078:	2104      	movs	r1, #4
 800107a:	438b      	bics	r3, r1
 800107c:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800107e:	6822      	ldr	r2, [r4, #0]
 8001080:	6813      	ldr	r3, [r2, #0]
 8001082:	3106      	adds	r1, #6
 8001084:	430b      	orrs	r3, r1
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	e7dc      	b.n	8001044 <HAL_DMA_Start_IT+0x54>
  __HAL_LOCK(hdma);
 800108a:	2002      	movs	r0, #2
 800108c:	e7c4      	b.n	8001018 <HAL_DMA_Start_IT+0x28>
	...

08001090 <HAL_DMA_Abort>:
{
 8001090:	b530      	push	{r4, r5, lr}
  if (NULL == hdma)
 8001092:	2800      	cmp	r0, #0
 8001094:	d036      	beq.n	8001104 <HAL_DMA_Abort+0x74>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001096:	2325      	movs	r3, #37	@ 0x25
 8001098:	5cc3      	ldrb	r3, [r0, r3]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d006      	beq.n	80010ac <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109e:	2304      	movs	r3, #4
 80010a0:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80010a2:	3320      	adds	r3, #32
 80010a4:	2200      	movs	r2, #0
 80010a6:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 80010a8:	2001      	movs	r0, #1
}
 80010aa:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ac:	6802      	ldr	r2, [r0, #0]
 80010ae:	6813      	ldr	r3, [r2, #0]
 80010b0:	210e      	movs	r1, #14
 80010b2:	438b      	bics	r3, r1
 80010b4:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010b6:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80010b8:	6813      	ldr	r3, [r2, #0]
 80010ba:	4913      	ldr	r1, [pc, #76]	@ (8001108 <HAL_DMA_Abort+0x78>)
 80010bc:	400b      	ands	r3, r1
 80010be:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80010c0:	6801      	ldr	r1, [r0, #0]
 80010c2:	680a      	ldr	r2, [r1, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	439a      	bics	r2, r3
 80010c8:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80010ca:	4c10      	ldr	r4, [pc, #64]	@ (800110c <HAL_DMA_Abort+0x7c>)
 80010cc:	6862      	ldr	r2, [r4, #4]
 80010ce:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80010d0:	211c      	movs	r1, #28
 80010d2:	4029      	ands	r1, r5
 80010d4:	408b      	lsls	r3, r1
 80010d6:	4313      	orrs	r3, r2
 80010d8:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010da:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80010dc:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80010de:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80010e0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d006      	beq.n	80010f4 <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4907      	ldr	r1, [pc, #28]	@ (8001108 <HAL_DMA_Abort+0x78>)
 80010ea:	400a      	ands	r2, r1
 80010ec:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010ee:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80010f0:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80010f2:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80010f4:	2325      	movs	r3, #37	@ 0x25
 80010f6:	2201      	movs	r2, #1
 80010f8:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80010fa:	3b01      	subs	r3, #1
 80010fc:	2200      	movs	r2, #0
 80010fe:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8001100:	2000      	movs	r0, #0
 8001102:	e7d2      	b.n	80010aa <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 8001104:	2001      	movs	r0, #1
 8001106:	e7d0      	b.n	80010aa <HAL_DMA_Abort+0x1a>
 8001108:	fffffeff 	.word	0xfffffeff
 800110c:	40020000 	.word	0x40020000

08001110 <HAL_DMA_Abort_IT>:
{
 8001110:	b570      	push	{r4, r5, r6, lr}
  __HAL_UNLOCK(hdma);
 8001112:	2324      	movs	r3, #36	@ 0x24
 8001114:	2200      	movs	r2, #0
 8001116:	54c2      	strb	r2, [r0, r3]
  __HAL_LOCK(hdma);
 8001118:	3201      	adds	r2, #1
 800111a:	54c2      	strb	r2, [r0, r3]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800111c:	3301      	adds	r3, #1
 800111e:	5cc3      	ldrb	r3, [r0, r3]
 8001120:	2b02      	cmp	r3, #2
 8001122:	d003      	beq.n	800112c <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001124:	2304      	movs	r3, #4
 8001126:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8001128:	2001      	movs	r0, #1
}
 800112a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800112c:	6802      	ldr	r2, [r0, #0]
 800112e:	6813      	ldr	r3, [r2, #0]
 8001130:	210e      	movs	r1, #14
 8001132:	438b      	bics	r3, r1
 8001134:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001136:	6801      	ldr	r1, [r0, #0]
 8001138:	680a      	ldr	r2, [r1, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	439a      	bics	r2, r3
 800113e:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001140:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8001142:	680a      	ldr	r2, [r1, #0]
 8001144:	4c12      	ldr	r4, [pc, #72]	@ (8001190 <HAL_DMA_Abort_IT+0x80>)
 8001146:	4022      	ands	r2, r4
 8001148:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800114a:	4c12      	ldr	r4, [pc, #72]	@ (8001194 <HAL_DMA_Abort_IT+0x84>)
 800114c:	6862      	ldr	r2, [r4, #4]
 800114e:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001150:	211c      	movs	r1, #28
 8001152:	4029      	ands	r1, r5
 8001154:	408b      	lsls	r3, r1
 8001156:	4313      	orrs	r3, r2
 8001158:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800115a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800115c:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800115e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001160:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001162:	2b00      	cmp	r3, #0
 8001164:	d006      	beq.n	8001174 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4909      	ldr	r1, [pc, #36]	@ (8001190 <HAL_DMA_Abort_IT+0x80>)
 800116a:	400a      	ands	r2, r1
 800116c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800116e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001170:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001172:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001174:	2325      	movs	r3, #37	@ 0x25
 8001176:	2201      	movs	r2, #1
 8001178:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800117a:	3b01      	subs	r3, #1
 800117c:	2200      	movs	r2, #0
 800117e:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8001180:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <HAL_DMA_Abort_IT+0x7c>
      hdma->XferAbortCallback(hdma);
 8001186:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001188:	2000      	movs	r0, #0
 800118a:	e7ce      	b.n	800112a <HAL_DMA_Abort_IT+0x1a>
 800118c:	2000      	movs	r0, #0
 800118e:	e7cc      	b.n	800112a <HAL_DMA_Abort_IT+0x1a>
 8001190:	fffffeff 	.word	0xfffffeff
 8001194:	40020000 	.word	0x40020000

08001198 <HAL_DMA_IRQHandler>:
{
 8001198:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 800119a:	4b31      	ldr	r3, [pc, #196]	@ (8001260 <HAL_DMA_IRQHandler+0xc8>)
 800119c:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800119e:	6804      	ldr	r4, [r0, #0]
 80011a0:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011a2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80011a4:	231c      	movs	r3, #28
 80011a6:	4013      	ands	r3, r2
 80011a8:	2204      	movs	r2, #4
 80011aa:	409a      	lsls	r2, r3
 80011ac:	4211      	tst	r1, r2
 80011ae:	d016      	beq.n	80011de <HAL_DMA_IRQHandler+0x46>
 80011b0:	076a      	lsls	r2, r5, #29
 80011b2:	d514      	bpl.n	80011de <HAL_DMA_IRQHandler+0x46>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	069b      	lsls	r3, r3, #26
 80011b8:	d403      	bmi.n	80011c2 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	2204      	movs	r2, #4
 80011be:	4393      	bics	r3, r2
 80011c0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 80011c2:	4c27      	ldr	r4, [pc, #156]	@ (8001260 <HAL_DMA_IRQHandler+0xc8>)
 80011c4:	6863      	ldr	r3, [r4, #4]
 80011c6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80011c8:	211c      	movs	r1, #28
 80011ca:	4011      	ands	r1, r2
 80011cc:	2204      	movs	r2, #4
 80011ce:	408a      	lsls	r2, r1
 80011d0:	4313      	orrs	r3, r2
 80011d2:	6063      	str	r3, [r4, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80011d4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d000      	beq.n	80011dc <HAL_DMA_IRQHandler+0x44>
      hdma->XferHalfCpltCallback(hdma);
 80011da:	4798      	blx	r3
}
 80011dc:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80011de:	2202      	movs	r2, #2
 80011e0:	409a      	lsls	r2, r3
 80011e2:	4211      	tst	r1, r2
 80011e4:	d01c      	beq.n	8001220 <HAL_DMA_IRQHandler+0x88>
 80011e6:	07aa      	lsls	r2, r5, #30
 80011e8:	d51a      	bpl.n	8001220 <HAL_DMA_IRQHandler+0x88>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	069b      	lsls	r3, r3, #26
 80011ee:	d406      	bmi.n	80011fe <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	220a      	movs	r2, #10
 80011f4:	4393      	bics	r3, r2
 80011f6:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80011f8:	2325      	movs	r3, #37	@ 0x25
 80011fa:	3a09      	subs	r2, #9
 80011fc:	54c2      	strb	r2, [r0, r3]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80011fe:	4c18      	ldr	r4, [pc, #96]	@ (8001260 <HAL_DMA_IRQHandler+0xc8>)
 8001200:	6863      	ldr	r3, [r4, #4]
 8001202:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001204:	211c      	movs	r1, #28
 8001206:	4011      	ands	r1, r2
 8001208:	2202      	movs	r2, #2
 800120a:	408a      	lsls	r2, r1
 800120c:	4313      	orrs	r3, r2
 800120e:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001210:	2324      	movs	r3, #36	@ 0x24
 8001212:	2200      	movs	r2, #0
 8001214:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 8001216:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0df      	beq.n	80011dc <HAL_DMA_IRQHandler+0x44>
      hdma->XferCpltCallback(hdma);
 800121c:	4798      	blx	r3
 800121e:	e7dd      	b.n	80011dc <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001220:	2208      	movs	r2, #8
 8001222:	409a      	lsls	r2, r3
 8001224:	4211      	tst	r1, r2
 8001226:	d0d9      	beq.n	80011dc <HAL_DMA_IRQHandler+0x44>
 8001228:	072d      	lsls	r5, r5, #28
 800122a:	d5d7      	bpl.n	80011dc <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	220e      	movs	r2, #14
 8001230:	4393      	bics	r3, r2
 8001232:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001234:	4c0a      	ldr	r4, [pc, #40]	@ (8001260 <HAL_DMA_IRQHandler+0xc8>)
 8001236:	6862      	ldr	r2, [r4, #4]
 8001238:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800123a:	211c      	movs	r1, #28
 800123c:	4019      	ands	r1, r3
 800123e:	2301      	movs	r3, #1
 8001240:	001d      	movs	r5, r3
 8001242:	408d      	lsls	r5, r1
 8001244:	432a      	orrs	r2, r5
 8001246:	6062      	str	r2, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001248:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800124a:	2225      	movs	r2, #37	@ 0x25
 800124c:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800124e:	3323      	adds	r3, #35	@ 0x23
 8001250:	2200      	movs	r2, #0
 8001252:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8001254:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0c0      	beq.n	80011dc <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 800125a:	4798      	blx	r3
  return;
 800125c:	e7be      	b.n	80011dc <HAL_DMA_IRQHandler+0x44>
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	40020000 	.word	0x40020000

08001264 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001266:	46d6      	mov	lr, sl
 8001268:	464f      	mov	r7, r9
 800126a:	4646      	mov	r6, r8
 800126c:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800126e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001270:	e03b      	b.n	80012ea <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001272:	2505      	movs	r5, #5
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x14>
 8001276:	2500      	movs	r5, #0
 8001278:	40a5      	lsls	r5, r4
 800127a:	002c      	movs	r4, r5
 800127c:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 800127e:	4d61      	ldr	r5, [pc, #388]	@ (8001404 <HAL_GPIO_Init+0x1a0>)
 8001280:	3218      	adds	r2, #24
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001286:	2280      	movs	r2, #128	@ 0x80
 8001288:	58af      	ldr	r7, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 800128a:	464a      	mov	r2, r9
 800128c:	43d2      	mvns	r2, r2
 800128e:	003d      	movs	r5, r7
 8001290:	464c      	mov	r4, r9
 8001292:	43a5      	bics	r5, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001294:	684c      	ldr	r4, [r1, #4]
 8001296:	03e4      	lsls	r4, r4, #15
 8001298:	d502      	bpl.n	80012a0 <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 800129a:	003d      	movs	r5, r7
 800129c:	464c      	mov	r4, r9
 800129e:	4325      	orrs	r5, r4
        }
        EXTI->IMR1 = tmp;
 80012a0:	4c58      	ldr	r4, [pc, #352]	@ (8001404 <HAL_GPIO_Init+0x1a0>)
 80012a2:	2780      	movs	r7, #128	@ 0x80
 80012a4:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 80012a6:	2584      	movs	r5, #132	@ 0x84
 80012a8:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 80012aa:	003d      	movs	r5, r7
 80012ac:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ae:	684c      	ldr	r4, [r1, #4]
 80012b0:	03a4      	lsls	r4, r4, #14
 80012b2:	d502      	bpl.n	80012ba <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 80012b4:	003d      	movs	r5, r7
 80012b6:	464c      	mov	r4, r9
 80012b8:	4325      	orrs	r5, r4
        }
        EXTI->EMR1 = tmp;
 80012ba:	4c52      	ldr	r4, [pc, #328]	@ (8001404 <HAL_GPIO_Init+0x1a0>)
 80012bc:	2784      	movs	r7, #132	@ 0x84
 80012be:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80012c0:	6827      	ldr	r7, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 80012c2:	003d      	movs	r5, r7
 80012c4:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012c6:	684c      	ldr	r4, [r1, #4]
 80012c8:	02e4      	lsls	r4, r4, #11
 80012ca:	d502      	bpl.n	80012d2 <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 80012cc:	003d      	movs	r5, r7
 80012ce:	464c      	mov	r4, r9
 80012d0:	4325      	orrs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 80012d2:	4c4c      	ldr	r4, [pc, #304]	@ (8001404 <HAL_GPIO_Init+0x1a0>)
 80012d4:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 80012d6:	6865      	ldr	r5, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 80012d8:	402a      	ands	r2, r5
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012da:	684c      	ldr	r4, [r1, #4]
 80012dc:	02a4      	lsls	r4, r4, #10
 80012de:	d501      	bpl.n	80012e4 <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 80012e0:	464a      	mov	r2, r9
 80012e2:	432a      	orrs	r2, r5
        }
        EXTI->FTSR1 = tmp;
 80012e4:	4c47      	ldr	r4, [pc, #284]	@ (8001404 <HAL_GPIO_Init+0x1a0>)
 80012e6:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 80012e8:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012ea:	680c      	ldr	r4, [r1, #0]
 80012ec:	0022      	movs	r2, r4
 80012ee:	40da      	lsrs	r2, r3
 80012f0:	d100      	bne.n	80012f4 <HAL_GPIO_Init+0x90>
 80012f2:	e081      	b.n	80013f8 <HAL_GPIO_Init+0x194>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80012f4:	2201      	movs	r2, #1
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0026      	movs	r6, r4
 80012fa:	4016      	ands	r6, r2
 80012fc:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 80012fe:	4214      	tst	r4, r2
 8001300:	d0f2      	beq.n	80012e8 <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001302:	684c      	ldr	r4, [r1, #4]
 8001304:	2c02      	cmp	r4, #2
 8001306:	d001      	beq.n	800130c <HAL_GPIO_Init+0xa8>
 8001308:	2c12      	cmp	r4, #18
 800130a:	d118      	bne.n	800133e <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 800130c:	08dd      	lsrs	r5, r3, #3
 800130e:	3508      	adds	r5, #8
 8001310:	00ad      	lsls	r5, r5, #2
 8001312:	582c      	ldr	r4, [r5, r0]
 8001314:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001316:	2707      	movs	r7, #7
 8001318:	401f      	ands	r7, r3
 800131a:	00bf      	lsls	r7, r7, #2
 800131c:	240f      	movs	r4, #15
 800131e:	46a2      	mov	sl, r4
 8001320:	0026      	movs	r6, r4
 8001322:	40be      	lsls	r6, r7
 8001324:	46b0      	mov	r8, r6
 8001326:	4666      	mov	r6, ip
 8001328:	4644      	mov	r4, r8
 800132a:	43a6      	bics	r6, r4
 800132c:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800132e:	690c      	ldr	r4, [r1, #16]
 8001330:	4656      	mov	r6, sl
 8001332:	4026      	ands	r6, r4
 8001334:	0034      	movs	r4, r6
 8001336:	40bc      	lsls	r4, r7
 8001338:	4666      	mov	r6, ip
 800133a:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 800133c:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 800133e:	6804      	ldr	r4, [r0, #0]
 8001340:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001342:	005d      	lsls	r5, r3, #1
 8001344:	2403      	movs	r4, #3
 8001346:	46a2      	mov	sl, r4
 8001348:	0027      	movs	r7, r4
 800134a:	40af      	lsls	r7, r5
 800134c:	46b8      	mov	r8, r7
 800134e:	43ff      	mvns	r7, r7
 8001350:	4666      	mov	r6, ip
 8001352:	4644      	mov	r4, r8
 8001354:	43a6      	bics	r6, r4
 8001356:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001358:	684c      	ldr	r4, [r1, #4]
 800135a:	4656      	mov	r6, sl
 800135c:	4026      	ands	r6, r4
 800135e:	0034      	movs	r4, r6
 8001360:	40ac      	lsls	r4, r5
 8001362:	4666      	mov	r6, ip
 8001364:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 8001366:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001368:	684c      	ldr	r4, [r1, #4]
 800136a:	1e66      	subs	r6, r4, #1
 800136c:	2e01      	cmp	r6, #1
 800136e:	d903      	bls.n	8001378 <HAL_GPIO_Init+0x114>
 8001370:	2c11      	cmp	r4, #17
 8001372:	d001      	beq.n	8001378 <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001374:	2c12      	cmp	r4, #18
 8001376:	d112      	bne.n	800139e <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8001378:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800137a:	403c      	ands	r4, r7
 800137c:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800137e:	68cc      	ldr	r4, [r1, #12]
 8001380:	40ac      	lsls	r4, r5
 8001382:	4666      	mov	r6, ip
 8001384:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 8001386:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 8001388:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800138a:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800138c:	684a      	ldr	r2, [r1, #4]
 800138e:	0912      	lsrs	r2, r2, #4
 8001390:	4694      	mov	ip, r2
 8001392:	2201      	movs	r2, #1
 8001394:	4666      	mov	r6, ip
 8001396:	4032      	ands	r2, r6
 8001398:	409a      	lsls	r2, r3
 800139a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 800139c:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800139e:	684a      	ldr	r2, [r1, #4]
 80013a0:	2a03      	cmp	r2, #3
 80013a2:	d005      	beq.n	80013b0 <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 80013a4:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80013a6:	403c      	ands	r4, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80013a8:	688a      	ldr	r2, [r1, #8]
 80013aa:	40aa      	lsls	r2, r5
 80013ac:	4322      	orrs	r2, r4
        GPIOx->PUPDR = tmp;
 80013ae:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b0:	684a      	ldr	r2, [r1, #4]
 80013b2:	00d2      	lsls	r2, r2, #3
 80013b4:	d598      	bpl.n	80012e8 <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 80013b6:	089a      	lsrs	r2, r3, #2
 80013b8:	0014      	movs	r4, r2
 80013ba:	3418      	adds	r4, #24
 80013bc:	00a4      	lsls	r4, r4, #2
 80013be:	4d11      	ldr	r5, [pc, #68]	@ (8001404 <HAL_GPIO_Init+0x1a0>)
 80013c0:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80013c2:	2403      	movs	r4, #3
 80013c4:	401c      	ands	r4, r3
 80013c6:	00e4      	lsls	r4, r4, #3
 80013c8:	250f      	movs	r5, #15
 80013ca:	40a5      	lsls	r5, r4
 80013cc:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80013ce:	25a0      	movs	r5, #160	@ 0xa0
 80013d0:	05ed      	lsls	r5, r5, #23
 80013d2:	42a8      	cmp	r0, r5
 80013d4:	d100      	bne.n	80013d8 <HAL_GPIO_Init+0x174>
 80013d6:	e74e      	b.n	8001276 <HAL_GPIO_Init+0x12>
 80013d8:	4d0b      	ldr	r5, [pc, #44]	@ (8001408 <HAL_GPIO_Init+0x1a4>)
 80013da:	42a8      	cmp	r0, r5
 80013dc:	d008      	beq.n	80013f0 <HAL_GPIO_Init+0x18c>
 80013de:	4d0b      	ldr	r5, [pc, #44]	@ (800140c <HAL_GPIO_Init+0x1a8>)
 80013e0:	42a8      	cmp	r0, r5
 80013e2:	d007      	beq.n	80013f4 <HAL_GPIO_Init+0x190>
 80013e4:	4d0a      	ldr	r5, [pc, #40]	@ (8001410 <HAL_GPIO_Init+0x1ac>)
 80013e6:	42a8      	cmp	r0, r5
 80013e8:	d100      	bne.n	80013ec <HAL_GPIO_Init+0x188>
 80013ea:	e742      	b.n	8001272 <HAL_GPIO_Init+0xe>
 80013ec:	2506      	movs	r5, #6
 80013ee:	e743      	b.n	8001278 <HAL_GPIO_Init+0x14>
 80013f0:	2501      	movs	r5, #1
 80013f2:	e741      	b.n	8001278 <HAL_GPIO_Init+0x14>
 80013f4:	2502      	movs	r5, #2
 80013f6:	e73f      	b.n	8001278 <HAL_GPIO_Init+0x14>
  }
}
 80013f8:	bce0      	pop	{r5, r6, r7}
 80013fa:	46ba      	mov	sl, r7
 80013fc:	46b1      	mov	r9, r6
 80013fe:	46a8      	mov	r8, r5
 8001400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001402:	46c0      	nop			@ (mov r8, r8)
 8001404:	40021800 	.word	0x40021800
 8001408:	50000400 	.word	0x50000400
 800140c:	50000800 	.word	0x50000800
 8001410:	50001400 	.word	0x50001400

08001414 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001414:	2a00      	cmp	r2, #0
 8001416:	d001      	beq.n	800141c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001418:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800141a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800141c:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800141e:	e7fc      	b.n	800141a <HAL_GPIO_WritePin+0x6>

08001420 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001420:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001422:	0013      	movs	r3, r2
 8001424:	400b      	ands	r3, r1
 8001426:	041b      	lsls	r3, r3, #16
 8001428:	4391      	bics	r1, r2
 800142a:	430b      	orrs	r3, r1
 800142c:	6183      	str	r3, [r0, #24]
}
 800142e:	4770      	bx	lr

08001430 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001430:	b570      	push	{r4, r5, r6, lr}
 8001432:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001434:	d100      	bne.n	8001438 <HAL_RCC_OscConfig+0x8>
 8001436:	e139      	b.n	80016ac <HAL_RCC_OscConfig+0x27c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001438:	6803      	ldr	r3, [r0, #0]
 800143a:	07db      	lsls	r3, r3, #31
 800143c:	d52c      	bpl.n	8001498 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800143e:	4ba1      	ldr	r3, [pc, #644]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	2338      	movs	r3, #56	@ 0x38
 8001444:	4013      	ands	r3, r2

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001446:	2b08      	cmp	r3, #8
 8001448:	d022      	beq.n	8001490 <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144a:	6843      	ldr	r3, [r0, #4]
 800144c:	2280      	movs	r2, #128	@ 0x80
 800144e:	0252      	lsls	r2, r2, #9
 8001450:	4293      	cmp	r3, r2
 8001452:	d02e      	beq.n	80014b2 <HAL_RCC_OscConfig+0x82>
 8001454:	22a0      	movs	r2, #160	@ 0xa0
 8001456:	02d2      	lsls	r2, r2, #11
 8001458:	4293      	cmp	r3, r2
 800145a:	d031      	beq.n	80014c0 <HAL_RCC_OscConfig+0x90>
 800145c:	4b99      	ldr	r3, [pc, #612]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4999      	ldr	r1, [pc, #612]	@ (80016c8 <HAL_RCC_OscConfig+0x298>)
 8001462:	400a      	ands	r2, r1
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4998      	ldr	r1, [pc, #608]	@ (80016cc <HAL_RCC_OscConfig+0x29c>)
 800146a:	400a      	ands	r2, r1
 800146c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800146e:	6863      	ldr	r3, [r4, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d031      	beq.n	80014d8 <HAL_RCC_OscConfig+0xa8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fcaa 	bl	8000dcc <HAL_GetTick>
 8001478:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800147a:	4b92      	ldr	r3, [pc, #584]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	039b      	lsls	r3, r3, #14
 8001480:	d40a      	bmi.n	8001498 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001482:	f7ff fca3 	bl	8000dcc <HAL_GetTick>
 8001486:	1b40      	subs	r0, r0, r5
 8001488:	2864      	cmp	r0, #100	@ 0x64
 800148a:	d9f6      	bls.n	800147a <HAL_RCC_OscConfig+0x4a>
          {
            return HAL_TIMEOUT;
 800148c:	2003      	movs	r0, #3
 800148e:	e10e      	b.n	80016ae <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001490:	6843      	ldr	r3, [r0, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d100      	bne.n	8001498 <HAL_RCC_OscConfig+0x68>
 8001496:	e10b      	b.n	80016b0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001498:	6823      	ldr	r3, [r4, #0]
 800149a:	079b      	lsls	r3, r3, #30
 800149c:	d547      	bpl.n	800152e <HAL_RCC_OscConfig+0xfe>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800149e:	4b89      	ldr	r3, [pc, #548]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2238      	movs	r2, #56	@ 0x38

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80014a4:	421a      	tst	r2, r3
 80014a6:	d161      	bne.n	800156c <HAL_RCC_OscConfig+0x13c>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80014a8:	68e3      	ldr	r3, [r4, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d122      	bne.n	80014f4 <HAL_RCC_OscConfig+0xc4>
      {
        return HAL_ERROR;
 80014ae:	2001      	movs	r0, #1
 80014b0:	e0fd      	b.n	80016ae <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b2:	4a84      	ldr	r2, [pc, #528]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 80014b4:	6811      	ldr	r1, [r2, #0]
 80014b6:	2380      	movs	r3, #128	@ 0x80
 80014b8:	025b      	lsls	r3, r3, #9
 80014ba:	430b      	orrs	r3, r1
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e7d6      	b.n	800146e <HAL_RCC_OscConfig+0x3e>
 80014c0:	4b80      	ldr	r3, [pc, #512]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 80014c2:	6819      	ldr	r1, [r3, #0]
 80014c4:	2280      	movs	r2, #128	@ 0x80
 80014c6:	02d2      	lsls	r2, r2, #11
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	6819      	ldr	r1, [r3, #0]
 80014ce:	2280      	movs	r2, #128	@ 0x80
 80014d0:	0252      	lsls	r2, r2, #9
 80014d2:	430a      	orrs	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	e7ca      	b.n	800146e <HAL_RCC_OscConfig+0x3e>
        tickstart = HAL_GetTick();
 80014d8:	f7ff fc78 	bl	8000dcc <HAL_GetTick>
 80014dc:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014de:	4b79      	ldr	r3, [pc, #484]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	039b      	lsls	r3, r3, #14
 80014e4:	d5d8      	bpl.n	8001498 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80014e6:	f7ff fc71 	bl	8000dcc <HAL_GetTick>
 80014ea:	1b40      	subs	r0, r0, r5
 80014ec:	2864      	cmp	r0, #100	@ 0x64
 80014ee:	d9f6      	bls.n	80014de <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
 80014f0:	2003      	movs	r0, #3
 80014f2:	e0dc      	b.n	80016ae <HAL_RCC_OscConfig+0x27e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b73      	ldr	r3, [pc, #460]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	4975      	ldr	r1, [pc, #468]	@ (80016d0 <HAL_RCC_OscConfig+0x2a0>)
 80014fa:	400a      	ands	r2, r1
 80014fc:	6961      	ldr	r1, [r4, #20]
 80014fe:	0209      	lsls	r1, r1, #8
 8001500:	430a      	orrs	r2, r1
 8001502:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4973      	ldr	r1, [pc, #460]	@ (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 8001508:	400a      	ands	r2, r1
 800150a:	6921      	ldr	r1, [r4, #16]
 800150c:	430a      	orrs	r2, r1
 800150e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	0adb      	lsrs	r3, r3, #11
 8001514:	2207      	movs	r2, #7
 8001516:	401a      	ands	r2, r3
 8001518:	4b6f      	ldr	r3, [pc, #444]	@ (80016d8 <HAL_RCC_OscConfig+0x2a8>)
 800151a:	40d3      	lsrs	r3, r2
 800151c:	4a6f      	ldr	r2, [pc, #444]	@ (80016dc <HAL_RCC_OscConfig+0x2ac>)
 800151e:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001520:	4b6f      	ldr	r3, [pc, #444]	@ (80016e0 <HAL_RCC_OscConfig+0x2b0>)
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	f7ff fc0e 	bl	8000d44 <HAL_InitTick>
 8001528:	2800      	cmp	r0, #0
 800152a:	d000      	beq.n	800152e <HAL_RCC_OscConfig+0xfe>
 800152c:	e0c2      	b.n	80016b4 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	071b      	lsls	r3, r3, #28
 8001532:	d557      	bpl.n	80015e4 <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001534:	4b63      	ldr	r3, [pc, #396]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	2338      	movs	r3, #56	@ 0x38
 800153a:	4013      	ands	r3, r2
 800153c:	2b18      	cmp	r3, #24
 800153e:	d04e      	beq.n	80015de <HAL_RCC_OscConfig+0x1ae>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001540:	69a3      	ldr	r3, [r4, #24]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d077      	beq.n	8001636 <HAL_RCC_OscConfig+0x206>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001546:	4a5f      	ldr	r2, [pc, #380]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 8001548:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800154a:	2101      	movs	r1, #1
 800154c:	430b      	orrs	r3, r1
 800154e:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff fc3c 	bl	8000dcc <HAL_GetTick>
 8001554:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001556:	4b5b      	ldr	r3, [pc, #364]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 8001558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800155a:	079b      	lsls	r3, r3, #30
 800155c:	d442      	bmi.n	80015e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800155e:	f7ff fc35 	bl	8000dcc <HAL_GetTick>
 8001562:	1b40      	subs	r0, r0, r5
 8001564:	2802      	cmp	r0, #2
 8001566:	d9f6      	bls.n	8001556 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8001568:	2003      	movs	r0, #3
 800156a:	e0a0      	b.n	80016ae <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800156c:	68e3      	ldr	r3, [r4, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d022      	beq.n	80015b8 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001572:	4a54      	ldr	r2, [pc, #336]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 8001574:	6813      	ldr	r3, [r2, #0]
 8001576:	4957      	ldr	r1, [pc, #348]	@ (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 8001578:	400b      	ands	r3, r1
 800157a:	6921      	ldr	r1, [r4, #16]
 800157c:	430b      	orrs	r3, r1
 800157e:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8001580:	6811      	ldr	r1, [r2, #0]
 8001582:	2380      	movs	r3, #128	@ 0x80
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	430b      	orrs	r3, r1
 8001588:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800158a:	f7ff fc1f 	bl	8000dcc <HAL_GetTick>
 800158e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001590:	4b4c      	ldr	r3, [pc, #304]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	055b      	lsls	r3, r3, #21
 8001596:	d406      	bmi.n	80015a6 <HAL_RCC_OscConfig+0x176>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001598:	f7ff fc18 	bl	8000dcc <HAL_GetTick>
 800159c:	1b40      	subs	r0, r0, r5
 800159e:	2802      	cmp	r0, #2
 80015a0:	d9f6      	bls.n	8001590 <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 80015a2:	2003      	movs	r0, #3
 80015a4:	e083      	b.n	80016ae <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a6:	4947      	ldr	r1, [pc, #284]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 80015a8:	684b      	ldr	r3, [r1, #4]
 80015aa:	4a49      	ldr	r2, [pc, #292]	@ (80016d0 <HAL_RCC_OscConfig+0x2a0>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	6962      	ldr	r2, [r4, #20]
 80015b0:	0212      	lsls	r2, r2, #8
 80015b2:	4313      	orrs	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
 80015b6:	e7ba      	b.n	800152e <HAL_RCC_OscConfig+0xfe>
        __HAL_RCC_HSI_DISABLE();
 80015b8:	4a42      	ldr	r2, [pc, #264]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 80015ba:	6813      	ldr	r3, [r2, #0]
 80015bc:	4949      	ldr	r1, [pc, #292]	@ (80016e4 <HAL_RCC_OscConfig+0x2b4>)
 80015be:	400b      	ands	r3, r1
 80015c0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80015c2:	f7ff fc03 	bl	8000dcc <HAL_GetTick>
 80015c6:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015c8:	4b3e      	ldr	r3, [pc, #248]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	055b      	lsls	r3, r3, #21
 80015ce:	d5ae      	bpl.n	800152e <HAL_RCC_OscConfig+0xfe>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80015d0:	f7ff fbfc 	bl	8000dcc <HAL_GetTick>
 80015d4:	1b40      	subs	r0, r0, r5
 80015d6:	2802      	cmp	r0, #2
 80015d8:	d9f6      	bls.n	80015c8 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 80015da:	2003      	movs	r0, #3
 80015dc:	e067      	b.n	80016ae <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80015de:	69a3      	ldr	r3, [r4, #24]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d069      	beq.n	80016b8 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e4:	6823      	ldr	r3, [r4, #0]
 80015e6:	075b      	lsls	r3, r3, #29
 80015e8:	d568      	bpl.n	80016bc <HAL_RCC_OscConfig+0x28c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80015ea:	4b36      	ldr	r3, [pc, #216]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	2338      	movs	r3, #56	@ 0x38
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b20      	cmp	r3, #32
 80015f4:	d032      	beq.n	800165c <HAL_RCC_OscConfig+0x22c>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f6:	68a3      	ldr	r3, [r4, #8]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d034      	beq.n	8001666 <HAL_RCC_OscConfig+0x236>
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d038      	beq.n	8001672 <HAL_RCC_OscConfig+0x242>
 8001600:	4b30      	ldr	r3, [pc, #192]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 8001602:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001604:	2101      	movs	r1, #1
 8001606:	438a      	bics	r2, r1
 8001608:	65da      	str	r2, [r3, #92]	@ 0x5c
 800160a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800160c:	3103      	adds	r1, #3
 800160e:	438a      	bics	r2, r1
 8001610:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001612:	68a3      	ldr	r3, [r4, #8]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d038      	beq.n	800168a <HAL_RCC_OscConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fbd8 	bl	8000dcc <HAL_GetTick>
 800161c:	0004      	movs	r4, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800161e:	4b29      	ldr	r3, [pc, #164]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 8001620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001622:	079b      	lsls	r3, r3, #30
 8001624:	d42f      	bmi.n	8001686 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001626:	f7ff fbd1 	bl	8000dcc <HAL_GetTick>
 800162a:	1b00      	subs	r0, r0, r4
 800162c:	4b2e      	ldr	r3, [pc, #184]	@ (80016e8 <HAL_RCC_OscConfig+0x2b8>)
 800162e:	4298      	cmp	r0, r3
 8001630:	d9f5      	bls.n	800161e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001632:	2003      	movs	r0, #3
 8001634:	e03b      	b.n	80016ae <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_LSI_DISABLE();
 8001636:	4a23      	ldr	r2, [pc, #140]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 8001638:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800163a:	2101      	movs	r1, #1
 800163c:	438b      	bics	r3, r1
 800163e:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001640:	f7ff fbc4 	bl	8000dcc <HAL_GetTick>
 8001644:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001646:	4b1f      	ldr	r3, [pc, #124]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800164a:	079b      	lsls	r3, r3, #30
 800164c:	d5ca      	bpl.n	80015e4 <HAL_RCC_OscConfig+0x1b4>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800164e:	f7ff fbbd 	bl	8000dcc <HAL_GetTick>
 8001652:	1b40      	subs	r0, r0, r5
 8001654:	2802      	cmp	r0, #2
 8001656:	d9f6      	bls.n	8001646 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8001658:	2003      	movs	r0, #3
 800165a:	e028      	b.n	80016ae <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800165c:	68a3      	ldr	r3, [r4, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d02e      	beq.n	80016c0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001662:	2000      	movs	r0, #0
 8001664:	e023      	b.n	80016ae <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001666:	4a17      	ldr	r2, [pc, #92]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 8001668:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 800166a:	2101      	movs	r1, #1
 800166c:	430b      	orrs	r3, r1
 800166e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001670:	e7cf      	b.n	8001612 <HAL_RCC_OscConfig+0x1e2>
 8001672:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 8001674:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001676:	2104      	movs	r1, #4
 8001678:	430a      	orrs	r2, r1
 800167a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800167c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800167e:	3903      	subs	r1, #3
 8001680:	430a      	orrs	r2, r1
 8001682:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001684:	e7c5      	b.n	8001612 <HAL_RCC_OscConfig+0x1e2>
  return HAL_OK;
 8001686:	2000      	movs	r0, #0
 8001688:	e011      	b.n	80016ae <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 800168a:	f7ff fb9f 	bl	8000dcc <HAL_GetTick>
 800168e:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <HAL_RCC_OscConfig+0x294>)
 8001692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001694:	079b      	lsls	r3, r3, #30
 8001696:	d507      	bpl.n	80016a8 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001698:	f7ff fb98 	bl	8000dcc <HAL_GetTick>
 800169c:	1b00      	subs	r0, r0, r4
 800169e:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <HAL_RCC_OscConfig+0x2b8>)
 80016a0:	4298      	cmp	r0, r3
 80016a2:	d9f5      	bls.n	8001690 <HAL_RCC_OscConfig+0x260>
            return HAL_TIMEOUT;
 80016a4:	2003      	movs	r0, #3
 80016a6:	e002      	b.n	80016ae <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 80016a8:	2000      	movs	r0, #0
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 80016ac:	2001      	movs	r0, #1
}
 80016ae:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80016b0:	2001      	movs	r0, #1
 80016b2:	e7fc      	b.n	80016ae <HAL_RCC_OscConfig+0x27e>
          return HAL_ERROR;
 80016b4:	2001      	movs	r0, #1
 80016b6:	e7fa      	b.n	80016ae <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 80016b8:	2001      	movs	r0, #1
 80016ba:	e7f8      	b.n	80016ae <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 80016bc:	2000      	movs	r0, #0
 80016be:	e7f6      	b.n	80016ae <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 80016c0:	2001      	movs	r0, #1
 80016c2:	e7f4      	b.n	80016ae <HAL_RCC_OscConfig+0x27e>
 80016c4:	40021000 	.word	0x40021000
 80016c8:	fffeffff 	.word	0xfffeffff
 80016cc:	fffbffff 	.word	0xfffbffff
 80016d0:	ffff80ff 	.word	0xffff80ff
 80016d4:	ffffc7ff 	.word	0xffffc7ff
 80016d8:	02dc6c00 	.word	0x02dc6c00
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000008 	.word	0x20000008
 80016e4:	fffffeff 	.word	0xfffffeff
 80016e8:	00001388 	.word	0x00001388

080016ec <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80016ec:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x54>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2238      	movs	r2, #56	@ 0x38
 80016f2:	421a      	tst	r2, r3
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80016f6:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x54>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	0ad2      	lsrs	r2, r2, #11
 80016fc:	2307      	movs	r3, #7
 80016fe:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001700:	4810      	ldr	r0, [pc, #64]	@ (8001744 <HAL_RCC_GetSysClockFreq+0x58>)
 8001702:	40d8      	lsrs	r0, r3
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 8001704:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x54>)
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	2338      	movs	r3, #56	@ 0x38
 800170c:	4013      	ands	r3, r2
 800170e:	2b08      	cmp	r3, #8
 8001710:	d010      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x54>)
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	2338      	movs	r3, #56	@ 0x38
 8001718:	4013      	ands	r3, r2
 800171a:	2b20      	cmp	r3, #32
 800171c:	d00c      	beq.n	8001738 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800171e:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x54>)
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	2338      	movs	r3, #56	@ 0x38
 8001724:	4013      	ands	r3, r2
 8001726:	2b18      	cmp	r3, #24
 8001728:	d001      	beq.n	800172e <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 800172a:	2000      	movs	r0, #0
  return sysclockfreq;
 800172c:	e7ea      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 800172e:	20fa      	movs	r0, #250	@ 0xfa
 8001730:	01c0      	lsls	r0, r0, #7
 8001732:	e7e7      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8001734:	4804      	ldr	r0, [pc, #16]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001736:	e7e5      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8001738:	2080      	movs	r0, #128	@ 0x80
 800173a:	0200      	lsls	r0, r0, #8
 800173c:	e7e2      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x18>
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	40021000 	.word	0x40021000
 8001744:	02dc6c00 	.word	0x02dc6c00
 8001748:	007a1200 	.word	0x007a1200

0800174c <HAL_RCC_ClockConfig>:
{
 800174c:	b570      	push	{r4, r5, r6, lr}
 800174e:	0004      	movs	r4, r0
 8001750:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001752:	2800      	cmp	r0, #0
 8001754:	d100      	bne.n	8001758 <HAL_RCC_ClockConfig+0xc>
 8001756:	e0a4      	b.n	80018a2 <HAL_RCC_ClockConfig+0x156>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b54      	ldr	r3, [pc, #336]	@ (80018ac <HAL_RCC_ClockConfig+0x160>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2307      	movs	r3, #7
 800175e:	4013      	ands	r3, r2
 8001760:	428b      	cmp	r3, r1
 8001762:	d321      	bcc.n	80017a8 <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	079a      	lsls	r2, r3, #30
 8001768:	d510      	bpl.n	800178c <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176a:	075b      	lsls	r3, r3, #29
 800176c:	d507      	bpl.n	800177e <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800176e:	4950      	ldr	r1, [pc, #320]	@ (80018b0 <HAL_RCC_ClockConfig+0x164>)
 8001770:	688a      	ldr	r2, [r1, #8]
 8001772:	4b50      	ldr	r3, [pc, #320]	@ (80018b4 <HAL_RCC_ClockConfig+0x168>)
 8001774:	401a      	ands	r2, r3
 8001776:	23b0      	movs	r3, #176	@ 0xb0
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800177e:	4a4c      	ldr	r2, [pc, #304]	@ (80018b0 <HAL_RCC_ClockConfig+0x164>)
 8001780:	6893      	ldr	r3, [r2, #8]
 8001782:	494d      	ldr	r1, [pc, #308]	@ (80018b8 <HAL_RCC_ClockConfig+0x16c>)
 8001784:	400b      	ands	r3, r1
 8001786:	68e1      	ldr	r1, [r4, #12]
 8001788:	430b      	orrs	r3, r1
 800178a:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	07db      	lsls	r3, r3, #31
 8001790:	d54c      	bpl.n	800182c <HAL_RCC_ClockConfig+0xe0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001792:	6863      	ldr	r3, [r4, #4]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d01e      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001798:	2b00      	cmp	r3, #0
 800179a:	d139      	bne.n	8001810 <HAL_RCC_ClockConfig+0xc4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800179c:	4a44      	ldr	r2, [pc, #272]	@ (80018b0 <HAL_RCC_ClockConfig+0x164>)
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	0552      	lsls	r2, r2, #21
 80017a2:	d41c      	bmi.n	80017de <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80017a4:	2001      	movs	r0, #1
 80017a6:	e064      	b.n	8001872 <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a8:	4a40      	ldr	r2, [pc, #256]	@ (80018ac <HAL_RCC_ClockConfig+0x160>)
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	2107      	movs	r1, #7
 80017ae:	438b      	bics	r3, r1
 80017b0:	432b      	orrs	r3, r5
 80017b2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80017b4:	f7ff fb0a 	bl	8000dcc <HAL_GetTick>
 80017b8:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017ba:	4b3c      	ldr	r3, [pc, #240]	@ (80018ac <HAL_RCC_ClockConfig+0x160>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	2307      	movs	r3, #7
 80017c0:	4013      	ands	r3, r2
 80017c2:	42ab      	cmp	r3, r5
 80017c4:	d0ce      	beq.n	8001764 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80017c6:	f7ff fb01 	bl	8000dcc <HAL_GetTick>
 80017ca:	1b80      	subs	r0, r0, r6
 80017cc:	4a3b      	ldr	r2, [pc, #236]	@ (80018bc <HAL_RCC_ClockConfig+0x170>)
 80017ce:	4290      	cmp	r0, r2
 80017d0:	d9f3      	bls.n	80017ba <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 80017d2:	2003      	movs	r0, #3
 80017d4:	e04d      	b.n	8001872 <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d6:	4a36      	ldr	r2, [pc, #216]	@ (80018b0 <HAL_RCC_ClockConfig+0x164>)
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	0392      	lsls	r2, r2, #14
 80017dc:	d563      	bpl.n	80018a6 <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017de:	4934      	ldr	r1, [pc, #208]	@ (80018b0 <HAL_RCC_ClockConfig+0x164>)
 80017e0:	688a      	ldr	r2, [r1, #8]
 80017e2:	2007      	movs	r0, #7
 80017e4:	4382      	bics	r2, r0
 80017e6:	4313      	orrs	r3, r2
 80017e8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80017ea:	f7ff faef 	bl	8000dcc <HAL_GetTick>
 80017ee:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f0:	4b2f      	ldr	r3, [pc, #188]	@ (80018b0 <HAL_RCC_ClockConfig+0x164>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2238      	movs	r2, #56	@ 0x38
 80017f6:	401a      	ands	r2, r3
 80017f8:	6863      	ldr	r3, [r4, #4]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d015      	beq.n	800182c <HAL_RCC_ClockConfig+0xe0>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001800:	f7ff fae4 	bl	8000dcc <HAL_GetTick>
 8001804:	1b80      	subs	r0, r0, r6
 8001806:	4b2d      	ldr	r3, [pc, #180]	@ (80018bc <HAL_RCC_ClockConfig+0x170>)
 8001808:	4298      	cmp	r0, r3
 800180a:	d9f1      	bls.n	80017f0 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 800180c:	2003      	movs	r0, #3
 800180e:	e030      	b.n	8001872 <HAL_RCC_ClockConfig+0x126>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001810:	2b03      	cmp	r3, #3
 8001812:	d005      	beq.n	8001820 <HAL_RCC_ClockConfig+0xd4>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001814:	4a26      	ldr	r2, [pc, #152]	@ (80018b0 <HAL_RCC_ClockConfig+0x164>)
 8001816:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001818:	0792      	lsls	r2, r2, #30
 800181a:	d4e0      	bmi.n	80017de <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800181c:	2001      	movs	r0, #1
 800181e:	e028      	b.n	8001872 <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001820:	4a23      	ldr	r2, [pc, #140]	@ (80018b0 <HAL_RCC_ClockConfig+0x164>)
 8001822:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8001824:	0792      	lsls	r2, r2, #30
 8001826:	d4da      	bmi.n	80017de <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8001828:	2001      	movs	r0, #1
 800182a:	e022      	b.n	8001872 <HAL_RCC_ClockConfig+0x126>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800182c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ac <HAL_RCC_ClockConfig+0x160>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2307      	movs	r3, #7
 8001832:	4013      	ands	r3, r2
 8001834:	42ab      	cmp	r3, r5
 8001836:	d81d      	bhi.n	8001874 <HAL_RCC_ClockConfig+0x128>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	6823      	ldr	r3, [r4, #0]
 800183a:	075b      	lsls	r3, r3, #29
 800183c:	d506      	bpl.n	800184c <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800183e:	4a1c      	ldr	r2, [pc, #112]	@ (80018b0 <HAL_RCC_ClockConfig+0x164>)
 8001840:	6893      	ldr	r3, [r2, #8]
 8001842:	491f      	ldr	r1, [pc, #124]	@ (80018c0 <HAL_RCC_ClockConfig+0x174>)
 8001844:	400b      	ands	r3, r1
 8001846:	6921      	ldr	r1, [r4, #16]
 8001848:	430b      	orrs	r3, r1
 800184a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800184c:	f7ff ff4e 	bl	80016ec <HAL_RCC_GetSysClockFreq>
 8001850:	4b17      	ldr	r3, [pc, #92]	@ (80018b0 <HAL_RCC_ClockConfig+0x164>)
 8001852:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001854:	0a12      	lsrs	r2, r2, #8
 8001856:	230f      	movs	r3, #15
 8001858:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800185a:	4a1a      	ldr	r2, [pc, #104]	@ (80018c4 <HAL_RCC_ClockConfig+0x178>)
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001860:	231f      	movs	r3, #31
 8001862:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001864:	40d8      	lsrs	r0, r3
 8001866:	4b18      	ldr	r3, [pc, #96]	@ (80018c8 <HAL_RCC_ClockConfig+0x17c>)
 8001868:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800186a:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <HAL_RCC_ClockConfig+0x180>)
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	f7ff fa69 	bl	8000d44 <HAL_InitTick>
}
 8001872:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001874:	4a0d      	ldr	r2, [pc, #52]	@ (80018ac <HAL_RCC_ClockConfig+0x160>)
 8001876:	6813      	ldr	r3, [r2, #0]
 8001878:	2107      	movs	r1, #7
 800187a:	438b      	bics	r3, r1
 800187c:	432b      	orrs	r3, r5
 800187e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001880:	f7ff faa4 	bl	8000dcc <HAL_GetTick>
 8001884:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001886:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <HAL_RCC_ClockConfig+0x160>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	2307      	movs	r3, #7
 800188c:	4013      	ands	r3, r2
 800188e:	42ab      	cmp	r3, r5
 8001890:	d0d2      	beq.n	8001838 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001892:	f7ff fa9b 	bl	8000dcc <HAL_GetTick>
 8001896:	1b80      	subs	r0, r0, r6
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <HAL_RCC_ClockConfig+0x170>)
 800189a:	4298      	cmp	r0, r3
 800189c:	d9f3      	bls.n	8001886 <HAL_RCC_ClockConfig+0x13a>
        return HAL_TIMEOUT;
 800189e:	2003      	movs	r0, #3
 80018a0:	e7e7      	b.n	8001872 <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 80018a2:	2001      	movs	r0, #1
 80018a4:	e7e5      	b.n	8001872 <HAL_RCC_ClockConfig+0x126>
        return HAL_ERROR;
 80018a6:	2001      	movs	r0, #1
 80018a8:	e7e3      	b.n	8001872 <HAL_RCC_ClockConfig+0x126>
 80018aa:	46c0      	nop			@ (mov r8, r8)
 80018ac:	40022000 	.word	0x40022000
 80018b0:	40021000 	.word	0x40021000
 80018b4:	ffff84ff 	.word	0xffff84ff
 80018b8:	fffff0ff 	.word	0xfffff0ff
 80018bc:	00001388 	.word	0x00001388
 80018c0:	ffff8fff 	.word	0xffff8fff
 80018c4:	0800314c 	.word	0x0800314c
 80018c8:	20000000 	.word	0x20000000
 80018cc:	20000008 	.word	0x20000008

080018d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d0:	b510      	push	{r4, lr}
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80018d2:	f7ff ff0b 	bl	80016ec <HAL_RCC_GetSysClockFreq>
 80018d6:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <HAL_RCC_GetHCLKFreq+0x24>)
 80018d8:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018da:	0a12      	lsrs	r2, r2, #8
 80018dc:	230f      	movs	r3, #15
 80018de:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80018e0:	4a05      	ldr	r2, [pc, #20]	@ (80018f8 <HAL_RCC_GetHCLKFreq+0x28>)
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018e6:	231f      	movs	r3, #31
 80018e8:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80018ea:	40d8      	lsrs	r0, r3
 80018ec:	4b03      	ldr	r3, [pc, #12]	@ (80018fc <HAL_RCC_GetHCLKFreq+0x2c>)
 80018ee:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80018f0:	bd10      	pop	{r4, pc}
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	40021000 	.word	0x40021000
 80018f8:	0800314c 	.word	0x0800314c
 80018fc:	20000000 	.word	0x20000000

08001900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001900:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001902:	f7ff ffe5 	bl	80018d0 <HAL_RCC_GetHCLKFreq>
 8001906:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	0b12      	lsrs	r2, r2, #12
 800190c:	2307      	movs	r3, #7
 800190e:	4013      	ands	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	@ (8001924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	589a      	ldr	r2, [r3, r2]
 8001916:	231f      	movs	r3, #31
 8001918:	4013      	ands	r3, r2
 800191a:	40d8      	lsrs	r0, r3
}
 800191c:	bd10      	pop	{r4, pc}
 800191e:	46c0      	nop			@ (mov r8, r8)
 8001920:	40021000 	.word	0x40021000
 8001924:	0800312c 	.word	0x0800312c

08001928 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001928:	b570      	push	{r4, r5, r6, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800192e:	6803      	ldr	r3, [r0, #0]
 8001930:	065b      	lsls	r3, r3, #25
 8001932:	d550      	bpl.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0xae>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001934:	4b42      	ldr	r3, [pc, #264]	@ (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	d435      	bmi.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193c:	4b40      	ldr	r3, [pc, #256]	@ (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800193e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001940:	2180      	movs	r1, #128	@ 0x80
 8001942:	0549      	lsls	r1, r1, #21
 8001944:	430a      	orrs	r2, r1
 8001946:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800194a:	400b      	ands	r3, r1
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001950:	2501      	movs	r5, #1
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001952:	4b3b      	ldr	r3, [pc, #236]	@ (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001954:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8001956:	22c0      	movs	r2, #192	@ 0xc0
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	000b      	movs	r3, r1
 800195c:	4013      	ands	r3, r2

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800195e:	4211      	tst	r1, r2
 8001960:	d035      	beq.n	80019ce <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8001962:	69a2      	ldr	r2, [r4, #24]
 8001964:	429a      	cmp	r2, r3
 8001966:	d00d      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001968:	4a35      	ldr	r2, [pc, #212]	@ (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800196a:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 800196c:	4935      	ldr	r1, [pc, #212]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 800196e:	400b      	ands	r3, r1
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001970:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
 8001972:	2180      	movs	r1, #128	@ 0x80
 8001974:	0249      	lsls	r1, r1, #9
 8001976:	4301      	orrs	r1, r0
 8001978:	65d1      	str	r1, [r2, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800197a:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 800197c:	4832      	ldr	r0, [pc, #200]	@ (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 800197e:	4001      	ands	r1, r0
 8001980:	65d1      	str	r1, [r2, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001982:	65d3      	str	r3, [r2, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001984:	07db      	lsls	r3, r3, #31
 8001986:	d411      	bmi.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x84>
    }

    if (ret == HAL_OK)
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001988:	4a2d      	ldr	r2, [pc, #180]	@ (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800198a:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 800198c:	492d      	ldr	r1, [pc, #180]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 800198e:	400b      	ands	r3, r1
 8001990:	69a1      	ldr	r1, [r4, #24]
 8001992:	430b      	orrs	r3, r1
 8001994:	65d3      	str	r3, [r2, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001996:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001998:	2d01      	cmp	r5, #1
 800199a:	d11d      	bne.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199c:	4a28      	ldr	r2, [pc, #160]	@ (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800199e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80019a0:	492a      	ldr	r1, [pc, #168]	@ (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80019a2:	400b      	ands	r3, r1
 80019a4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80019a6:	e017      	b.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    FlagStatus       pwrclkchanged = RESET;
 80019a8:	2500      	movs	r5, #0
 80019aa:	e7d2      	b.n	8001952 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      tickstart = HAL_GetTick();
 80019ac:	f7ff fa0e 	bl	8000dcc <HAL_GetTick>
 80019b0:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80019b2:	4b23      	ldr	r3, [pc, #140]	@ (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80019b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b6:	079b      	lsls	r3, r3, #30
 80019b8:	d407      	bmi.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ba:	f7ff fa07 	bl	8000dcc <HAL_GetTick>
 80019be:	1b80      	subs	r0, r0, r6
 80019c0:	4b23      	ldr	r3, [pc, #140]	@ (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80019c2:	4298      	cmp	r0, r3
 80019c4:	d9f5      	bls.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
          ret = HAL_TIMEOUT;
 80019c6:	2003      	movs	r0, #3
 80019c8:	e002      	b.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80019ca:	2000      	movs	r0, #0
 80019cc:	e000      	b.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 80019ce:	2000      	movs	r0, #0
    if (ret == HAL_OK)
 80019d0:	2800      	cmp	r0, #0
 80019d2:	d1e1      	bne.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80019d4:	e7d8      	b.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x60>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80019d6:	2000      	movs	r0, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019d8:	6823      	ldr	r3, [r4, #0]
 80019da:	07db      	lsls	r3, r3, #31
 80019dc:	d506      	bpl.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019de:	4a18      	ldr	r2, [pc, #96]	@ (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80019e0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80019e2:	2103      	movs	r1, #3
 80019e4:	438b      	bics	r3, r1
 80019e6:	68a1      	ldr	r1, [r4, #8]
 80019e8:	430b      	orrs	r3, r1
 80019ea:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	079b      	lsls	r3, r3, #30
 80019f0:	d506      	bpl.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019f2:	4a13      	ldr	r2, [pc, #76]	@ (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80019f4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80019f6:	4917      	ldr	r1, [pc, #92]	@ (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80019f8:	400b      	ands	r3, r1
 80019fa:	68e1      	ldr	r1, [r4, #12]
 80019fc:	430b      	orrs	r3, r1
 80019fe:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	069b      	lsls	r3, r3, #26
 8001a04:	d506      	bpl.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a06:	4a0e      	ldr	r2, [pc, #56]	@ (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001a08:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	6961      	ldr	r1, [r4, #20]
 8001a10:	430b      	orrs	r3, r1
 8001a12:	6553      	str	r3, [r2, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001a14:	6823      	ldr	r3, [r4, #0]
 8001a16:	075b      	lsls	r3, r3, #29
 8001a18:	d506      	bpl.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001a1a:	4a09      	ldr	r2, [pc, #36]	@ (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001a1c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8001a1e:	490e      	ldr	r1, [pc, #56]	@ (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a20:	400b      	ands	r3, r1
 8001a22:	6921      	ldr	r1, [r4, #16]
 8001a24:	430b      	orrs	r3, r1
 8001a26:	6553      	str	r3, [r2, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001a28:	6823      	ldr	r3, [r4, #0]
 8001a2a:	061b      	lsls	r3, r3, #24
 8001a2c:	d506      	bpl.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001a2e:	4a04      	ldr	r2, [pc, #16]	@ (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001a30:	6813      	ldr	r3, [r2, #0]
 8001a32:	21e0      	movs	r1, #224	@ 0xe0
 8001a34:	438b      	bics	r3, r1
 8001a36:	6861      	ldr	r1, [r4, #4]
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 8001a3c:	b002      	add	sp, #8
 8001a3e:	bd70      	pop	{r4, r5, r6, pc}
 8001a40:	40021000 	.word	0x40021000
 8001a44:	fffffcff 	.word	0xfffffcff
 8001a48:	fffeffff 	.word	0xfffeffff
 8001a4c:	efffffff 	.word	0xefffffff
 8001a50:	00001388 	.word	0x00001388
 8001a54:	ffffcfff 	.word	0xffffcfff
 8001a58:	ffff3fff 	.word	0xffff3fff

08001a5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001a5c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a5e:	6a05      	ldr	r5, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a60:	6a03      	ldr	r3, [r0, #32]
 8001a62:	2201      	movs	r2, #1
 8001a64:	4393      	bics	r3, r2
 8001a66:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a68:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a6a:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a6c:	4c16      	ldr	r4, [pc, #88]	@ (8001ac8 <TIM_OC1_SetConfig+0x6c>)
 8001a6e:	4023      	ands	r3, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a70:	680c      	ldr	r4, [r1, #0]
 8001a72:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001a74:	2302      	movs	r3, #2
 8001a76:	439d      	bics	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001a78:	688b      	ldr	r3, [r1, #8]
 8001a7a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001a7c:	4d13      	ldr	r5, [pc, #76]	@ (8001acc <TIM_OC1_SetConfig+0x70>)
 8001a7e:	42a8      	cmp	r0, r5
 8001a80:	d005      	beq.n	8001a8e <TIM_OC1_SetConfig+0x32>
 8001a82:	4d13      	ldr	r5, [pc, #76]	@ (8001ad0 <TIM_OC1_SetConfig+0x74>)
 8001a84:	42a8      	cmp	r0, r5
 8001a86:	d002      	beq.n	8001a8e <TIM_OC1_SetConfig+0x32>
 8001a88:	4d12      	ldr	r5, [pc, #72]	@ (8001ad4 <TIM_OC1_SetConfig+0x78>)
 8001a8a:	42a8      	cmp	r0, r5
 8001a8c:	d106      	bne.n	8001a9c <TIM_OC1_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001a8e:	2508      	movs	r5, #8
 8001a90:	43ab      	bics	r3, r5
 8001a92:	001d      	movs	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001a94:	68cb      	ldr	r3, [r1, #12]
 8001a96:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001a98:	2504      	movs	r5, #4
 8001a9a:	43ab      	bics	r3, r5
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a9c:	4d0b      	ldr	r5, [pc, #44]	@ (8001acc <TIM_OC1_SetConfig+0x70>)
 8001a9e:	42a8      	cmp	r0, r5
 8001aa0:	d005      	beq.n	8001aae <TIM_OC1_SetConfig+0x52>
 8001aa2:	4d0b      	ldr	r5, [pc, #44]	@ (8001ad0 <TIM_OC1_SetConfig+0x74>)
 8001aa4:	42a8      	cmp	r0, r5
 8001aa6:	d002      	beq.n	8001aae <TIM_OC1_SetConfig+0x52>
 8001aa8:	4d0a      	ldr	r5, [pc, #40]	@ (8001ad4 <TIM_OC1_SetConfig+0x78>)
 8001aaa:	42a8      	cmp	r0, r5
 8001aac:	d105      	bne.n	8001aba <TIM_OC1_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001aae:	4d0a      	ldr	r5, [pc, #40]	@ (8001ad8 <TIM_OC1_SetConfig+0x7c>)
 8001ab0:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001ab2:	694d      	ldr	r5, [r1, #20]
 8001ab4:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ab6:	698a      	ldr	r2, [r1, #24]
 8001ab8:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001aba:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001abc:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001abe:	684a      	ldr	r2, [r1, #4]
 8001ac0:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ac2:	6203      	str	r3, [r0, #32]
}
 8001ac4:	bd30      	pop	{r4, r5, pc}
 8001ac6:	46c0      	nop			@ (mov r8, r8)
 8001ac8:	fffeff8c 	.word	0xfffeff8c
 8001acc:	40012c00 	.word	0x40012c00
 8001ad0:	40014400 	.word	0x40014400
 8001ad4:	40014800 	.word	0x40014800
 8001ad8:	fffffcff 	.word	0xfffffcff

08001adc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001adc:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ade:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ae0:	6a03      	ldr	r3, [r0, #32]
 8001ae2:	4a16      	ldr	r2, [pc, #88]	@ (8001b3c <TIM_OC3_SetConfig+0x60>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ae8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001aea:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001aec:	4d14      	ldr	r5, [pc, #80]	@ (8001b40 <TIM_OC3_SetConfig+0x64>)
 8001aee:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001af0:	680d      	ldr	r5, [r1, #0]
 8001af2:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001af4:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <TIM_OC3_SetConfig+0x68>)
 8001af6:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001af8:	688b      	ldr	r3, [r1, #8]
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001afe:	4c12      	ldr	r4, [pc, #72]	@ (8001b48 <TIM_OC3_SetConfig+0x6c>)
 8001b00:	42a0      	cmp	r0, r4
 8001b02:	d006      	beq.n	8001b12 <TIM_OC3_SetConfig+0x36>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b04:	4c11      	ldr	r4, [pc, #68]	@ (8001b4c <TIM_OC3_SetConfig+0x70>)
 8001b06:	42a0      	cmp	r0, r4
 8001b08:	d00a      	beq.n	8001b20 <TIM_OC3_SetConfig+0x44>
 8001b0a:	4c11      	ldr	r4, [pc, #68]	@ (8001b50 <TIM_OC3_SetConfig+0x74>)
 8001b0c:	42a0      	cmp	r0, r4
 8001b0e:	d10f      	bne.n	8001b30 <TIM_OC3_SetConfig+0x54>
 8001b10:	e006      	b.n	8001b20 <TIM_OC3_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC3NP;
 8001b12:	4c10      	ldr	r4, [pc, #64]	@ (8001b54 <TIM_OC3_SetConfig+0x78>)
 8001b14:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001b16:	68cb      	ldr	r3, [r1, #12]
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8001b1c:	4c0e      	ldr	r4, [pc, #56]	@ (8001b58 <TIM_OC3_SetConfig+0x7c>)
 8001b1e:	4023      	ands	r3, r4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001b20:	4c0e      	ldr	r4, [pc, #56]	@ (8001b5c <TIM_OC3_SetConfig+0x80>)
 8001b22:	4022      	ands	r2, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001b24:	694c      	ldr	r4, [r1, #20]
 8001b26:	0124      	lsls	r4, r4, #4
 8001b28:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b2a:	698a      	ldr	r2, [r1, #24]
 8001b2c:	0112      	lsls	r2, r2, #4
 8001b2e:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b30:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b32:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001b34:	684a      	ldr	r2, [r1, #4]
 8001b36:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b38:	6203      	str	r3, [r0, #32]
}
 8001b3a:	bd30      	pop	{r4, r5, pc}
 8001b3c:	fffffeff 	.word	0xfffffeff
 8001b40:	fffeff8c 	.word	0xfffeff8c
 8001b44:	fffffdff 	.word	0xfffffdff
 8001b48:	40012c00 	.word	0x40012c00
 8001b4c:	40014400 	.word	0x40014400
 8001b50:	40014800 	.word	0x40014800
 8001b54:	fffff7ff 	.word	0xfffff7ff
 8001b58:	fffffbff 	.word	0xfffffbff
 8001b5c:	ffffcfff 	.word	0xffffcfff

08001b60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001b60:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b62:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b64:	6a03      	ldr	r3, [r0, #32]
 8001b66:	4a11      	ldr	r2, [pc, #68]	@ (8001bac <TIM_OC4_SetConfig+0x4c>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b6c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b6e:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001b70:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb0 <TIM_OC4_SetConfig+0x50>)
 8001b72:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b74:	680a      	ldr	r2, [r1, #0]
 8001b76:	0212      	lsls	r2, r2, #8
 8001b78:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <TIM_OC4_SetConfig+0x54>)
 8001b7c:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b7e:	688b      	ldr	r3, [r1, #8]
 8001b80:	031b      	lsls	r3, r3, #12
 8001b82:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b84:	4c0c      	ldr	r4, [pc, #48]	@ (8001bb8 <TIM_OC4_SetConfig+0x58>)
 8001b86:	42a0      	cmp	r0, r4
 8001b88:	d005      	beq.n	8001b96 <TIM_OC4_SetConfig+0x36>
 8001b8a:	4c0c      	ldr	r4, [pc, #48]	@ (8001bbc <TIM_OC4_SetConfig+0x5c>)
 8001b8c:	42a0      	cmp	r0, r4
 8001b8e:	d002      	beq.n	8001b96 <TIM_OC4_SetConfig+0x36>
 8001b90:	4c0b      	ldr	r4, [pc, #44]	@ (8001bc0 <TIM_OC4_SetConfig+0x60>)
 8001b92:	42a0      	cmp	r0, r4
 8001b94:	d104      	bne.n	8001ba0 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b96:	4c0b      	ldr	r4, [pc, #44]	@ (8001bc4 <TIM_OC4_SetConfig+0x64>)
 8001b98:	402c      	ands	r4, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b9a:	694d      	ldr	r5, [r1, #20]
 8001b9c:	01ad      	lsls	r5, r5, #6
 8001b9e:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ba0:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ba2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001ba4:	684a      	ldr	r2, [r1, #4]
 8001ba6:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ba8:	6203      	str	r3, [r0, #32]
}
 8001baa:	bd30      	pop	{r4, r5, pc}
 8001bac:	ffffefff 	.word	0xffffefff
 8001bb0:	feff8cff 	.word	0xfeff8cff
 8001bb4:	ffffdfff 	.word	0xffffdfff
 8001bb8:	40012c00 	.word	0x40012c00
 8001bbc:	40014400 	.word	0x40014400
 8001bc0:	40014800 	.word	0x40014800
 8001bc4:	ffffbfff 	.word	0xffffbfff

08001bc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8001bc8:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bca:	6a04      	ldr	r4, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001bcc:	6a03      	ldr	r3, [r0, #32]
 8001bce:	4a11      	ldr	r2, [pc, #68]	@ (8001c14 <TIM_OC5_SetConfig+0x4c>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bd4:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001bd6:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001bd8:	4d0f      	ldr	r5, [pc, #60]	@ (8001c18 <TIM_OC5_SetConfig+0x50>)
 8001bda:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bdc:	680d      	ldr	r5, [r1, #0]
 8001bde:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001be0:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <TIM_OC5_SetConfig+0x54>)
 8001be2:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001be4:	688b      	ldr	r3, [r1, #8]
 8001be6:	041b      	lsls	r3, r3, #16
 8001be8:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bea:	4c0d      	ldr	r4, [pc, #52]	@ (8001c20 <TIM_OC5_SetConfig+0x58>)
 8001bec:	42a0      	cmp	r0, r4
 8001bee:	d005      	beq.n	8001bfc <TIM_OC5_SetConfig+0x34>
 8001bf0:	4c0c      	ldr	r4, [pc, #48]	@ (8001c24 <TIM_OC5_SetConfig+0x5c>)
 8001bf2:	42a0      	cmp	r0, r4
 8001bf4:	d002      	beq.n	8001bfc <TIM_OC5_SetConfig+0x34>
 8001bf6:	4c0c      	ldr	r4, [pc, #48]	@ (8001c28 <TIM_OC5_SetConfig+0x60>)
 8001bf8:	42a0      	cmp	r0, r4
 8001bfa:	d104      	bne.n	8001c06 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001bfc:	4c05      	ldr	r4, [pc, #20]	@ (8001c14 <TIM_OC5_SetConfig+0x4c>)
 8001bfe:	4014      	ands	r4, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001c00:	694a      	ldr	r2, [r1, #20]
 8001c02:	0212      	lsls	r2, r2, #8
 8001c04:	4322      	orrs	r2, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c06:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001c08:	6545      	str	r5, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001c0a:	684a      	ldr	r2, [r1, #4]
 8001c0c:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c0e:	6203      	str	r3, [r0, #32]
}
 8001c10:	bd30      	pop	{r4, r5, pc}
 8001c12:	46c0      	nop			@ (mov r8, r8)
 8001c14:	fffeffff 	.word	0xfffeffff
 8001c18:	fffeff8f 	.word	0xfffeff8f
 8001c1c:	fffdffff 	.word	0xfffdffff
 8001c20:	40012c00 	.word	0x40012c00
 8001c24:	40014400 	.word	0x40014400
 8001c28:	40014800 	.word	0x40014800

08001c2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8001c2c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c2e:	6a04      	ldr	r4, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001c30:	6a03      	ldr	r3, [r0, #32]
 8001c32:	4a11      	ldr	r2, [pc, #68]	@ (8001c78 <TIM_OC6_SetConfig+0x4c>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c38:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001c3a:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001c3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c7c <TIM_OC6_SetConfig+0x50>)
 8001c3e:	4013      	ands	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c40:	680a      	ldr	r2, [r1, #0]
 8001c42:	0212      	lsls	r2, r2, #8
 8001c44:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <TIM_OC6_SetConfig+0x54>)
 8001c48:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001c4a:	688b      	ldr	r3, [r1, #8]
 8001c4c:	051b      	lsls	r3, r3, #20
 8001c4e:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c50:	4c0c      	ldr	r4, [pc, #48]	@ (8001c84 <TIM_OC6_SetConfig+0x58>)
 8001c52:	42a0      	cmp	r0, r4
 8001c54:	d005      	beq.n	8001c62 <TIM_OC6_SetConfig+0x36>
 8001c56:	4c0c      	ldr	r4, [pc, #48]	@ (8001c88 <TIM_OC6_SetConfig+0x5c>)
 8001c58:	42a0      	cmp	r0, r4
 8001c5a:	d002      	beq.n	8001c62 <TIM_OC6_SetConfig+0x36>
 8001c5c:	4c0b      	ldr	r4, [pc, #44]	@ (8001c8c <TIM_OC6_SetConfig+0x60>)
 8001c5e:	42a0      	cmp	r0, r4
 8001c60:	d104      	bne.n	8001c6c <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001c62:	4c0b      	ldr	r4, [pc, #44]	@ (8001c90 <TIM_OC6_SetConfig+0x64>)
 8001c64:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001c66:	694d      	ldr	r5, [r1, #20]
 8001c68:	02ad      	lsls	r5, r5, #10
 8001c6a:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c6c:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001c6e:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001c70:	684a      	ldr	r2, [r1, #4]
 8001c72:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c74:	6203      	str	r3, [r0, #32]
}
 8001c76:	bd30      	pop	{r4, r5, pc}
 8001c78:	ffefffff 	.word	0xffefffff
 8001c7c:	feff8fff 	.word	0xfeff8fff
 8001c80:	ffdfffff 	.word	0xffdfffff
 8001c84:	40012c00 	.word	0x40012c00
 8001c88:	40014400 	.word	0x40014400
 8001c8c:	40014800 	.word	0x40014800
 8001c90:	fffbffff 	.word	0xfffbffff

08001c94 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001c94:	233d      	movs	r3, #61	@ 0x3d
 8001c96:	5cc3      	ldrb	r3, [r0, r3]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d122      	bne.n	8001ce2 <HAL_TIM_Base_Start_IT+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8001c9c:	333c      	adds	r3, #60	@ 0x3c
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ca2:	6802      	ldr	r2, [r0, #0]
 8001ca4:	68d3      	ldr	r3, [r2, #12]
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cac:	6803      	ldr	r3, [r0, #0]
 8001cae:	4a10      	ldr	r2, [pc, #64]	@ (8001cf0 <HAL_TIM_Base_Start_IT+0x5c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d008      	beq.n	8001cc6 <HAL_TIM_Base_Start_IT+0x32>
 8001cb4:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf4 <HAL_TIM_Base_Start_IT+0x60>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d005      	beq.n	8001cc6 <HAL_TIM_Base_Start_IT+0x32>
    __HAL_TIM_ENABLE(htim);
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	e00e      	b.n	8001ce4 <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	490b      	ldr	r1, [pc, #44]	@ (8001cf8 <HAL_TIM_Base_Start_IT+0x64>)
 8001cca:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ccc:	2a06      	cmp	r2, #6
 8001cce:	d00a      	beq.n	8001ce6 <HAL_TIM_Base_Start_IT+0x52>
 8001cd0:	3907      	subs	r1, #7
 8001cd2:	428a      	cmp	r2, r1
 8001cd4:	d009      	beq.n	8001cea <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2101      	movs	r1, #1
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001cde:	2000      	movs	r0, #0
 8001ce0:	e000      	b.n	8001ce4 <HAL_TIM_Base_Start_IT+0x50>
    return HAL_ERROR;
 8001ce2:	2001      	movs	r0, #1
}
 8001ce4:	4770      	bx	lr
  return HAL_OK;
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	e7fc      	b.n	8001ce4 <HAL_TIM_Base_Start_IT+0x50>
 8001cea:	2000      	movs	r0, #0
 8001cec:	e7fa      	b.n	8001ce4 <HAL_TIM_Base_Start_IT+0x50>
 8001cee:	46c0      	nop			@ (mov r8, r8)
 8001cf0:	40012c00 	.word	0x40012c00
 8001cf4:	40000400 	.word	0x40000400
 8001cf8:	00010007 	.word	0x00010007

08001cfc <HAL_TIM_OC_DelayElapsedCallback>:
}
 8001cfc:	4770      	bx	lr

08001cfe <HAL_TIM_IC_CaptureCallback>:
}
 8001cfe:	4770      	bx	lr

08001d00 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001d00:	4770      	bx	lr

08001d02 <HAL_TIM_TriggerCallback>:
}
 8001d02:	4770      	bx	lr

08001d04 <HAL_TIM_IRQHandler>:
{
 8001d04:	b570      	push	{r4, r5, r6, lr}
 8001d06:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8001d08:	6803      	ldr	r3, [r0, #0]
 8001d0a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d0c:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d0e:	07a2      	lsls	r2, r4, #30
 8001d10:	d50e      	bpl.n	8001d30 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d12:	07b2      	lsls	r2, r6, #30
 8001d14:	d50c      	bpl.n	8001d30 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d16:	2203      	movs	r2, #3
 8001d18:	4252      	negs	r2, r2
 8001d1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d20:	6803      	ldr	r3, [r0, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	079b      	lsls	r3, r3, #30
 8001d26:	d057      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0xd4>
          HAL_TIM_IC_CaptureCallback(htim);
 8001d28:	f7ff ffe9 	bl	8001cfe <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d30:	0763      	lsls	r3, r4, #29
 8001d32:	d512      	bpl.n	8001d5a <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d34:	0773      	lsls	r3, r6, #29
 8001d36:	d510      	bpl.n	8001d5a <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d38:	682b      	ldr	r3, [r5, #0]
 8001d3a:	2205      	movs	r2, #5
 8001d3c:	4252      	negs	r2, r2
 8001d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d40:	2302      	movs	r3, #2
 8001d42:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d44:	682b      	ldr	r3, [r5, #0]
 8001d46:	699a      	ldr	r2, [r3, #24]
 8001d48:	23c0      	movs	r3, #192	@ 0xc0
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	421a      	tst	r2, r3
 8001d4e:	d049      	beq.n	8001de4 <HAL_TIM_IRQHandler+0xe0>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d50:	0028      	movs	r0, r5
 8001d52:	f7ff ffd4 	bl	8001cfe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d56:	2300      	movs	r3, #0
 8001d58:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d5a:	0723      	lsls	r3, r4, #28
 8001d5c:	d510      	bpl.n	8001d80 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d5e:	0733      	lsls	r3, r6, #28
 8001d60:	d50e      	bpl.n	8001d80 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d62:	682b      	ldr	r3, [r5, #0]
 8001d64:	2209      	movs	r2, #9
 8001d66:	4252      	negs	r2, r2
 8001d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d6e:	682b      	ldr	r3, [r5, #0]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	079b      	lsls	r3, r3, #30
 8001d74:	d03d      	beq.n	8001df2 <HAL_TIM_IRQHandler+0xee>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d76:	0028      	movs	r0, r5
 8001d78:	f7ff ffc1 	bl	8001cfe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d80:	06e3      	lsls	r3, r4, #27
 8001d82:	d512      	bpl.n	8001daa <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d84:	06f3      	lsls	r3, r6, #27
 8001d86:	d510      	bpl.n	8001daa <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d88:	682b      	ldr	r3, [r5, #0]
 8001d8a:	2211      	movs	r2, #17
 8001d8c:	4252      	negs	r2, r2
 8001d8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d90:	2308      	movs	r3, #8
 8001d92:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d94:	682b      	ldr	r3, [r5, #0]
 8001d96:	69da      	ldr	r2, [r3, #28]
 8001d98:	23c0      	movs	r3, #192	@ 0xc0
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	421a      	tst	r2, r3
 8001d9e:	d02f      	beq.n	8001e00 <HAL_TIM_IRQHandler+0xfc>
        HAL_TIM_IC_CaptureCallback(htim);
 8001da0:	0028      	movs	r0, r5
 8001da2:	f7ff ffac 	bl	8001cfe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da6:	2300      	movs	r3, #0
 8001da8:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001daa:	07e3      	lsls	r3, r4, #31
 8001dac:	d501      	bpl.n	8001db2 <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001dae:	07f3      	lsls	r3, r6, #31
 8001db0:	d42d      	bmi.n	8001e0e <HAL_TIM_IRQHandler+0x10a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001db2:	2382      	movs	r3, #130	@ 0x82
 8001db4:	019b      	lsls	r3, r3, #6
 8001db6:	421c      	tst	r4, r3
 8001db8:	d001      	beq.n	8001dbe <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dba:	0633      	lsls	r3, r6, #24
 8001dbc:	d42f      	bmi.n	8001e1e <HAL_TIM_IRQHandler+0x11a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001dbe:	05e3      	lsls	r3, r4, #23
 8001dc0:	d501      	bpl.n	8001dc6 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dc2:	0633      	lsls	r3, r6, #24
 8001dc4:	d432      	bmi.n	8001e2c <HAL_TIM_IRQHandler+0x128>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001dc6:	0663      	lsls	r3, r4, #25
 8001dc8:	d501      	bpl.n	8001dce <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001dca:	0673      	lsls	r3, r6, #25
 8001dcc:	d435      	bmi.n	8001e3a <HAL_TIM_IRQHandler+0x136>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001dce:	06a4      	lsls	r4, r4, #26
 8001dd0:	d501      	bpl.n	8001dd6 <HAL_TIM_IRQHandler+0xd2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001dd2:	06b6      	lsls	r6, r6, #26
 8001dd4:	d439      	bmi.n	8001e4a <HAL_TIM_IRQHandler+0x146>
}
 8001dd6:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd8:	f7ff ff90 	bl	8001cfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ddc:	0028      	movs	r0, r5
 8001dde:	f7ff ff8f 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
 8001de2:	e7a3      	b.n	8001d2c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de4:	0028      	movs	r0, r5
 8001de6:	f7ff ff89 	bl	8001cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dea:	0028      	movs	r0, r5
 8001dec:	f7ff ff88 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
 8001df0:	e7b1      	b.n	8001d56 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df2:	0028      	movs	r0, r5
 8001df4:	f7ff ff82 	bl	8001cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df8:	0028      	movs	r0, r5
 8001dfa:	f7ff ff81 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
 8001dfe:	e7bd      	b.n	8001d7c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e00:	0028      	movs	r0, r5
 8001e02:	f7ff ff7b 	bl	8001cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e06:	0028      	movs	r0, r5
 8001e08:	f7ff ff7a 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e0c:	e7cb      	b.n	8001da6 <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e0e:	682b      	ldr	r3, [r5, #0]
 8001e10:	2202      	movs	r2, #2
 8001e12:	4252      	negs	r2, r2
 8001e14:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e16:	0028      	movs	r0, r5
 8001e18:	f7fe fc46 	bl	80006a8 <HAL_TIM_PeriodElapsedCallback>
 8001e1c:	e7c9      	b.n	8001db2 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001e1e:	682b      	ldr	r3, [r5, #0]
 8001e20:	4a0e      	ldr	r2, [pc, #56]	@ (8001e5c <HAL_TIM_IRQHandler+0x158>)
 8001e22:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001e24:	0028      	movs	r0, r5
 8001e26:	f000 fadc 	bl	80023e2 <HAL_TIMEx_BreakCallback>
 8001e2a:	e7c8      	b.n	8001dbe <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e2c:	682b      	ldr	r3, [r5, #0]
 8001e2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e60 <HAL_TIM_IRQHandler+0x15c>)
 8001e30:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001e32:	0028      	movs	r0, r5
 8001e34:	f000 fad6 	bl	80023e4 <HAL_TIMEx_Break2Callback>
 8001e38:	e7c5      	b.n	8001dc6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e3a:	682b      	ldr	r3, [r5, #0]
 8001e3c:	2241      	movs	r2, #65	@ 0x41
 8001e3e:	4252      	negs	r2, r2
 8001e40:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001e42:	0028      	movs	r0, r5
 8001e44:	f7ff ff5d 	bl	8001d02 <HAL_TIM_TriggerCallback>
 8001e48:	e7c1      	b.n	8001dce <HAL_TIM_IRQHandler+0xca>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e4a:	682b      	ldr	r3, [r5, #0]
 8001e4c:	2221      	movs	r2, #33	@ 0x21
 8001e4e:	4252      	negs	r2, r2
 8001e50:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001e52:	0028      	movs	r0, r5
 8001e54:	f000 fac4 	bl	80023e0 <HAL_TIMEx_CommutCallback>
}
 8001e58:	e7bd      	b.n	8001dd6 <HAL_TIM_IRQHandler+0xd2>
 8001e5a:	46c0      	nop			@ (mov r8, r8)
 8001e5c:	ffffdf7f 	.word	0xffffdf7f
 8001e60:	fffffeff 	.word	0xfffffeff

08001e64 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001e64:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e66:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed8 <TIM_Base_SetConfig+0x74>)
 8001e68:	4290      	cmp	r0, r2
 8001e6a:	d002      	beq.n	8001e72 <TIM_Base_SetConfig+0xe>
 8001e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001edc <TIM_Base_SetConfig+0x78>)
 8001e6e:	4290      	cmp	r0, r2
 8001e70:	d103      	bne.n	8001e7a <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e72:	2270      	movs	r2, #112	@ 0x70
 8001e74:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8001e76:	684a      	ldr	r2, [r1, #4]
 8001e78:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e7a:	4a17      	ldr	r2, [pc, #92]	@ (8001ed8 <TIM_Base_SetConfig+0x74>)
 8001e7c:	4290      	cmp	r0, r2
 8001e7e:	d00b      	beq.n	8001e98 <TIM_Base_SetConfig+0x34>
 8001e80:	4a16      	ldr	r2, [pc, #88]	@ (8001edc <TIM_Base_SetConfig+0x78>)
 8001e82:	4290      	cmp	r0, r2
 8001e84:	d008      	beq.n	8001e98 <TIM_Base_SetConfig+0x34>
 8001e86:	4a16      	ldr	r2, [pc, #88]	@ (8001ee0 <TIM_Base_SetConfig+0x7c>)
 8001e88:	4290      	cmp	r0, r2
 8001e8a:	d005      	beq.n	8001e98 <TIM_Base_SetConfig+0x34>
 8001e8c:	4a15      	ldr	r2, [pc, #84]	@ (8001ee4 <TIM_Base_SetConfig+0x80>)
 8001e8e:	4290      	cmp	r0, r2
 8001e90:	d002      	beq.n	8001e98 <TIM_Base_SetConfig+0x34>
 8001e92:	4a15      	ldr	r2, [pc, #84]	@ (8001ee8 <TIM_Base_SetConfig+0x84>)
 8001e94:	4290      	cmp	r0, r2
 8001e96:	d103      	bne.n	8001ea0 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e98:	4a14      	ldr	r2, [pc, #80]	@ (8001eec <TIM_Base_SetConfig+0x88>)
 8001e9a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e9c:	68ca      	ldr	r2, [r1, #12]
 8001e9e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ea0:	2280      	movs	r2, #128	@ 0x80
 8001ea2:	4393      	bics	r3, r2
 8001ea4:	694a      	ldr	r2, [r1, #20]
 8001ea6:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea8:	688a      	ldr	r2, [r1, #8]
 8001eaa:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001eac:	680a      	ldr	r2, [r1, #0]
 8001eae:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb0:	4a09      	ldr	r2, [pc, #36]	@ (8001ed8 <TIM_Base_SetConfig+0x74>)
 8001eb2:	4290      	cmp	r0, r2
 8001eb4:	d005      	beq.n	8001ec2 <TIM_Base_SetConfig+0x5e>
 8001eb6:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee4 <TIM_Base_SetConfig+0x80>)
 8001eb8:	4290      	cmp	r0, r2
 8001eba:	d002      	beq.n	8001ec2 <TIM_Base_SetConfig+0x5e>
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee8 <TIM_Base_SetConfig+0x84>)
 8001ebe:	4290      	cmp	r0, r2
 8001ec0:	d101      	bne.n	8001ec6 <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 8001ec2:	690a      	ldr	r2, [r1, #16]
 8001ec4:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001ec6:	6802      	ldr	r2, [r0, #0]
 8001ec8:	2104      	movs	r1, #4
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8001ece:	2201      	movs	r2, #1
 8001ed0:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8001ed2:	6003      	str	r3, [r0, #0]
}
 8001ed4:	4770      	bx	lr
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	40012c00 	.word	0x40012c00
 8001edc:	40000400 	.word	0x40000400
 8001ee0:	40002000 	.word	0x40002000
 8001ee4:	40014400 	.word	0x40014400
 8001ee8:	40014800 	.word	0x40014800
 8001eec:	fffffcff 	.word	0xfffffcff

08001ef0 <HAL_TIM_Base_Init>:
{
 8001ef0:	b570      	push	{r4, r5, r6, lr}
 8001ef2:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8001ef4:	d02a      	beq.n	8001f4c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001ef6:	233d      	movs	r3, #61	@ 0x3d
 8001ef8:	5cc3      	ldrb	r3, [r0, r3]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d020      	beq.n	8001f40 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8001efe:	253d      	movs	r5, #61	@ 0x3d
 8001f00:	2302      	movs	r3, #2
 8001f02:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f04:	0021      	movs	r1, r4
 8001f06:	c901      	ldmia	r1!, {r0}
 8001f08:	f7ff ffac 	bl	8001e64 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	2248      	movs	r2, #72	@ 0x48
 8001f10:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f12:	3a0a      	subs	r2, #10
 8001f14:	54a3      	strb	r3, [r4, r2]
 8001f16:	3201      	adds	r2, #1
 8001f18:	54a3      	strb	r3, [r4, r2]
 8001f1a:	3201      	adds	r2, #1
 8001f1c:	54a3      	strb	r3, [r4, r2]
 8001f1e:	3201      	adds	r2, #1
 8001f20:	54a3      	strb	r3, [r4, r2]
 8001f22:	3201      	adds	r2, #1
 8001f24:	54a3      	strb	r3, [r4, r2]
 8001f26:	3201      	adds	r2, #1
 8001f28:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f2a:	3201      	adds	r2, #1
 8001f2c:	54a3      	strb	r3, [r4, r2]
 8001f2e:	3201      	adds	r2, #1
 8001f30:	54a3      	strb	r3, [r4, r2]
 8001f32:	3201      	adds	r2, #1
 8001f34:	54a3      	strb	r3, [r4, r2]
 8001f36:	3201      	adds	r2, #1
 8001f38:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001f3a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8001f3c:	2000      	movs	r0, #0
}
 8001f3e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001f40:	333c      	adds	r3, #60	@ 0x3c
 8001f42:	2200      	movs	r2, #0
 8001f44:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001f46:	f7fe fdd9 	bl	8000afc <HAL_TIM_Base_MspInit>
 8001f4a:	e7d8      	b.n	8001efe <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	e7f6      	b.n	8001f3e <HAL_TIM_Base_Init+0x4e>

08001f50 <HAL_TIM_PWM_Init>:
{
 8001f50:	b570      	push	{r4, r5, r6, lr}
 8001f52:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8001f54:	d02a      	beq.n	8001fac <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001f56:	233d      	movs	r3, #61	@ 0x3d
 8001f58:	5cc3      	ldrb	r3, [r0, r3]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d020      	beq.n	8001fa0 <HAL_TIM_PWM_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5e:	253d      	movs	r5, #61	@ 0x3d
 8001f60:	2302      	movs	r3, #2
 8001f62:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f64:	0021      	movs	r1, r4
 8001f66:	c901      	ldmia	r1!, {r0}
 8001f68:	f7ff ff7c 	bl	8001e64 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	2248      	movs	r2, #72	@ 0x48
 8001f70:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f72:	3a0a      	subs	r2, #10
 8001f74:	54a3      	strb	r3, [r4, r2]
 8001f76:	3201      	adds	r2, #1
 8001f78:	54a3      	strb	r3, [r4, r2]
 8001f7a:	3201      	adds	r2, #1
 8001f7c:	54a3      	strb	r3, [r4, r2]
 8001f7e:	3201      	adds	r2, #1
 8001f80:	54a3      	strb	r3, [r4, r2]
 8001f82:	3201      	adds	r2, #1
 8001f84:	54a3      	strb	r3, [r4, r2]
 8001f86:	3201      	adds	r2, #1
 8001f88:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f8a:	3201      	adds	r2, #1
 8001f8c:	54a3      	strb	r3, [r4, r2]
 8001f8e:	3201      	adds	r2, #1
 8001f90:	54a3      	strb	r3, [r4, r2]
 8001f92:	3201      	adds	r2, #1
 8001f94:	54a3      	strb	r3, [r4, r2]
 8001f96:	3201      	adds	r2, #1
 8001f98:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001f9a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8001f9c:	2000      	movs	r0, #0
}
 8001f9e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001fa0:	333c      	adds	r3, #60	@ 0x3c
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8001fa6:	f7fe fd93 	bl	8000ad0 <HAL_TIM_PWM_MspInit>
 8001faa:	e7d8      	b.n	8001f5e <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8001fac:	2001      	movs	r0, #1
 8001fae:	e7f6      	b.n	8001f9e <HAL_TIM_PWM_Init+0x4e>

08001fb0 <TIM_OC2_SetConfig>:
{
 8001fb0:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8001fb2:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fb4:	6a03      	ldr	r3, [r0, #32]
 8001fb6:	2410      	movs	r4, #16
 8001fb8:	43a3      	bics	r3, r4
 8001fba:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001fbc:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001fbe:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001fc0:	4c14      	ldr	r4, [pc, #80]	@ (8002014 <TIM_OC2_SetConfig+0x64>)
 8001fc2:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fc4:	680c      	ldr	r4, [r1, #0]
 8001fc6:	0224      	lsls	r4, r4, #8
 8001fc8:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 8001fca:	2320      	movs	r3, #32
 8001fcc:	439a      	bics	r2, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fce:	688b      	ldr	r3, [r1, #8]
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	4313      	orrs	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001fd4:	4a10      	ldr	r2, [pc, #64]	@ (8002018 <TIM_OC2_SetConfig+0x68>)
 8001fd6:	4290      	cmp	r0, r2
 8001fd8:	d006      	beq.n	8001fe8 <TIM_OC2_SetConfig+0x38>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fda:	4a10      	ldr	r2, [pc, #64]	@ (800201c <TIM_OC2_SetConfig+0x6c>)
 8001fdc:	4290      	cmp	r0, r2
 8001fde:	d00b      	beq.n	8001ff8 <TIM_OC2_SetConfig+0x48>
 8001fe0:	4a0f      	ldr	r2, [pc, #60]	@ (8002020 <TIM_OC2_SetConfig+0x70>)
 8001fe2:	4290      	cmp	r0, r2
 8001fe4:	d110      	bne.n	8002008 <TIM_OC2_SetConfig+0x58>
 8001fe6:	e007      	b.n	8001ff8 <TIM_OC2_SetConfig+0x48>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fe8:	2280      	movs	r2, #128	@ 0x80
 8001fea:	4393      	bics	r3, r2
 8001fec:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fee:	68cb      	ldr	r3, [r1, #12]
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ff4:	3a40      	subs	r2, #64	@ 0x40
 8001ff6:	4393      	bics	r3, r2
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8002024 <TIM_OC2_SetConfig+0x74>)
 8001ffa:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ffc:	694a      	ldr	r2, [r1, #20]
 8001ffe:	0092      	lsls	r2, r2, #2
 8002000:	432a      	orrs	r2, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002002:	698d      	ldr	r5, [r1, #24]
 8002004:	00ad      	lsls	r5, r5, #2
 8002006:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 8002008:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800200a:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800200c:	684a      	ldr	r2, [r1, #4]
 800200e:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002010:	6203      	str	r3, [r0, #32]
}
 8002012:	bd70      	pop	{r4, r5, r6, pc}
 8002014:	feff8cff 	.word	0xfeff8cff
 8002018:	40012c00 	.word	0x40012c00
 800201c:	40014400 	.word	0x40014400
 8002020:	40014800 	.word	0x40014800
 8002024:	fffff3ff 	.word	0xfffff3ff

08002028 <HAL_TIM_PWM_ConfigChannel>:
{
 8002028:	b570      	push	{r4, r5, r6, lr}
 800202a:	0004      	movs	r4, r0
 800202c:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 800202e:	233c      	movs	r3, #60	@ 0x3c
 8002030:	5cc3      	ldrb	r3, [r0, r3]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d100      	bne.n	8002038 <HAL_TIM_PWM_ConfigChannel+0x10>
 8002036:	e092      	b.n	800215e <HAL_TIM_PWM_ConfigChannel+0x136>
 8002038:	233c      	movs	r3, #60	@ 0x3c
 800203a:	2101      	movs	r1, #1
 800203c:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 800203e:	2a14      	cmp	r2, #20
 8002040:	d900      	bls.n	8002044 <HAL_TIM_PWM_ConfigChannel+0x1c>
 8002042:	e087      	b.n	8002154 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8002044:	0092      	lsls	r2, r2, #2
 8002046:	4b47      	ldr	r3, [pc, #284]	@ (8002164 <HAL_TIM_PWM_ConfigChannel+0x13c>)
 8002048:	589b      	ldr	r3, [r3, r2]
 800204a:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800204c:	6800      	ldr	r0, [r0, #0]
 800204e:	0029      	movs	r1, r5
 8002050:	f7ff fd04 	bl	8001a5c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002054:	6822      	ldr	r2, [r4, #0]
 8002056:	6993      	ldr	r3, [r2, #24]
 8002058:	2108      	movs	r1, #8
 800205a:	430b      	orrs	r3, r1
 800205c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800205e:	6822      	ldr	r2, [r4, #0]
 8002060:	6993      	ldr	r3, [r2, #24]
 8002062:	3904      	subs	r1, #4
 8002064:	438b      	bics	r3, r1
 8002066:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002068:	6822      	ldr	r2, [r4, #0]
 800206a:	6993      	ldr	r3, [r2, #24]
 800206c:	6929      	ldr	r1, [r5, #16]
 800206e:	430b      	orrs	r3, r1
 8002070:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002072:	2000      	movs	r0, #0
      break;
 8002074:	e06f      	b.n	8002156 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002076:	6800      	ldr	r0, [r0, #0]
 8002078:	0029      	movs	r1, r5
 800207a:	f7ff ff99 	bl	8001fb0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800207e:	6822      	ldr	r2, [r4, #0]
 8002080:	6991      	ldr	r1, [r2, #24]
 8002082:	2380      	movs	r3, #128	@ 0x80
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	430b      	orrs	r3, r1
 8002088:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800208a:	6822      	ldr	r2, [r4, #0]
 800208c:	6993      	ldr	r3, [r2, #24]
 800208e:	4936      	ldr	r1, [pc, #216]	@ (8002168 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8002090:	400b      	ands	r3, r1
 8002092:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002094:	6821      	ldr	r1, [r4, #0]
 8002096:	698b      	ldr	r3, [r1, #24]
 8002098:	692a      	ldr	r2, [r5, #16]
 800209a:	0212      	lsls	r2, r2, #8
 800209c:	4313      	orrs	r3, r2
 800209e:	618b      	str	r3, [r1, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80020a0:	2000      	movs	r0, #0
      break;
 80020a2:	e058      	b.n	8002156 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020a4:	6800      	ldr	r0, [r0, #0]
 80020a6:	0029      	movs	r1, r5
 80020a8:	f7ff fd18 	bl	8001adc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020ac:	6822      	ldr	r2, [r4, #0]
 80020ae:	69d3      	ldr	r3, [r2, #28]
 80020b0:	2108      	movs	r1, #8
 80020b2:	430b      	orrs	r3, r1
 80020b4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020b6:	6822      	ldr	r2, [r4, #0]
 80020b8:	69d3      	ldr	r3, [r2, #28]
 80020ba:	3904      	subs	r1, #4
 80020bc:	438b      	bics	r3, r1
 80020be:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020c0:	6822      	ldr	r2, [r4, #0]
 80020c2:	69d3      	ldr	r3, [r2, #28]
 80020c4:	6929      	ldr	r1, [r5, #16]
 80020c6:	430b      	orrs	r3, r1
 80020c8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80020ca:	2000      	movs	r0, #0
      break;
 80020cc:	e043      	b.n	8002156 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020ce:	6800      	ldr	r0, [r0, #0]
 80020d0:	0029      	movs	r1, r5
 80020d2:	f7ff fd45 	bl	8001b60 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020d6:	6822      	ldr	r2, [r4, #0]
 80020d8:	69d1      	ldr	r1, [r2, #28]
 80020da:	2380      	movs	r3, #128	@ 0x80
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	430b      	orrs	r3, r1
 80020e0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020e2:	6822      	ldr	r2, [r4, #0]
 80020e4:	69d3      	ldr	r3, [r2, #28]
 80020e6:	4920      	ldr	r1, [pc, #128]	@ (8002168 <HAL_TIM_PWM_ConfigChannel+0x140>)
 80020e8:	400b      	ands	r3, r1
 80020ea:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020ec:	6821      	ldr	r1, [r4, #0]
 80020ee:	69cb      	ldr	r3, [r1, #28]
 80020f0:	692a      	ldr	r2, [r5, #16]
 80020f2:	0212      	lsls	r2, r2, #8
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61cb      	str	r3, [r1, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80020f8:	2000      	movs	r0, #0
      break;
 80020fa:	e02c      	b.n	8002156 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80020fc:	6800      	ldr	r0, [r0, #0]
 80020fe:	0029      	movs	r1, r5
 8002100:	f7ff fd62 	bl	8001bc8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002104:	6822      	ldr	r2, [r4, #0]
 8002106:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002108:	2108      	movs	r1, #8
 800210a:	430b      	orrs	r3, r1
 800210c:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800210e:	6822      	ldr	r2, [r4, #0]
 8002110:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002112:	3904      	subs	r1, #4
 8002114:	438b      	bics	r3, r1
 8002116:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002118:	6822      	ldr	r2, [r4, #0]
 800211a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800211c:	6929      	ldr	r1, [r5, #16]
 800211e:	430b      	orrs	r3, r1
 8002120:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8002122:	2000      	movs	r0, #0
      break;
 8002124:	e017      	b.n	8002156 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002126:	6800      	ldr	r0, [r0, #0]
 8002128:	0029      	movs	r1, r5
 800212a:	f7ff fd7f 	bl	8001c2c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800212e:	6822      	ldr	r2, [r4, #0]
 8002130:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 8002132:	2380      	movs	r3, #128	@ 0x80
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	430b      	orrs	r3, r1
 8002138:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800213a:	6822      	ldr	r2, [r4, #0]
 800213c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800213e:	490a      	ldr	r1, [pc, #40]	@ (8002168 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8002140:	400b      	ands	r3, r1
 8002142:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002144:	6821      	ldr	r1, [r4, #0]
 8002146:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8002148:	692a      	ldr	r2, [r5, #16]
 800214a:	0212      	lsls	r2, r2, #8
 800214c:	4313      	orrs	r3, r2
 800214e:	654b      	str	r3, [r1, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8002150:	2000      	movs	r0, #0
      break;
 8002152:	e000      	b.n	8002156 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8002154:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002156:	233c      	movs	r3, #60	@ 0x3c
 8002158:	2200      	movs	r2, #0
 800215a:	54e2      	strb	r2, [r4, r3]
}
 800215c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800215e:	2002      	movs	r0, #2
 8002160:	e7fc      	b.n	800215c <HAL_TIM_PWM_ConfigChannel+0x134>
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	0800318c 	.word	0x0800318c
 8002168:	fffffbff 	.word	0xfffffbff

0800216c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800216c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800216e:	231f      	movs	r3, #31
 8002170:	4019      	ands	r1, r3
 8002172:	2401      	movs	r4, #1
 8002174:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002176:	6a03      	ldr	r3, [r0, #32]
 8002178:	43a3      	bics	r3, r4
 800217a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800217c:	6a03      	ldr	r3, [r0, #32]
 800217e:	408a      	lsls	r2, r1
 8002180:	4313      	orrs	r3, r2
 8002182:	6203      	str	r3, [r0, #32]
}
 8002184:	bd10      	pop	{r4, pc}
	...

08002188 <HAL_TIM_PWM_Start>:
{
 8002188:	b510      	push	{r4, lr}
 800218a:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800218c:	2910      	cmp	r1, #16
 800218e:	d82d      	bhi.n	80021ec <HAL_TIM_PWM_Start+0x64>
 8002190:	008b      	lsls	r3, r1, #2
 8002192:	4a3f      	ldr	r2, [pc, #252]	@ (8002290 <HAL_TIM_PWM_Start+0x108>)
 8002194:	58d3      	ldr	r3, [r2, r3]
 8002196:	469f      	mov	pc, r3
 8002198:	233e      	movs	r3, #62	@ 0x3e
 800219a:	5cc3      	ldrb	r3, [r0, r3]
 800219c:	3b01      	subs	r3, #1
 800219e:	1e5a      	subs	r2, r3, #1
 80021a0:	4193      	sbcs	r3, r2
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d16d      	bne.n	8002284 <HAL_TIM_PWM_Start+0xfc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021a8:	2910      	cmp	r1, #16
 80021aa:	d859      	bhi.n	8002260 <HAL_TIM_PWM_Start+0xd8>
 80021ac:	008b      	lsls	r3, r1, #2
 80021ae:	4a39      	ldr	r2, [pc, #228]	@ (8002294 <HAL_TIM_PWM_Start+0x10c>)
 80021b0:	58d3      	ldr	r3, [r2, r3]
 80021b2:	469f      	mov	pc, r3
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021b4:	233f      	movs	r3, #63	@ 0x3f
 80021b6:	5cc3      	ldrb	r3, [r0, r3]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	1e5a      	subs	r2, r3, #1
 80021bc:	4193      	sbcs	r3, r2
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	e7f0      	b.n	80021a4 <HAL_TIM_PWM_Start+0x1c>
 80021c2:	2340      	movs	r3, #64	@ 0x40
 80021c4:	5cc3      	ldrb	r3, [r0, r3]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	1e5a      	subs	r2, r3, #1
 80021ca:	4193      	sbcs	r3, r2
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	e7e9      	b.n	80021a4 <HAL_TIM_PWM_Start+0x1c>
 80021d0:	2341      	movs	r3, #65	@ 0x41
 80021d2:	5cc3      	ldrb	r3, [r0, r3]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	1e5a      	subs	r2, r3, #1
 80021d8:	4193      	sbcs	r3, r2
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	e7e2      	b.n	80021a4 <HAL_TIM_PWM_Start+0x1c>
 80021de:	2342      	movs	r3, #66	@ 0x42
 80021e0:	5cc3      	ldrb	r3, [r0, r3]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	1e5a      	subs	r2, r3, #1
 80021e6:	4193      	sbcs	r3, r2
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	e7db      	b.n	80021a4 <HAL_TIM_PWM_Start+0x1c>
 80021ec:	2343      	movs	r3, #67	@ 0x43
 80021ee:	5ce3      	ldrb	r3, [r4, r3]
 80021f0:	3b01      	subs	r3, #1
 80021f2:	1e5a      	subs	r2, r3, #1
 80021f4:	4193      	sbcs	r3, r2
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	e7d4      	b.n	80021a4 <HAL_TIM_PWM_Start+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021fa:	233e      	movs	r3, #62	@ 0x3e
 80021fc:	2202      	movs	r2, #2
 80021fe:	54e2      	strb	r2, [r4, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002200:	6820      	ldr	r0, [r4, #0]
 8002202:	2201      	movs	r2, #1
 8002204:	f7ff ffb2 	bl	800216c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	4a23      	ldr	r2, [pc, #140]	@ (8002298 <HAL_TIM_PWM_Start+0x110>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d005      	beq.n	800221c <HAL_TIM_PWM_Start+0x94>
 8002210:	4a22      	ldr	r2, [pc, #136]	@ (800229c <HAL_TIM_PWM_Start+0x114>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d002      	beq.n	800221c <HAL_TIM_PWM_Start+0x94>
 8002216:	4a22      	ldr	r2, [pc, #136]	@ (80022a0 <HAL_TIM_PWM_Start+0x118>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d104      	bne.n	8002226 <HAL_TIM_PWM_Start+0x9e>
    __HAL_TIM_MOE_ENABLE(htim);
 800221c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800221e:	2280      	movs	r2, #128	@ 0x80
 8002220:	0212      	lsls	r2, r2, #8
 8002222:	430a      	orrs	r2, r1
 8002224:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	4a1b      	ldr	r2, [pc, #108]	@ (8002298 <HAL_TIM_PWM_Start+0x110>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01c      	beq.n	8002268 <HAL_TIM_PWM_Start+0xe0>
 800222e:	4a1d      	ldr	r2, [pc, #116]	@ (80022a4 <HAL_TIM_PWM_Start+0x11c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d019      	beq.n	8002268 <HAL_TIM_PWM_Start+0xe0>
    __HAL_TIM_ENABLE(htim);
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	2101      	movs	r1, #1
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800223c:	2000      	movs	r0, #0
 800223e:	e022      	b.n	8002286 <HAL_TIM_PWM_Start+0xfe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002240:	233f      	movs	r3, #63	@ 0x3f
 8002242:	2202      	movs	r2, #2
 8002244:	54e2      	strb	r2, [r4, r3]
 8002246:	e7db      	b.n	8002200 <HAL_TIM_PWM_Start+0x78>
 8002248:	2340      	movs	r3, #64	@ 0x40
 800224a:	2202      	movs	r2, #2
 800224c:	54e2      	strb	r2, [r4, r3]
 800224e:	e7d7      	b.n	8002200 <HAL_TIM_PWM_Start+0x78>
 8002250:	2341      	movs	r3, #65	@ 0x41
 8002252:	2202      	movs	r2, #2
 8002254:	54e2      	strb	r2, [r4, r3]
 8002256:	e7d3      	b.n	8002200 <HAL_TIM_PWM_Start+0x78>
 8002258:	2342      	movs	r3, #66	@ 0x42
 800225a:	2202      	movs	r2, #2
 800225c:	54e2      	strb	r2, [r4, r3]
 800225e:	e7cf      	b.n	8002200 <HAL_TIM_PWM_Start+0x78>
 8002260:	2343      	movs	r3, #67	@ 0x43
 8002262:	2202      	movs	r2, #2
 8002264:	54e2      	strb	r2, [r4, r3]
 8002266:	e7cb      	b.n	8002200 <HAL_TIM_PWM_Start+0x78>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	490f      	ldr	r1, [pc, #60]	@ (80022a8 <HAL_TIM_PWM_Start+0x120>)
 800226c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800226e:	2a06      	cmp	r2, #6
 8002270:	d00a      	beq.n	8002288 <HAL_TIM_PWM_Start+0x100>
 8002272:	3907      	subs	r1, #7
 8002274:	428a      	cmp	r2, r1
 8002276:	d009      	beq.n	800228c <HAL_TIM_PWM_Start+0x104>
      __HAL_TIM_ENABLE(htim);
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2101      	movs	r1, #1
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002280:	2000      	movs	r0, #0
 8002282:	e000      	b.n	8002286 <HAL_TIM_PWM_Start+0xfe>
    return HAL_ERROR;
 8002284:	2001      	movs	r0, #1
}
 8002286:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8002288:	2000      	movs	r0, #0
 800228a:	e7fc      	b.n	8002286 <HAL_TIM_PWM_Start+0xfe>
 800228c:	2000      	movs	r0, #0
 800228e:	e7fa      	b.n	8002286 <HAL_TIM_PWM_Start+0xfe>
 8002290:	080031e0 	.word	0x080031e0
 8002294:	08003224 	.word	0x08003224
 8002298:	40012c00 	.word	0x40012c00
 800229c:	40014400 	.word	0x40014400
 80022a0:	40014800 	.word	0x40014800
 80022a4:	40000400 	.word	0x40000400
 80022a8:	00010007 	.word	0x00010007

080022ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022ac:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022ae:	233c      	movs	r3, #60	@ 0x3c
 80022b0:	5cc3      	ldrb	r3, [r0, r3]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d029      	beq.n	800230a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80022b6:	233c      	movs	r3, #60	@ 0x3c
 80022b8:	2201      	movs	r2, #1
 80022ba:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	3301      	adds	r3, #1
 80022be:	3201      	adds	r2, #1
 80022c0:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022c2:	6802      	ldr	r2, [r0, #0]
 80022c4:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022c6:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80022c8:	4c11      	ldr	r4, [pc, #68]	@ (8002310 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80022ca:	42a2      	cmp	r2, r4
 80022cc:	d018      	beq.n	8002300 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022ce:	2470      	movs	r4, #112	@ 0x70
 80022d0:	43a3      	bics	r3, r4
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022d2:	680c      	ldr	r4, [r1, #0]
 80022d4:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022d6:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d8:	6803      	ldr	r3, [r0, #0]
 80022da:	4a0d      	ldr	r2, [pc, #52]	@ (8002310 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d002      	beq.n	80022e6 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 80022e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002314 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d104      	bne.n	80022f0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022e6:	2280      	movs	r2, #128	@ 0x80
 80022e8:	4395      	bics	r5, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022ea:	688a      	ldr	r2, [r1, #8]
 80022ec:	432a      	orrs	r2, r5

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022f0:	233d      	movs	r3, #61	@ 0x3d
 80022f2:	2201      	movs	r2, #1
 80022f4:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80022f6:	3b01      	subs	r3, #1
 80022f8:	2200      	movs	r2, #0
 80022fa:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80022fc:	2000      	movs	r0, #0
}
 80022fe:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002300:	4c05      	ldr	r4, [pc, #20]	@ (8002318 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8002302:	4023      	ands	r3, r4
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002304:	684c      	ldr	r4, [r1, #4]
 8002306:	4323      	orrs	r3, r4
 8002308:	e7e1      	b.n	80022ce <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 800230a:	2002      	movs	r0, #2
 800230c:	e7f7      	b.n	80022fe <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800230e:	46c0      	nop			@ (mov r8, r8)
 8002310:	40012c00 	.word	0x40012c00
 8002314:	40000400 	.word	0x40000400
 8002318:	ff0fffff 	.word	0xff0fffff

0800231c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800231c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800231e:	233c      	movs	r3, #60	@ 0x3c
 8002320:	5cc3      	ldrb	r3, [r0, r3]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d040      	beq.n	80023a8 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 8002326:	233c      	movs	r3, #60	@ 0x3c
 8002328:	2201      	movs	r2, #1
 800232a:	54c2      	strb	r2, [r0, r3]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800232c:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800232e:	4a1f      	ldr	r2, [pc, #124]	@ (80023ac <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8002330:	4013      	ands	r3, r2
 8002332:	688a      	ldr	r2, [r1, #8]
 8002334:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002336:	4a1e      	ldr	r2, [pc, #120]	@ (80023b0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8002338:	4013      	ands	r3, r2
 800233a:	684a      	ldr	r2, [r1, #4]
 800233c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800233e:	4a1d      	ldr	r2, [pc, #116]	@ (80023b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8002340:	4013      	ands	r3, r2
 8002342:	680a      	ldr	r2, [r1, #0]
 8002344:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002346:	4a1c      	ldr	r2, [pc, #112]	@ (80023b8 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8002348:	4013      	ands	r3, r2
 800234a:	690a      	ldr	r2, [r1, #16]
 800234c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800234e:	4a1b      	ldr	r2, [pc, #108]	@ (80023bc <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8002350:	4013      	ands	r3, r2
 8002352:	694a      	ldr	r2, [r1, #20]
 8002354:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002356:	4a1a      	ldr	r2, [pc, #104]	@ (80023c0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002358:	4013      	ands	r3, r2
 800235a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800235c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800235e:	4a19      	ldr	r2, [pc, #100]	@ (80023c4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002360:	4013      	ands	r3, r2
 8002362:	698a      	ldr	r2, [r1, #24]
 8002364:	0412      	lsls	r2, r2, #16
 8002366:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002368:	4a17      	ldr	r2, [pc, #92]	@ (80023c8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800236a:	4013      	ands	r3, r2
 800236c:	69ca      	ldr	r2, [r1, #28]
 800236e:	4313      	orrs	r3, r2

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002370:	6802      	ldr	r2, [r0, #0]
 8002372:	4c16      	ldr	r4, [pc, #88]	@ (80023cc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002374:	42a2      	cmp	r2, r4
 8002376:	d005      	beq.n	8002384 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002378:	6453      	str	r3, [r2, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800237a:	233c      	movs	r3, #60	@ 0x3c
 800237c:	2200      	movs	r2, #0
 800237e:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8002380:	2000      	movs	r0, #0
}
 8002382:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002384:	4c12      	ldr	r4, [pc, #72]	@ (80023d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002386:	4023      	ands	r3, r4
 8002388:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800238a:	0524      	lsls	r4, r4, #20
 800238c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800238e:	4c11      	ldr	r4, [pc, #68]	@ (80023d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002390:	4023      	ands	r3, r4
 8002392:	6a0c      	ldr	r4, [r1, #32]
 8002394:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002396:	4c10      	ldr	r4, [pc, #64]	@ (80023d8 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 8002398:	4023      	ands	r3, r4
 800239a:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800239c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800239e:	4c0f      	ldr	r4, [pc, #60]	@ (80023dc <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 80023a0:	4023      	ands	r3, r4
 80023a2:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 80023a4:	430b      	orrs	r3, r1
 80023a6:	e7e7      	b.n	8002378 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
  __HAL_LOCK(htim);
 80023a8:	2002      	movs	r0, #2
 80023aa:	e7ea      	b.n	8002382 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 80023ac:	fffffcff 	.word	0xfffffcff
 80023b0:	fffffbff 	.word	0xfffffbff
 80023b4:	fffff7ff 	.word	0xfffff7ff
 80023b8:	ffffefff 	.word	0xffffefff
 80023bc:	ffffdfff 	.word	0xffffdfff
 80023c0:	ffffbfff 	.word	0xffffbfff
 80023c4:	fff0ffff 	.word	0xfff0ffff
 80023c8:	efffffff 	.word	0xefffffff
 80023cc:	40012c00 	.word	0x40012c00
 80023d0:	ff0fffff 	.word	0xff0fffff
 80023d4:	feffffff 	.word	0xfeffffff
 80023d8:	fdffffff 	.word	0xfdffffff
 80023dc:	dfffffff 	.word	0xdfffffff

080023e0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023e0:	4770      	bx	lr

080023e2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023e2:	4770      	bx	lr

080023e4 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80023e4:	4770      	bx	lr
	...

080023e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80023e8:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80023ea:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ee:	2201      	movs	r2, #1
 80023f0:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80023f4:	6801      	ldr	r1, [r0, #0]
 80023f6:	680b      	ldr	r3, [r1, #0]
 80023f8:	25c0      	movs	r5, #192	@ 0xc0
 80023fa:	43ab      	bics	r3, r5
 80023fc:	600b      	str	r3, [r1, #0]
 80023fe:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002402:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002406:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800240a:	6802      	ldr	r2, [r0, #0]
 800240c:	6893      	ldr	r3, [r2, #8]
 800240e:	4c04      	ldr	r4, [pc, #16]	@ (8002420 <UART_EndTxTransfer+0x38>)
 8002410:	4023      	ands	r3, r4
 8002412:	6093      	str	r3, [r2, #8]
 8002414:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002418:	2388      	movs	r3, #136	@ 0x88
 800241a:	2220      	movs	r2, #32
 800241c:	50c2      	str	r2, [r0, r3]
}
 800241e:	bd30      	pop	{r4, r5, pc}
 8002420:	ff7fffff 	.word	0xff7fffff

08002424 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002424:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002426:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800242a:	2201      	movs	r2, #1
 800242c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002430:	6801      	ldr	r1, [r0, #0]
 8002432:	680b      	ldr	r3, [r1, #0]
 8002434:	4d12      	ldr	r5, [pc, #72]	@ (8002480 <UART_EndRxTransfer+0x5c>)
 8002436:	402b      	ands	r3, r5
 8002438:	600b      	str	r3, [r1, #0]
 800243a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800243e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002442:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002446:	6802      	ldr	r2, [r0, #0]
 8002448:	6893      	ldr	r3, [r2, #8]
 800244a:	4c0e      	ldr	r4, [pc, #56]	@ (8002484 <UART_EndRxTransfer+0x60>)
 800244c:	4023      	ands	r3, r4
 800244e:	6093      	str	r3, [r2, #8]
 8002450:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002454:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8002456:	2b01      	cmp	r3, #1
 8002458:	d006      	beq.n	8002468 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800245a:	238c      	movs	r3, #140	@ 0x8c
 800245c:	2220      	movs	r2, #32
 800245e:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002460:	2300      	movs	r3, #0
 8002462:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002464:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8002466:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002468:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800246c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002470:	6802      	ldr	r2, [r0, #0]
 8002472:	6813      	ldr	r3, [r2, #0]
 8002474:	2410      	movs	r4, #16
 8002476:	43a3      	bics	r3, r4
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	f381 8810 	msr	PRIMASK, r1
}
 800247e:	e7ec      	b.n	800245a <UART_EndRxTransfer+0x36>
 8002480:	fffffedf 	.word	0xfffffedf
 8002484:	effffffe 	.word	0xeffffffe

08002488 <HAL_UART_Transmit_DMA>:
{
 8002488:	b510      	push	{r4, lr}
 800248a:	0004      	movs	r4, r0
 800248c:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800248e:	2288      	movs	r2, #136	@ 0x88
 8002490:	5882      	ldr	r2, [r0, r2]
 8002492:	2a20      	cmp	r2, #32
 8002494:	d149      	bne.n	800252a <HAL_UART_Transmit_DMA+0xa2>
    if ((pData == NULL) || (Size == 0U))
 8002496:	2900      	cmp	r1, #0
 8002498:	d049      	beq.n	800252e <HAL_UART_Transmit_DMA+0xa6>
 800249a:	2b00      	cmp	r3, #0
 800249c:	d049      	beq.n	8002532 <HAL_UART_Transmit_DMA+0xaa>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800249e:	6880      	ldr	r0, [r0, #8]
 80024a0:	2280      	movs	r2, #128	@ 0x80
 80024a2:	0152      	lsls	r2, r2, #5
 80024a4:	4290      	cmp	r0, r2
 80024a6:	d028      	beq.n	80024fa <HAL_UART_Transmit_DMA+0x72>
    huart->pTxBuffPtr  = pData;
 80024a8:	6521      	str	r1, [r4, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80024aa:	2254      	movs	r2, #84	@ 0x54
 80024ac:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 80024ae:	3202      	adds	r2, #2
 80024b0:	52a3      	strh	r3, [r4, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b2:	323a      	adds	r2, #58	@ 0x3a
 80024b4:	2100      	movs	r1, #0
 80024b6:	50a1      	str	r1, [r4, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024b8:	3a08      	subs	r2, #8
 80024ba:	3121      	adds	r1, #33	@ 0x21
 80024bc:	50a1      	str	r1, [r4, r2]
    if (huart->hdmatx != NULL)
 80024be:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80024c0:	2a00      	cmp	r2, #0
 80024c2:	d021      	beq.n	8002508 <HAL_UART_Transmit_DMA+0x80>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80024c4:	491c      	ldr	r1, [pc, #112]	@ (8002538 <HAL_UART_Transmit_DMA+0xb0>)
 80024c6:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80024c8:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80024ca:	491c      	ldr	r1, [pc, #112]	@ (800253c <HAL_UART_Transmit_DMA+0xb4>)
 80024cc:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80024ce:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80024d0:	491b      	ldr	r1, [pc, #108]	@ (8002540 <HAL_UART_Transmit_DMA+0xb8>)
 80024d2:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80024d4:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80024d6:	2100      	movs	r1, #0
 80024d8:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80024da:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80024dc:	6822      	ldr	r2, [r4, #0]
 80024de:	3228      	adds	r2, #40	@ 0x28
 80024e0:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80024e2:	f7fe fd85 	bl	8000ff0 <HAL_DMA_Start_IT>
 80024e6:	2800      	cmp	r0, #0
 80024e8:	d00e      	beq.n	8002508 <HAL_UART_Transmit_DMA+0x80>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80024ea:	2390      	movs	r3, #144	@ 0x90
 80024ec:	2210      	movs	r2, #16
 80024ee:	50e2      	str	r2, [r4, r3]
        huart->gState = HAL_UART_STATE_READY;
 80024f0:	3b08      	subs	r3, #8
 80024f2:	3210      	adds	r2, #16
 80024f4:	50e2      	str	r2, [r4, r3]
        return HAL_ERROR;
 80024f6:	2001      	movs	r0, #1
 80024f8:	e018      	b.n	800252c <HAL_UART_Transmit_DMA+0xa4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024fa:	6922      	ldr	r2, [r4, #16]
 80024fc:	2a00      	cmp	r2, #0
 80024fe:	d1d3      	bne.n	80024a8 <HAL_UART_Transmit_DMA+0x20>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002500:	07ca      	lsls	r2, r1, #31
 8002502:	d5d1      	bpl.n	80024a8 <HAL_UART_Transmit_DMA+0x20>
        return  HAL_ERROR;
 8002504:	2001      	movs	r0, #1
 8002506:	e011      	b.n	800252c <HAL_UART_Transmit_DMA+0xa4>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	2240      	movs	r2, #64	@ 0x40
 800250c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800250e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002512:	2301      	movs	r3, #1
 8002514:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002518:	6822      	ldr	r2, [r4, #0]
 800251a:	6893      	ldr	r3, [r2, #8]
 800251c:	2080      	movs	r0, #128	@ 0x80
 800251e:	4303      	orrs	r3, r0
 8002520:	6093      	str	r3, [r2, #8]
 8002522:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8002526:	2000      	movs	r0, #0
 8002528:	e000      	b.n	800252c <HAL_UART_Transmit_DMA+0xa4>
    return HAL_BUSY;
 800252a:	2002      	movs	r0, #2
}
 800252c:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 800252e:	2001      	movs	r0, #1
 8002530:	e7fc      	b.n	800252c <HAL_UART_Transmit_DMA+0xa4>
 8002532:	2001      	movs	r0, #1
 8002534:	e7fa      	b.n	800252c <HAL_UART_Transmit_DMA+0xa4>
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	08002545 	.word	0x08002545
 800253c:	080025bb 	.word	0x080025bb
 8002540:	080025c7 	.word	0x080025c7

08002544 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002544:	b510      	push	{r4, lr}
 8002546:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002548:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	069b      	lsls	r3, r3, #26
 8002550:	d41a      	bmi.n	8002588 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8002552:	2356      	movs	r3, #86	@ 0x56
 8002554:	2200      	movs	r2, #0
 8002556:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002558:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800255c:	3201      	adds	r2, #1
 800255e:	f382 8810 	msr	PRIMASK, r2

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002562:	6801      	ldr	r1, [r0, #0]
 8002564:	688b      	ldr	r3, [r1, #8]
 8002566:	2480      	movs	r4, #128	@ 0x80
 8002568:	43a3      	bics	r3, r4
 800256a:	608b      	str	r3, [r1, #8]
 800256c:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002570:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002574:	f382 8810 	msr	PRIMASK, r2

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002578:	6802      	ldr	r2, [r0, #0]
 800257a:	6813      	ldr	r3, [r2, #0]
 800257c:	2040      	movs	r0, #64	@ 0x40
 800257e:	4303      	orrs	r3, r0
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	f381 8810 	msr	PRIMASK, r1
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002586:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8002588:	f7fe f8a0 	bl	80006cc <HAL_UART_TxCpltCallback>
}
 800258c:	e7fb      	b.n	8002586 <UART_DMATransmitCplt+0x42>

0800258e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800258e:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002590:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002594:	2301      	movs	r3, #1
 8002596:	f383 8810 	msr	PRIMASK, r3
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800259a:	6802      	ldr	r2, [r0, #0]
 800259c:	6813      	ldr	r3, [r2, #0]
 800259e:	2440      	movs	r4, #64	@ 0x40
 80025a0:	43a3      	bics	r3, r4
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025a8:	2388      	movs	r3, #136	@ 0x88
 80025aa:	2220      	movs	r2, #32
 80025ac:	50c2      	str	r2, [r0, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	6783      	str	r3, [r0, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80025b2:	f7fe f88b 	bl	80006cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025b6:	bd10      	pop	{r4, pc}

080025b8 <HAL_UART_TxHalfCpltCallback>:
}
 80025b8:	4770      	bx	lr

080025ba <UART_DMATxHalfCplt>:
{
 80025ba:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80025bc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  HAL_UART_TxHalfCpltCallback(huart);
 80025be:	f7ff fffb 	bl	80025b8 <HAL_UART_TxHalfCpltCallback>
}
 80025c2:	bd10      	pop	{r4, pc}

080025c4 <HAL_UART_ErrorCallback>:
}
 80025c4:	4770      	bx	lr

080025c6 <UART_DMAError>:
{
 80025c6:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80025c8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80025ca:	2388      	movs	r3, #136	@ 0x88
 80025cc:	58e2      	ldr	r2, [r4, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80025ce:	3304      	adds	r3, #4
 80025d0:	58e5      	ldr	r5, [r4, r3]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	061b      	lsls	r3, r3, #24
 80025d8:	d501      	bpl.n	80025de <UART_DMAError+0x18>
 80025da:	2a21      	cmp	r2, #33	@ 0x21
 80025dc:	d00e      	beq.n	80025fc <UART_DMAError+0x36>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80025de:	6823      	ldr	r3, [r4, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	065b      	lsls	r3, r3, #25
 80025e4:	d501      	bpl.n	80025ea <UART_DMAError+0x24>
 80025e6:	2d22      	cmp	r5, #34	@ 0x22
 80025e8:	d00f      	beq.n	800260a <UART_DMAError+0x44>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80025ea:	2290      	movs	r2, #144	@ 0x90
 80025ec:	58a3      	ldr	r3, [r4, r2]
 80025ee:	2110      	movs	r1, #16
 80025f0:	430b      	orrs	r3, r1
 80025f2:	50a3      	str	r3, [r4, r2]
  HAL_UART_ErrorCallback(huart);
 80025f4:	0020      	movs	r0, r4
 80025f6:	f7ff ffe5 	bl	80025c4 <HAL_UART_ErrorCallback>
}
 80025fa:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 80025fc:	2356      	movs	r3, #86	@ 0x56
 80025fe:	2200      	movs	r2, #0
 8002600:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 8002602:	0020      	movs	r0, r4
 8002604:	f7ff fef0 	bl	80023e8 <UART_EndTxTransfer>
 8002608:	e7e9      	b.n	80025de <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 800260a:	235e      	movs	r3, #94	@ 0x5e
 800260c:	2200      	movs	r2, #0
 800260e:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8002610:	0020      	movs	r0, r4
 8002612:	f7ff ff07 	bl	8002424 <UART_EndRxTransfer>
 8002616:	e7e8      	b.n	80025ea <UART_DMAError+0x24>

08002618 <UART_DMAAbortOnError>:
{
 8002618:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800261a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 800261c:	235e      	movs	r3, #94	@ 0x5e
 800261e:	2200      	movs	r2, #0
 8002620:	52c2      	strh	r2, [r0, r3]
  HAL_UART_ErrorCallback(huart);
 8002622:	f7ff ffcf 	bl	80025c4 <HAL_UART_ErrorCallback>
}
 8002626:	bd10      	pop	{r4, pc}

08002628 <HAL_UARTEx_RxEventCallback>:
}
 8002628:	4770      	bx	lr
	...

0800262c <HAL_UART_IRQHandler>:
{
 800262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262e:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002630:	6802      	ldr	r2, [r0, #0]
 8002632:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002634:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002636:	6891      	ldr	r1, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002638:	4dbe      	ldr	r5, [pc, #760]	@ (8002934 <HAL_UART_IRQHandler+0x308>)
  if (errorflags == 0U)
 800263a:	422b      	tst	r3, r5
 800263c:	d10b      	bne.n	8002656 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800263e:	069d      	lsls	r5, r3, #26
 8002640:	d511      	bpl.n	8002666 <HAL_UART_IRQHandler+0x3a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002642:	0685      	lsls	r5, r0, #26
 8002644:	d401      	bmi.n	800264a <HAL_UART_IRQHandler+0x1e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002646:	00cd      	lsls	r5, r1, #3
 8002648:	d50d      	bpl.n	8002666 <HAL_UART_IRQHandler+0x3a>
      if (huart->RxISR != NULL)
 800264a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800264c:	2b00      	cmp	r3, #0
 800264e:	d02a      	beq.n	80026a6 <HAL_UART_IRQHandler+0x7a>
        huart->RxISR(huart);
 8002650:	0020      	movs	r0, r4
 8002652:	4798      	blx	r3
      return;
 8002654:	e027      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002656:	4db8      	ldr	r5, [pc, #736]	@ (8002938 <HAL_UART_IRQHandler+0x30c>)
 8002658:	000e      	movs	r6, r1
 800265a:	402e      	ands	r6, r5
 800265c:	4229      	tst	r1, r5
 800265e:	d123      	bne.n	80026a8 <HAL_UART_IRQHandler+0x7c>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002660:	4db6      	ldr	r5, [pc, #728]	@ (800293c <HAL_UART_IRQHandler+0x310>)
 8002662:	4228      	tst	r0, r5
 8002664:	d120      	bne.n	80026a8 <HAL_UART_IRQHandler+0x7c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002666:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8002668:	2d01      	cmp	r5, #1
 800266a:	d100      	bne.n	800266e <HAL_UART_IRQHandler+0x42>
 800266c:	e0a4      	b.n	80027b8 <HAL_UART_IRQHandler+0x18c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800266e:	02dd      	lsls	r5, r3, #11
 8002670:	d502      	bpl.n	8002678 <HAL_UART_IRQHandler+0x4c>
 8002672:	024d      	lsls	r5, r1, #9
 8002674:	d500      	bpl.n	8002678 <HAL_UART_IRQHandler+0x4c>
 8002676:	e14a      	b.n	800290e <HAL_UART_IRQHandler+0x2e2>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002678:	061a      	lsls	r2, r3, #24
 800267a:	d505      	bpl.n	8002688 <HAL_UART_IRQHandler+0x5c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800267c:	0602      	lsls	r2, r0, #24
 800267e:	d500      	bpl.n	8002682 <HAL_UART_IRQHandler+0x56>
 8002680:	e14c      	b.n	800291c <HAL_UART_IRQHandler+0x2f0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002682:	0209      	lsls	r1, r1, #8
 8002684:	d500      	bpl.n	8002688 <HAL_UART_IRQHandler+0x5c>
 8002686:	e149      	b.n	800291c <HAL_UART_IRQHandler+0x2f0>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002688:	065a      	lsls	r2, r3, #25
 800268a:	d502      	bpl.n	8002692 <HAL_UART_IRQHandler+0x66>
 800268c:	0642      	lsls	r2, r0, #25
 800268e:	d500      	bpl.n	8002692 <HAL_UART_IRQHandler+0x66>
 8002690:	e14b      	b.n	800292a <HAL_UART_IRQHandler+0x2fe>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002692:	021a      	lsls	r2, r3, #8
 8002694:	d502      	bpl.n	800269c <HAL_UART_IRQHandler+0x70>
 8002696:	0042      	lsls	r2, r0, #1
 8002698:	d500      	bpl.n	800269c <HAL_UART_IRQHandler+0x70>
 800269a:	e159      	b.n	8002950 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800269c:	01db      	lsls	r3, r3, #7
 800269e:	d502      	bpl.n	80026a6 <HAL_UART_IRQHandler+0x7a>
 80026a0:	2800      	cmp	r0, #0
 80026a2:	da00      	bge.n	80026a6 <HAL_UART_IRQHandler+0x7a>
 80026a4:	e158      	b.n	8002958 <HAL_UART_IRQHandler+0x32c>
}
 80026a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026a8:	07dd      	lsls	r5, r3, #31
 80026aa:	d507      	bpl.n	80026bc <HAL_UART_IRQHandler+0x90>
 80026ac:	05c5      	lsls	r5, r0, #23
 80026ae:	d505      	bpl.n	80026bc <HAL_UART_IRQHandler+0x90>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026b0:	2701      	movs	r7, #1
 80026b2:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026b4:	2590      	movs	r5, #144	@ 0x90
 80026b6:	5962      	ldr	r2, [r4, r5]
 80026b8:	433a      	orrs	r2, r7
 80026ba:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026bc:	079a      	lsls	r2, r3, #30
 80026be:	d509      	bpl.n	80026d4 <HAL_UART_IRQHandler+0xa8>
 80026c0:	07ca      	lsls	r2, r1, #31
 80026c2:	d507      	bpl.n	80026d4 <HAL_UART_IRQHandler+0xa8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026c4:	6822      	ldr	r2, [r4, #0]
 80026c6:	2502      	movs	r5, #2
 80026c8:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026ca:	358e      	adds	r5, #142	@ 0x8e
 80026cc:	5962      	ldr	r2, [r4, r5]
 80026ce:	2704      	movs	r7, #4
 80026d0:	433a      	orrs	r2, r7
 80026d2:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026d4:	075a      	lsls	r2, r3, #29
 80026d6:	d509      	bpl.n	80026ec <HAL_UART_IRQHandler+0xc0>
 80026d8:	07ca      	lsls	r2, r1, #31
 80026da:	d507      	bpl.n	80026ec <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80026dc:	6822      	ldr	r2, [r4, #0]
 80026de:	2504      	movs	r5, #4
 80026e0:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026e2:	358c      	adds	r5, #140	@ 0x8c
 80026e4:	5962      	ldr	r2, [r4, r5]
 80026e6:	2702      	movs	r7, #2
 80026e8:	433a      	orrs	r2, r7
 80026ea:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 80026ec:	071a      	lsls	r2, r3, #28
 80026ee:	d50a      	bpl.n	8002706 <HAL_UART_IRQHandler+0xda>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80026f0:	0682      	lsls	r2, r0, #26
 80026f2:	d401      	bmi.n	80026f8 <HAL_UART_IRQHandler+0xcc>
 80026f4:	2e00      	cmp	r6, #0
 80026f6:	d006      	beq.n	8002706 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80026f8:	6822      	ldr	r2, [r4, #0]
 80026fa:	2608      	movs	r6, #8
 80026fc:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026fe:	2590      	movs	r5, #144	@ 0x90
 8002700:	5962      	ldr	r2, [r4, r5]
 8002702:	4332      	orrs	r2, r6
 8002704:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002706:	051a      	lsls	r2, r3, #20
 8002708:	d50a      	bpl.n	8002720 <HAL_UART_IRQHandler+0xf4>
 800270a:	0142      	lsls	r2, r0, #5
 800270c:	d508      	bpl.n	8002720 <HAL_UART_IRQHandler+0xf4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800270e:	6822      	ldr	r2, [r4, #0]
 8002710:	2580      	movs	r5, #128	@ 0x80
 8002712:	012d      	lsls	r5, r5, #4
 8002714:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002716:	2590      	movs	r5, #144	@ 0x90
 8002718:	5962      	ldr	r2, [r4, r5]
 800271a:	2620      	movs	r6, #32
 800271c:	4332      	orrs	r2, r6
 800271e:	5162      	str	r2, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002720:	2290      	movs	r2, #144	@ 0x90
 8002722:	58a2      	ldr	r2, [r4, r2]
 8002724:	2a00      	cmp	r2, #0
 8002726:	d0be      	beq.n	80026a6 <HAL_UART_IRQHandler+0x7a>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002728:	069b      	lsls	r3, r3, #26
 800272a:	d508      	bpl.n	800273e <HAL_UART_IRQHandler+0x112>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800272c:	0680      	lsls	r0, r0, #26
 800272e:	d401      	bmi.n	8002734 <HAL_UART_IRQHandler+0x108>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002730:	00c9      	lsls	r1, r1, #3
 8002732:	d504      	bpl.n	800273e <HAL_UART_IRQHandler+0x112>
        if (huart->RxISR != NULL)
 8002734:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_UART_IRQHandler+0x112>
          huart->RxISR(huart);
 800273a:	0020      	movs	r0, r4
 800273c:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800273e:	2390      	movs	r3, #144	@ 0x90
 8002740:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002742:	6823      	ldr	r3, [r4, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	065b      	lsls	r3, r3, #25
 8002748:	d402      	bmi.n	8002750 <HAL_UART_IRQHandler+0x124>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800274a:	2328      	movs	r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800274c:	4213      	tst	r3, r2
 800274e:	d02c      	beq.n	80027aa <HAL_UART_IRQHandler+0x17e>
        UART_EndRxTransfer(huart);
 8002750:	0020      	movs	r0, r4
 8002752:	f7ff fe67 	bl	8002424 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	065b      	lsls	r3, r3, #25
 800275c:	d521      	bpl.n	80027a2 <HAL_UART_IRQHandler+0x176>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800275e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002762:	2301      	movs	r3, #1
 8002764:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002768:	6822      	ldr	r2, [r4, #0]
 800276a:	6893      	ldr	r3, [r2, #8]
 800276c:	2040      	movs	r0, #64	@ 0x40
 800276e:	4383      	bics	r3, r0
 8002770:	6093      	str	r3, [r2, #8]
 8002772:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8002776:	2380      	movs	r3, #128	@ 0x80
 8002778:	58e3      	ldr	r3, [r4, r3]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00d      	beq.n	800279a <HAL_UART_IRQHandler+0x16e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800277e:	4a70      	ldr	r2, [pc, #448]	@ (8002940 <HAL_UART_IRQHandler+0x314>)
 8002780:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002782:	2380      	movs	r3, #128	@ 0x80
 8002784:	58e0      	ldr	r0, [r4, r3]
 8002786:	f7fe fcc3 	bl	8001110 <HAL_DMA_Abort_IT>
 800278a:	2800      	cmp	r0, #0
 800278c:	d100      	bne.n	8002790 <HAL_UART_IRQHandler+0x164>
 800278e:	e78a      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002790:	2380      	movs	r3, #128	@ 0x80
 8002792:	58e0      	ldr	r0, [r4, r3]
 8002794:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002796:	4798      	blx	r3
 8002798:	e785      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>
            HAL_UART_ErrorCallback(huart);
 800279a:	0020      	movs	r0, r4
 800279c:	f7ff ff12 	bl	80025c4 <HAL_UART_ErrorCallback>
 80027a0:	e781      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>
          HAL_UART_ErrorCallback(huart);
 80027a2:	0020      	movs	r0, r4
 80027a4:	f7ff ff0e 	bl	80025c4 <HAL_UART_ErrorCallback>
 80027a8:	e77d      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>
        HAL_UART_ErrorCallback(huart);
 80027aa:	0020      	movs	r0, r4
 80027ac:	f7ff ff0a 	bl	80025c4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b0:	2390      	movs	r3, #144	@ 0x90
 80027b2:	2200      	movs	r2, #0
 80027b4:	50e2      	str	r2, [r4, r3]
    return;
 80027b6:	e776      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80027b8:	06dd      	lsls	r5, r3, #27
 80027ba:	d400      	bmi.n	80027be <HAL_UART_IRQHandler+0x192>
 80027bc:	e757      	b.n	800266e <HAL_UART_IRQHandler+0x42>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80027be:	06c5      	lsls	r5, r0, #27
 80027c0:	d400      	bmi.n	80027c4 <HAL_UART_IRQHandler+0x198>
 80027c2:	e754      	b.n	800266e <HAL_UART_IRQHandler+0x42>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80027c4:	2310      	movs	r3, #16
 80027c6:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	065b      	lsls	r3, r3, #25
 80027ce:	d562      	bpl.n	8002896 <HAL_UART_IRQHandler+0x26a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027d0:	2380      	movs	r3, #128	@ 0x80
 80027d2:	58e1      	ldr	r1, [r4, r3]
 80027d4:	680a      	ldr	r2, [r1, #0]
 80027d6:	6853      	ldr	r3, [r2, #4]
 80027d8:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d04c      	beq.n	8002878 <HAL_UART_IRQHandler+0x24c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027de:	205c      	movs	r0, #92	@ 0x5c
 80027e0:	5a20      	ldrh	r0, [r4, r0]
 80027e2:	4298      	cmp	r0, r3
 80027e4:	d948      	bls.n	8002878 <HAL_UART_IRQHandler+0x24c>
        huart->RxXferCount = nb_remaining_rx_data;
 80027e6:	225e      	movs	r2, #94	@ 0x5e
 80027e8:	52a3      	strh	r3, [r4, r2]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80027ea:	680b      	ldr	r3, [r1, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	069b      	lsls	r3, r3, #26
 80027f0:	d50b      	bpl.n	800280a <HAL_UART_IRQHandler+0x1de>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027f2:	2302      	movs	r3, #2
 80027f4:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027f6:	335a      	adds	r3, #90	@ 0x5a
 80027f8:	5ae1      	ldrh	r1, [r4, r3]
 80027fa:	3302      	adds	r3, #2
 80027fc:	5ae3      	ldrh	r3, [r4, r3]
 80027fe:	1ac9      	subs	r1, r1, r3
 8002800:	b289      	uxth	r1, r1
 8002802:	0020      	movs	r0, r4
 8002804:	f7ff ff10 	bl	8002628 <HAL_UARTEx_RxEventCallback>
 8002808:	e74d      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800280a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800280e:	2301      	movs	r3, #1
 8002810:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002814:	6821      	ldr	r1, [r4, #0]
 8002816:	680a      	ldr	r2, [r1, #0]
 8002818:	4d4a      	ldr	r5, [pc, #296]	@ (8002944 <HAL_UART_IRQHandler+0x318>)
 800281a:	402a      	ands	r2, r5
 800281c:	600a      	str	r2, [r1, #0]
 800281e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002822:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002826:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800282a:	6821      	ldr	r1, [r4, #0]
 800282c:	688a      	ldr	r2, [r1, #8]
 800282e:	439a      	bics	r2, r3
 8002830:	608a      	str	r2, [r1, #8]
 8002832:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002836:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800283e:	6821      	ldr	r1, [r4, #0]
 8002840:	688a      	ldr	r2, [r1, #8]
 8002842:	3542      	adds	r5, #66	@ 0x42
 8002844:	35ff      	adds	r5, #255	@ 0xff
 8002846:	43aa      	bics	r2, r5
 8002848:	608a      	str	r2, [r1, #8]
 800284a:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 800284e:	228c      	movs	r2, #140	@ 0x8c
 8002850:	2120      	movs	r1, #32
 8002852:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002854:	2200      	movs	r2, #0
 8002856:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002858:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002860:	6822      	ldr	r2, [r4, #0]
 8002862:	6813      	ldr	r3, [r2, #0]
 8002864:	2010      	movs	r0, #16
 8002866:	4383      	bics	r3, r0
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 800286e:	2380      	movs	r3, #128	@ 0x80
 8002870:	58e0      	ldr	r0, [r4, r3]
 8002872:	f7fe fc0d 	bl	8001090 <HAL_DMA_Abort>
 8002876:	e7bc      	b.n	80027f2 <HAL_UART_IRQHandler+0x1c6>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002878:	215c      	movs	r1, #92	@ 0x5c
 800287a:	5a61      	ldrh	r1, [r4, r1]
 800287c:	4299      	cmp	r1, r3
 800287e:	d000      	beq.n	8002882 <HAL_UART_IRQHandler+0x256>
 8002880:	e711      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002882:	6813      	ldr	r3, [r2, #0]
 8002884:	069b      	lsls	r3, r3, #26
 8002886:	d400      	bmi.n	800288a <HAL_UART_IRQHandler+0x25e>
 8002888:	e70d      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800288a:	2302      	movs	r3, #2
 800288c:	6723      	str	r3, [r4, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800288e:	0020      	movs	r0, r4
 8002890:	f7ff feca 	bl	8002628 <HAL_UARTEx_RxEventCallback>
      return;
 8002894:	e707      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002896:	235c      	movs	r3, #92	@ 0x5c
 8002898:	5ae3      	ldrh	r3, [r4, r3]
 800289a:	225e      	movs	r2, #94	@ 0x5e
 800289c:	5aa1      	ldrh	r1, [r4, r2]
 800289e:	1a59      	subs	r1, r3, r1
 80028a0:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80028a2:	5aa3      	ldrh	r3, [r4, r2]
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d100      	bne.n	80028ac <HAL_UART_IRQHandler+0x280>
 80028aa:	e6fc      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>
          && (nb_rx_data > 0U))
 80028ac:	2900      	cmp	r1, #0
 80028ae:	d100      	bne.n	80028b2 <HAL_UART_IRQHandler+0x286>
 80028b0:	e6f9      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028b2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b6:	2301      	movs	r3, #1
 80028b8:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80028bc:	6820      	ldr	r0, [r4, #0]
 80028be:	6802      	ldr	r2, [r0, #0]
 80028c0:	4e21      	ldr	r6, [pc, #132]	@ (8002948 <HAL_UART_IRQHandler+0x31c>)
 80028c2:	4032      	ands	r2, r6
 80028c4:	6002      	str	r2, [r0, #0]
 80028c6:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028ca:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ce:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80028d2:	6820      	ldr	r0, [r4, #0]
 80028d4:	6882      	ldr	r2, [r0, #8]
 80028d6:	4e1d      	ldr	r6, [pc, #116]	@ (800294c <HAL_UART_IRQHandler+0x320>)
 80028d8:	4032      	ands	r2, r6
 80028da:	6082      	str	r2, [r0, #8]
 80028dc:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 80028e0:	228c      	movs	r2, #140	@ 0x8c
 80028e2:	2020      	movs	r0, #32
 80028e4:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e6:	2200      	movs	r2, #0
 80028e8:	66e2      	str	r2, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 80028ea:	6762      	str	r2, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028ec:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f0:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028f4:	6822      	ldr	r2, [r4, #0]
 80028f6:	6813      	ldr	r3, [r2, #0]
 80028f8:	2510      	movs	r5, #16
 80028fa:	43ab      	bics	r3, r5
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002902:	2302      	movs	r3, #2
 8002904:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002906:	0020      	movs	r0, r4
 8002908:	f7ff fe8e 	bl	8002628 <HAL_UARTEx_RxEventCallback>
      return;
 800290c:	e6cb      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800290e:	2380      	movs	r3, #128	@ 0x80
 8002910:	035b      	lsls	r3, r3, #13
 8002912:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002914:	0020      	movs	r0, r4
 8002916:	f000 fb5f 	bl	8002fd8 <HAL_UARTEx_WakeupCallback>
    return;
 800291a:	e6c4      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>
    if (huart->TxISR != NULL)
 800291c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800291e:	2b00      	cmp	r3, #0
 8002920:	d100      	bne.n	8002924 <HAL_UART_IRQHandler+0x2f8>
 8002922:	e6c0      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>
      huart->TxISR(huart);
 8002924:	0020      	movs	r0, r4
 8002926:	4798      	blx	r3
    return;
 8002928:	e6bd      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>
    UART_EndTransmit_IT(huart);
 800292a:	0020      	movs	r0, r4
 800292c:	f7ff fe2f 	bl	800258e <UART_EndTransmit_IT>
    return;
 8002930:	e6b9      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>
 8002932:	46c0      	nop			@ (mov r8, r8)
 8002934:	0000080f 	.word	0x0000080f
 8002938:	10000001 	.word	0x10000001
 800293c:	04000120 	.word	0x04000120
 8002940:	08002619 	.word	0x08002619
 8002944:	fffffeff 	.word	0xfffffeff
 8002948:	fffffedf 	.word	0xfffffedf
 800294c:	effffffe 	.word	0xeffffffe
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002950:	0020      	movs	r0, r4
 8002952:	f000 fb43 	bl	8002fdc <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8002956:	e6a6      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002958:	0020      	movs	r0, r4
 800295a:	f000 fb3e 	bl	8002fda <HAL_UARTEx_RxFifoFullCallback>
    return;
 800295e:	e6a2      	b.n	80026a6 <HAL_UART_IRQHandler+0x7a>

08002960 <UART_SetConfig>:
{
 8002960:	b510      	push	{r4, lr}
 8002962:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002964:	6883      	ldr	r3, [r0, #8]
 8002966:	6902      	ldr	r2, [r0, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	6942      	ldr	r2, [r0, #20]
 800296c:	4313      	orrs	r3, r2
 800296e:	69c2      	ldr	r2, [r0, #28]
 8002970:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002972:	6801      	ldr	r1, [r0, #0]
 8002974:	680a      	ldr	r2, [r1, #0]
 8002976:	4862      	ldr	r0, [pc, #392]	@ (8002b00 <UART_SetConfig+0x1a0>)
 8002978:	4002      	ands	r2, r0
 800297a:	4313      	orrs	r3, r2
 800297c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800297e:	6822      	ldr	r2, [r4, #0]
 8002980:	6853      	ldr	r3, [r2, #4]
 8002982:	4960      	ldr	r1, [pc, #384]	@ (8002b04 <UART_SetConfig+0x1a4>)
 8002984:	400b      	ands	r3, r1
 8002986:	68e1      	ldr	r1, [r4, #12]
 8002988:	430b      	orrs	r3, r1
 800298a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800298c:	69a3      	ldr	r3, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 800298e:	6a22      	ldr	r2, [r4, #32]
 8002990:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002992:	6821      	ldr	r1, [r4, #0]
 8002994:	688b      	ldr	r3, [r1, #8]
 8002996:	485c      	ldr	r0, [pc, #368]	@ (8002b08 <UART_SetConfig+0x1a8>)
 8002998:	4003      	ands	r3, r0
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800299e:	6822      	ldr	r2, [r4, #0]
 80029a0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80029a2:	210f      	movs	r1, #15
 80029a4:	438b      	bics	r3, r1
 80029a6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80029a8:	430b      	orrs	r3, r1
 80029aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	4a57      	ldr	r2, [pc, #348]	@ (8002b0c <UART_SetConfig+0x1ac>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d030      	beq.n	8002a16 <UART_SetConfig+0xb6>
 80029b4:	4a56      	ldr	r2, [pc, #344]	@ (8002b10 <UART_SetConfig+0x1b0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d03e      	beq.n	8002a38 <UART_SetConfig+0xd8>
 80029ba:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029bc:	69e0      	ldr	r0, [r4, #28]
 80029be:	2280      	movs	r2, #128	@ 0x80
 80029c0:	0212      	lsls	r2, r2, #8
 80029c2:	4290      	cmp	r0, r2
 80029c4:	d042      	beq.n	8002a4c <UART_SetConfig+0xec>
    switch (clocksource)
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d100      	bne.n	80029cc <UART_SetConfig+0x6c>
 80029ca:	e089      	b.n	8002ae0 <UART_SetConfig+0x180>
 80029cc:	d87b      	bhi.n	8002ac6 <UART_SetConfig+0x166>
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d100      	bne.n	80029d4 <UART_SetConfig+0x74>
 80029d2:	e07f      	b.n	8002ad4 <UART_SetConfig+0x174>
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d174      	bne.n	8002ac2 <UART_SetConfig+0x162>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80029d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002b14 <UART_SetConfig+0x1b4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	2107      	movs	r1, #7
 80029e0:	4019      	ands	r1, r3
 80029e2:	3101      	adds	r1, #1
 80029e4:	484c      	ldr	r0, [pc, #304]	@ (8002b18 <UART_SetConfig+0x1b8>)
 80029e6:	f7fd fb8f 	bl	8000108 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029ea:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80029ec:	4b4b      	ldr	r3, [pc, #300]	@ (8002b1c <UART_SetConfig+0x1bc>)
 80029ee:	0052      	lsls	r2, r2, #1
 80029f0:	5ad1      	ldrh	r1, [r2, r3]
 80029f2:	f7fd fb89 	bl	8000108 <__udivsi3>
 80029f6:	6861      	ldr	r1, [r4, #4]
 80029f8:	084b      	lsrs	r3, r1, #1
 80029fa:	18c0      	adds	r0, r0, r3
 80029fc:	f7fd fb84 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a00:	0002      	movs	r2, r0
 8002a02:	3a10      	subs	r2, #16
 8002a04:	4b46      	ldr	r3, [pc, #280]	@ (8002b20 <UART_SetConfig+0x1c0>)
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d86f      	bhi.n	8002aea <UART_SetConfig+0x18a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	0400      	lsls	r0, r0, #16
 8002a0e:	0c00      	lsrs	r0, r0, #16
 8002a10:	60d8      	str	r0, [r3, #12]
 8002a12:	2000      	movs	r0, #0
 8002a14:	e06a      	b.n	8002aec <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a16:	4b3f      	ldr	r3, [pc, #252]	@ (8002b14 <UART_SetConfig+0x1b4>)
 8002a18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d00c      	beq.n	8002a3c <UART_SetConfig+0xdc>
 8002a22:	d805      	bhi.n	8002a30 <UART_SetConfig+0xd0>
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00b      	beq.n	8002a40 <UART_SetConfig+0xe0>
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d10b      	bne.n	8002a44 <UART_SetConfig+0xe4>
 8002a2c:	3303      	adds	r3, #3
 8002a2e:	e7c5      	b.n	80029bc <UART_SetConfig+0x5c>
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d109      	bne.n	8002a48 <UART_SetConfig+0xe8>
 8002a34:	3305      	adds	r3, #5
 8002a36:	e7c1      	b.n	80029bc <UART_SetConfig+0x5c>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e7bf      	b.n	80029bc <UART_SetConfig+0x5c>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e7bd      	b.n	80029bc <UART_SetConfig+0x5c>
 8002a40:	2300      	movs	r3, #0
 8002a42:	e7bb      	b.n	80029bc <UART_SetConfig+0x5c>
 8002a44:	2310      	movs	r3, #16
 8002a46:	e7b9      	b.n	80029bc <UART_SetConfig+0x5c>
 8002a48:	2310      	movs	r3, #16
 8002a4a:	e7b7      	b.n	80029bc <UART_SetConfig+0x5c>
    switch (clocksource)
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d035      	beq.n	8002abc <UART_SetConfig+0x15c>
 8002a50:	d82a      	bhi.n	8002aa8 <UART_SetConfig+0x148>
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d02c      	beq.n	8002ab0 <UART_SetConfig+0x150>
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d124      	bne.n	8002aa4 <UART_SetConfig+0x144>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b14 <UART_SetConfig+0x1b4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2107      	movs	r1, #7
 8002a62:	4019      	ands	r1, r3
 8002a64:	3101      	adds	r1, #1
 8002a66:	482c      	ldr	r0, [pc, #176]	@ (8002b18 <UART_SetConfig+0x1b8>)
 8002a68:	f7fd fb4e 	bl	8000108 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a6c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002b1c <UART_SetConfig+0x1bc>)
 8002a70:	0052      	lsls	r2, r2, #1
 8002a72:	5ad1      	ldrh	r1, [r2, r3]
 8002a74:	f7fd fb48 	bl	8000108 <__udivsi3>
 8002a78:	0040      	lsls	r0, r0, #1
 8002a7a:	6861      	ldr	r1, [r4, #4]
 8002a7c:	084b      	lsrs	r3, r1, #1
 8002a7e:	18c0      	adds	r0, r0, r3
 8002a80:	f7fd fb42 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a84:	0002      	movs	r2, r0
 8002a86:	3a10      	subs	r2, #16
 8002a88:	4b25      	ldr	r3, [pc, #148]	@ (8002b20 <UART_SetConfig+0x1c0>)
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d82b      	bhi.n	8002ae6 <UART_SetConfig+0x186>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a8e:	b282      	uxth	r2, r0
 8002a90:	230f      	movs	r3, #15
 8002a92:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a94:	0840      	lsrs	r0, r0, #1
 8002a96:	3b08      	subs	r3, #8
 8002a98:	4003      	ands	r3, r0
 8002a9a:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8002a9c:	6822      	ldr	r2, [r4, #0]
 8002a9e:	60d3      	str	r3, [r2, #12]
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	e023      	b.n	8002aec <UART_SetConfig+0x18c>
    switch (clocksource)
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	e021      	b.n	8002aec <UART_SetConfig+0x18c>
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d0df      	beq.n	8002a6c <UART_SetConfig+0x10c>
 8002aac:	2001      	movs	r0, #1
 8002aae:	e01d      	b.n	8002aec <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ab0:	f7fe ff26 	bl	8001900 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	d1d9      	bne.n	8002a6c <UART_SetConfig+0x10c>
 8002ab8:	2000      	movs	r0, #0
 8002aba:	e017      	b.n	8002aec <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8002abc:	f7fe fe16 	bl	80016ec <HAL_RCC_GetSysClockFreq>
        break;
 8002ac0:	e7f8      	b.n	8002ab4 <UART_SetConfig+0x154>
    switch (clocksource)
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	e012      	b.n	8002aec <UART_SetConfig+0x18c>
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d102      	bne.n	8002ad0 <UART_SetConfig+0x170>
 8002aca:	2080      	movs	r0, #128	@ 0x80
 8002acc:	0200      	lsls	r0, r0, #8
 8002ace:	e78c      	b.n	80029ea <UART_SetConfig+0x8a>
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	e00b      	b.n	8002aec <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ad4:	f7fe ff14 	bl	8001900 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	d186      	bne.n	80029ea <UART_SetConfig+0x8a>
 8002adc:	2000      	movs	r0, #0
 8002ade:	e005      	b.n	8002aec <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8002ae0:	f7fe fe04 	bl	80016ec <HAL_RCC_GetSysClockFreq>
        break;
 8002ae4:	e7f8      	b.n	8002ad8 <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	e000      	b.n	8002aec <UART_SetConfig+0x18c>
        ret = HAL_ERROR;
 8002aea:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8002aec:	2301      	movs	r3, #1
 8002aee:	226a      	movs	r2, #106	@ 0x6a
 8002af0:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8002af2:	3a02      	subs	r2, #2
 8002af4:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8002afa:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8002afc:	bd10      	pop	{r4, pc}
 8002afe:	46c0      	nop			@ (mov r8, r8)
 8002b00:	cfff69f3 	.word	0xcfff69f3
 8002b04:	ffffcfff 	.word	0xffffcfff
 8002b08:	11fff4ff 	.word	0x11fff4ff
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	40004400 	.word	0x40004400
 8002b14:	40021000 	.word	0x40021000
 8002b18:	02dc6c00 	.word	0x02dc6c00
 8002b1c:	08003268 	.word	0x08003268
 8002b20:	0000ffef 	.word	0x0000ffef

08002b24 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b24:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002b26:	071b      	lsls	r3, r3, #28
 8002b28:	d506      	bpl.n	8002b38 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b2a:	6802      	ldr	r2, [r0, #0]
 8002b2c:	6853      	ldr	r3, [r2, #4]
 8002b2e:	492c      	ldr	r1, [pc, #176]	@ (8002be0 <UART_AdvFeatureConfig+0xbc>)
 8002b30:	400b      	ands	r3, r1
 8002b32:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8002b34:	430b      	orrs	r3, r1
 8002b36:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b38:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002b3a:	07db      	lsls	r3, r3, #31
 8002b3c:	d506      	bpl.n	8002b4c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b3e:	6802      	ldr	r2, [r0, #0]
 8002b40:	6853      	ldr	r3, [r2, #4]
 8002b42:	4928      	ldr	r1, [pc, #160]	@ (8002be4 <UART_AdvFeatureConfig+0xc0>)
 8002b44:	400b      	ands	r3, r1
 8002b46:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b4c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002b4e:	079b      	lsls	r3, r3, #30
 8002b50:	d506      	bpl.n	8002b60 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b52:	6802      	ldr	r2, [r0, #0]
 8002b54:	6853      	ldr	r3, [r2, #4]
 8002b56:	4924      	ldr	r1, [pc, #144]	@ (8002be8 <UART_AdvFeatureConfig+0xc4>)
 8002b58:	400b      	ands	r3, r1
 8002b5a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b60:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002b62:	075b      	lsls	r3, r3, #29
 8002b64:	d506      	bpl.n	8002b74 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b66:	6802      	ldr	r2, [r0, #0]
 8002b68:	6853      	ldr	r3, [r2, #4]
 8002b6a:	4920      	ldr	r1, [pc, #128]	@ (8002bec <UART_AdvFeatureConfig+0xc8>)
 8002b6c:	400b      	ands	r3, r1
 8002b6e:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002b70:	430b      	orrs	r3, r1
 8002b72:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b74:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002b76:	06db      	lsls	r3, r3, #27
 8002b78:	d506      	bpl.n	8002b88 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b7a:	6802      	ldr	r2, [r0, #0]
 8002b7c:	6893      	ldr	r3, [r2, #8]
 8002b7e:	491c      	ldr	r1, [pc, #112]	@ (8002bf0 <UART_AdvFeatureConfig+0xcc>)
 8002b80:	400b      	ands	r3, r1
 8002b82:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8002b84:	430b      	orrs	r3, r1
 8002b86:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b88:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002b8a:	069b      	lsls	r3, r3, #26
 8002b8c:	d506      	bpl.n	8002b9c <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b8e:	6802      	ldr	r2, [r0, #0]
 8002b90:	6893      	ldr	r3, [r2, #8]
 8002b92:	4918      	ldr	r1, [pc, #96]	@ (8002bf4 <UART_AdvFeatureConfig+0xd0>)
 8002b94:	400b      	ands	r3, r1
 8002b96:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b9c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002b9e:	065b      	lsls	r3, r3, #25
 8002ba0:	d50b      	bpl.n	8002bba <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ba2:	6802      	ldr	r2, [r0, #0]
 8002ba4:	6853      	ldr	r3, [r2, #4]
 8002ba6:	4914      	ldr	r1, [pc, #80]	@ (8002bf8 <UART_AdvFeatureConfig+0xd4>)
 8002ba8:	400b      	ands	r3, r1
 8002baa:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8002bac:	430b      	orrs	r3, r1
 8002bae:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bb0:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002bb2:	2380      	movs	r3, #128	@ 0x80
 8002bb4:	035b      	lsls	r3, r3, #13
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d00a      	beq.n	8002bd0 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bba:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002bbc:	061b      	lsls	r3, r3, #24
 8002bbe:	d506      	bpl.n	8002bce <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bc0:	6802      	ldr	r2, [r0, #0]
 8002bc2:	6853      	ldr	r3, [r2, #4]
 8002bc4:	490d      	ldr	r1, [pc, #52]	@ (8002bfc <UART_AdvFeatureConfig+0xd8>)
 8002bc6:	400b      	ands	r3, r1
 8002bc8:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8002bca:	430b      	orrs	r3, r1
 8002bcc:	6053      	str	r3, [r2, #4]
}
 8002bce:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bd0:	6802      	ldr	r2, [r0, #0]
 8002bd2:	6853      	ldr	r3, [r2, #4]
 8002bd4:	490a      	ldr	r1, [pc, #40]	@ (8002c00 <UART_AdvFeatureConfig+0xdc>)
 8002bd6:	400b      	ands	r3, r1
 8002bd8:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	6053      	str	r3, [r2, #4]
 8002bde:	e7ec      	b.n	8002bba <UART_AdvFeatureConfig+0x96>
 8002be0:	ffff7fff 	.word	0xffff7fff
 8002be4:	fffdffff 	.word	0xfffdffff
 8002be8:	fffeffff 	.word	0xfffeffff
 8002bec:	fffbffff 	.word	0xfffbffff
 8002bf0:	ffffefff 	.word	0xffffefff
 8002bf4:	ffffdfff 	.word	0xffffdfff
 8002bf8:	ffefffff 	.word	0xffefffff
 8002bfc:	fff7ffff 	.word	0xfff7ffff
 8002c00:	ff9fffff 	.word	0xff9fffff

08002c04 <UART_WaitOnFlagUntilTimeout>:
{
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	46ce      	mov	lr, r9
 8002c08:	4647      	mov	r7, r8
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	0006      	movs	r6, r0
 8002c0e:	000d      	movs	r5, r1
 8002c10:	0017      	movs	r7, r2
 8002c12:	4699      	mov	r9, r3
 8002c14:	9b08      	ldr	r3, [sp, #32]
 8002c16:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c18:	6833      	ldr	r3, [r6, #0]
 8002c1a:	69dc      	ldr	r4, [r3, #28]
 8002c1c:	402c      	ands	r4, r5
 8002c1e:	1b64      	subs	r4, r4, r5
 8002c20:	4263      	negs	r3, r4
 8002c22:	415c      	adcs	r4, r3
 8002c24:	42bc      	cmp	r4, r7
 8002c26:	d133      	bne.n	8002c90 <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 8002c28:	4643      	mov	r3, r8
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	d0f4      	beq.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2e:	f7fe f8cd 	bl	8000dcc <HAL_GetTick>
 8002c32:	464b      	mov	r3, r9
 8002c34:	1ac0      	subs	r0, r0, r3
 8002c36:	4540      	cmp	r0, r8
 8002c38:	d82f      	bhi.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x96>
 8002c3a:	4643      	mov	r3, r8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d02e      	beq.n	8002c9e <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c40:	6832      	ldr	r2, [r6, #0]
 8002c42:	6813      	ldr	r3, [r2, #0]
 8002c44:	075b      	lsls	r3, r3, #29
 8002c46:	d5e7      	bpl.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x14>
 8002c48:	2d80      	cmp	r5, #128	@ 0x80
 8002c4a:	d0e5      	beq.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x14>
 8002c4c:	2d40      	cmp	r5, #64	@ 0x40
 8002c4e:	d0e3      	beq.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c50:	69d3      	ldr	r3, [r2, #28]
 8002c52:	071b      	lsls	r3, r3, #28
 8002c54:	d410      	bmi.n	8002c78 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c56:	69d3      	ldr	r3, [r2, #28]
 8002c58:	051b      	lsls	r3, r3, #20
 8002c5a:	d5dd      	bpl.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c5c:	2380      	movs	r3, #128	@ 0x80
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 8002c62:	0030      	movs	r0, r6
 8002c64:	f7ff fbde 	bl	8002424 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c68:	2390      	movs	r3, #144	@ 0x90
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8002c6e:	3b0c      	subs	r3, #12
 8002c70:	2200      	movs	r2, #0
 8002c72:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8002c74:	2003      	movs	r0, #3
 8002c76:	e00c      	b.n	8002c92 <UART_WaitOnFlagUntilTimeout+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c78:	2408      	movs	r4, #8
 8002c7a:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 8002c7c:	0030      	movs	r0, r6
 8002c7e:	f7ff fbd1 	bl	8002424 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c82:	2390      	movs	r3, #144	@ 0x90
 8002c84:	50f4      	str	r4, [r6, r3]
          __HAL_UNLOCK(huart);
 8002c86:	3b0c      	subs	r3, #12
 8002c88:	2200      	movs	r2, #0
 8002c8a:	54f2      	strb	r2, [r6, r3]
          return HAL_ERROR;
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	e000      	b.n	8002c92 <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 8002c90:	2000      	movs	r0, #0
}
 8002c92:	bcc0      	pop	{r6, r7}
 8002c94:	46b9      	mov	r9, r7
 8002c96:	46b0      	mov	r8, r6
 8002c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8002c9a:	2003      	movs	r0, #3
 8002c9c:	e7f9      	b.n	8002c92 <UART_WaitOnFlagUntilTimeout+0x8e>
 8002c9e:	2003      	movs	r0, #3
 8002ca0:	e7f7      	b.n	8002c92 <UART_WaitOnFlagUntilTimeout+0x8e>

08002ca2 <HAL_UART_Transmit>:
{
 8002ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca4:	46c6      	mov	lr, r8
 8002ca6:	b500      	push	{lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	0004      	movs	r4, r0
 8002cac:	000d      	movs	r5, r1
 8002cae:	4690      	mov	r8, r2
 8002cb0:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002cb2:	2388      	movs	r3, #136	@ 0x88
 8002cb4:	58c3      	ldr	r3, [r0, r3]
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	d166      	bne.n	8002d88 <HAL_UART_Transmit+0xe6>
    if ((pData == NULL) || (Size == 0U))
 8002cba:	2900      	cmp	r1, #0
 8002cbc:	d069      	beq.n	8002d92 <HAL_UART_Transmit+0xf0>
 8002cbe:	2a00      	cmp	r2, #0
 8002cc0:	d069      	beq.n	8002d96 <HAL_UART_Transmit+0xf4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc2:	6882      	ldr	r2, [r0, #8]
 8002cc4:	2380      	movs	r3, #128	@ 0x80
 8002cc6:	015b      	lsls	r3, r3, #5
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d104      	bne.n	8002cd6 <HAL_UART_Transmit+0x34>
 8002ccc:	6903      	ldr	r3, [r0, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002cd2:	07cb      	lsls	r3, r1, #31
 8002cd4:	d461      	bmi.n	8002d9a <HAL_UART_Transmit+0xf8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd6:	2390      	movs	r3, #144	@ 0x90
 8002cd8:	2200      	movs	r2, #0
 8002cda:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cdc:	3b08      	subs	r3, #8
 8002cde:	3221      	adds	r2, #33	@ 0x21
 8002ce0:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 8002ce2:	f7fe f873 	bl	8000dcc <HAL_GetTick>
 8002ce6:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 8002ce8:	2354      	movs	r3, #84	@ 0x54
 8002cea:	4642      	mov	r2, r8
 8002cec:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8002cee:	3302      	adds	r3, #2
 8002cf0:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cf2:	68a2      	ldr	r2, [r4, #8]
 8002cf4:	2380      	movs	r3, #128	@ 0x80
 8002cf6:	015b      	lsls	r3, r3, #5
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d002      	beq.n	8002d02 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	4698      	mov	r8, r3
 8002d00:	e018      	b.n	8002d34 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d02:	6923      	ldr	r3, [r4, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d02a      	beq.n	8002d5e <HAL_UART_Transmit+0xbc>
      pdata16bits = NULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	4698      	mov	r8, r3
 8002d0c:	e012      	b.n	8002d34 <HAL_UART_Transmit+0x92>
        huart->gState = HAL_UART_STATE_READY;
 8002d0e:	2388      	movs	r3, #136	@ 0x88
 8002d10:	2220      	movs	r2, #32
 8002d12:	50e2      	str	r2, [r4, r3]
        return HAL_TIMEOUT;
 8002d14:	2003      	movs	r0, #3
 8002d16:	e038      	b.n	8002d8a <HAL_UART_Transmit+0xe8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d18:	4643      	mov	r3, r8
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	6822      	ldr	r2, [r4, #0]
 8002d1e:	05db      	lsls	r3, r3, #23
 8002d20:	0ddb      	lsrs	r3, r3, #23
 8002d22:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata16bits++;
 8002d24:	2302      	movs	r3, #2
 8002d26:	469c      	mov	ip, r3
 8002d28:	44e0      	add	r8, ip
      huart->TxXferCount--;
 8002d2a:	2356      	movs	r3, #86	@ 0x56
 8002d2c:	5ae2      	ldrh	r2, [r4, r3]
 8002d2e:	3a01      	subs	r2, #1
 8002d30:	b292      	uxth	r2, r2
 8002d32:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 8002d34:	2356      	movs	r3, #86	@ 0x56
 8002d36:	5ae3      	ldrh	r3, [r4, r3]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d012      	beq.n	8002d64 <HAL_UART_Transmit+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d3e:	9600      	str	r6, [sp, #0]
 8002d40:	003b      	movs	r3, r7
 8002d42:	2200      	movs	r2, #0
 8002d44:	2180      	movs	r1, #128	@ 0x80
 8002d46:	0020      	movs	r0, r4
 8002d48:	f7ff ff5c 	bl	8002c04 <UART_WaitOnFlagUntilTimeout>
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	d1de      	bne.n	8002d0e <HAL_UART_Transmit+0x6c>
      if (pdata8bits == NULL)
 8002d50:	2d00      	cmp	r5, #0
 8002d52:	d0e1      	beq.n	8002d18 <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d54:	782a      	ldrb	r2, [r5, #0]
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d5a:	3501      	adds	r5, #1
 8002d5c:	e7e5      	b.n	8002d2a <HAL_UART_Transmit+0x88>
      pdata16bits = (const uint16_t *) pData;
 8002d5e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002d60:	2500      	movs	r5, #0
 8002d62:	e7e7      	b.n	8002d34 <HAL_UART_Transmit+0x92>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d64:	9600      	str	r6, [sp, #0]
 8002d66:	003b      	movs	r3, r7
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2140      	movs	r1, #64	@ 0x40
 8002d6c:	0020      	movs	r0, r4
 8002d6e:	f7ff ff49 	bl	8002c04 <UART_WaitOnFlagUntilTimeout>
 8002d72:	2800      	cmp	r0, #0
 8002d74:	d103      	bne.n	8002d7e <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8002d76:	2388      	movs	r3, #136	@ 0x88
 8002d78:	2220      	movs	r2, #32
 8002d7a:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8002d7c:	e005      	b.n	8002d8a <HAL_UART_Transmit+0xe8>
      huart->gState = HAL_UART_STATE_READY;
 8002d7e:	2388      	movs	r3, #136	@ 0x88
 8002d80:	2220      	movs	r2, #32
 8002d82:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8002d84:	2003      	movs	r0, #3
 8002d86:	e000      	b.n	8002d8a <HAL_UART_Transmit+0xe8>
    return HAL_BUSY;
 8002d88:	2002      	movs	r0, #2
}
 8002d8a:	b002      	add	sp, #8
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	46b8      	mov	r8, r7
 8002d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8002d92:	2001      	movs	r0, #1
 8002d94:	e7f9      	b.n	8002d8a <HAL_UART_Transmit+0xe8>
 8002d96:	2001      	movs	r0, #1
 8002d98:	e7f7      	b.n	8002d8a <HAL_UART_Transmit+0xe8>
        return  HAL_ERROR;
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	e7f5      	b.n	8002d8a <HAL_UART_Transmit+0xe8>
	...

08002da0 <UART_CheckIdleState>:
{
 8002da0:	b530      	push	{r4, r5, lr}
 8002da2:	b083      	sub	sp, #12
 8002da4:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da6:	2390      	movs	r3, #144	@ 0x90
 8002da8:	2200      	movs	r2, #0
 8002daa:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8002dac:	f7fe f80e 	bl	8000dcc <HAL_GetTick>
 8002db0:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	071b      	lsls	r3, r3, #28
 8002db8:	d410      	bmi.n	8002ddc <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dba:	6823      	ldr	r3, [r4, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	075b      	lsls	r3, r3, #29
 8002dc0:	d42b      	bmi.n	8002e1a <UART_CheckIdleState+0x7a>
  huart->gState = HAL_UART_STATE_READY;
 8002dc2:	2320      	movs	r3, #32
 8002dc4:	2288      	movs	r2, #136	@ 0x88
 8002dc6:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002dc8:	3204      	adds	r2, #4
 8002dca:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dd0:	6723      	str	r3, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8002dd2:	3a08      	subs	r2, #8
 8002dd4:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8002dd6:	2000      	movs	r0, #0
}
 8002dd8:	b003      	add	sp, #12
 8002dda:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ddc:	2180      	movs	r1, #128	@ 0x80
 8002dde:	4b23      	ldr	r3, [pc, #140]	@ (8002e6c <UART_CheckIdleState+0xcc>)
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	0003      	movs	r3, r0
 8002de4:	2200      	movs	r2, #0
 8002de6:	0389      	lsls	r1, r1, #14
 8002de8:	0020      	movs	r0, r4
 8002dea:	f7ff ff0b 	bl	8002c04 <UART_WaitOnFlagUntilTimeout>
 8002dee:	2800      	cmp	r0, #0
 8002df0:	d0e3      	beq.n	8002dba <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002df2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df6:	2301      	movs	r3, #1
 8002df8:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002dfc:	6822      	ldr	r2, [r4, #0]
 8002dfe:	6813      	ldr	r3, [r2, #0]
 8002e00:	2080      	movs	r0, #128	@ 0x80
 8002e02:	4383      	bics	r3, r0
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002e0a:	2388      	movs	r3, #136	@ 0x88
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8002e10:	3b04      	subs	r3, #4
 8002e12:	2200      	movs	r2, #0
 8002e14:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8002e16:	387d      	subs	r0, #125	@ 0x7d
 8002e18:	e7de      	b.n	8002dd8 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e1a:	2180      	movs	r1, #128	@ 0x80
 8002e1c:	4b13      	ldr	r3, [pc, #76]	@ (8002e6c <UART_CheckIdleState+0xcc>)
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	002b      	movs	r3, r5
 8002e22:	2200      	movs	r2, #0
 8002e24:	03c9      	lsls	r1, r1, #15
 8002e26:	0020      	movs	r0, r4
 8002e28:	f7ff feec 	bl	8002c04 <UART_WaitOnFlagUntilTimeout>
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	d0c8      	beq.n	8002dc2 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e30:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e34:	2201      	movs	r2, #1
 8002e36:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e3a:	6821      	ldr	r1, [r4, #0]
 8002e3c:	680b      	ldr	r3, [r1, #0]
 8002e3e:	4d0c      	ldr	r5, [pc, #48]	@ (8002e70 <UART_CheckIdleState+0xd0>)
 8002e40:	402b      	ands	r3, r5
 8002e42:	600b      	str	r3, [r1, #0]
 8002e44:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e48:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e50:	6821      	ldr	r1, [r4, #0]
 8002e52:	688b      	ldr	r3, [r1, #8]
 8002e54:	4393      	bics	r3, r2
 8002e56:	608b      	str	r3, [r1, #8]
 8002e58:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002e5c:	238c      	movs	r3, #140	@ 0x8c
 8002e5e:	321f      	adds	r2, #31
 8002e60:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8002e62:	3b08      	subs	r3, #8
 8002e64:	2200      	movs	r2, #0
 8002e66:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8002e68:	2003      	movs	r0, #3
 8002e6a:	e7b5      	b.n	8002dd8 <UART_CheckIdleState+0x38>
 8002e6c:	01ffffff 	.word	0x01ffffff
 8002e70:	fffffedf 	.word	0xfffffedf

08002e74 <HAL_UART_Init>:
{
 8002e74:	b510      	push	{r4, lr}
 8002e76:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002e78:	d030      	beq.n	8002edc <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7a:	2388      	movs	r3, #136	@ 0x88
 8002e7c:	58c3      	ldr	r3, [r0, r3]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d022      	beq.n	8002ec8 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8002e82:	2388      	movs	r3, #136	@ 0x88
 8002e84:	2224      	movs	r2, #36	@ 0x24
 8002e86:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8002e88:	6822      	ldr	r2, [r4, #0]
 8002e8a:	6813      	ldr	r3, [r2, #0]
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	438b      	bics	r3, r1
 8002e90:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e92:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d11d      	bne.n	8002ed4 <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e98:	0020      	movs	r0, r4
 8002e9a:	f7ff fd61 	bl	8002960 <UART_SetConfig>
 8002e9e:	2801      	cmp	r0, #1
 8002ea0:	d011      	beq.n	8002ec6 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ea2:	6822      	ldr	r2, [r4, #0]
 8002ea4:	6853      	ldr	r3, [r2, #4]
 8002ea6:	490e      	ldr	r1, [pc, #56]	@ (8002ee0 <HAL_UART_Init+0x6c>)
 8002ea8:	400b      	ands	r3, r1
 8002eaa:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eac:	6822      	ldr	r2, [r4, #0]
 8002eae:	6893      	ldr	r3, [r2, #8]
 8002eb0:	212a      	movs	r1, #42	@ 0x2a
 8002eb2:	438b      	bics	r3, r1
 8002eb4:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002eb6:	6822      	ldr	r2, [r4, #0]
 8002eb8:	6813      	ldr	r3, [r2, #0]
 8002eba:	3929      	subs	r1, #41	@ 0x29
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002ec0:	0020      	movs	r0, r4
 8002ec2:	f7ff ff6d 	bl	8002da0 <UART_CheckIdleState>
}
 8002ec6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002ec8:	3384      	adds	r3, #132	@ 0x84
 8002eca:	2200      	movs	r2, #0
 8002ecc:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8002ece:	f7fd fe5b 	bl	8000b88 <HAL_UART_MspInit>
 8002ed2:	e7d6      	b.n	8002e82 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8002ed4:	0020      	movs	r0, r4
 8002ed6:	f7ff fe25 	bl	8002b24 <UART_AdvFeatureConfig>
 8002eda:	e7dd      	b.n	8002e98 <HAL_UART_Init+0x24>
    return HAL_ERROR;
 8002edc:	2001      	movs	r0, #1
 8002ede:	e7f2      	b.n	8002ec6 <HAL_UART_Init+0x52>
 8002ee0:	ffffb7ff 	.word	0xffffb7ff

08002ee4 <HAL_LIN_Init>:
{
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	0004      	movs	r4, r0
 8002ee8:	000d      	movs	r5, r1
  if (huart == NULL)
 8002eea:	2800      	cmp	r0, #0
 8002eec:	d044      	beq.n	8002f78 <HAL_LIN_Init+0x94>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eee:	69c2      	ldr	r2, [r0, #28]
 8002ef0:	2380      	movs	r3, #128	@ 0x80
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d041      	beq.n	8002f7c <HAL_LIN_Init+0x98>
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 8002ef8:	6883      	ldr	r3, [r0, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d140      	bne.n	8002f80 <HAL_LIN_Init+0x9c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002efe:	3388      	adds	r3, #136	@ 0x88
 8002f00:	58c3      	ldr	r3, [r0, r3]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d02e      	beq.n	8002f64 <HAL_LIN_Init+0x80>
  huart->gState = HAL_UART_STATE_BUSY;
 8002f06:	2388      	movs	r3, #136	@ 0x88
 8002f08:	2224      	movs	r2, #36	@ 0x24
 8002f0a:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8002f0c:	6822      	ldr	r2, [r4, #0]
 8002f0e:	6813      	ldr	r3, [r2, #0]
 8002f10:	2101      	movs	r1, #1
 8002f12:	438b      	bics	r3, r1
 8002f14:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f16:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d129      	bne.n	8002f70 <HAL_LIN_Init+0x8c>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f1c:	0020      	movs	r0, r4
 8002f1e:	f7ff fd1f 	bl	8002960 <UART_SetConfig>
 8002f22:	2801      	cmp	r0, #1
 8002f24:	d01d      	beq.n	8002f62 <HAL_LIN_Init+0x7e>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002f26:	6822      	ldr	r2, [r4, #0]
 8002f28:	6853      	ldr	r3, [r2, #4]
 8002f2a:	4916      	ldr	r1, [pc, #88]	@ (8002f84 <HAL_LIN_Init+0xa0>)
 8002f2c:	400b      	ands	r3, r1
 8002f2e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8002f30:	6822      	ldr	r2, [r4, #0]
 8002f32:	6893      	ldr	r3, [r2, #8]
 8002f34:	212a      	movs	r1, #42	@ 0x2a
 8002f36:	438b      	bics	r3, r1
 8002f38:	6093      	str	r3, [r2, #8]
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8002f3a:	6822      	ldr	r2, [r4, #0]
 8002f3c:	6851      	ldr	r1, [r2, #4]
 8002f3e:	2380      	movs	r3, #128	@ 0x80
 8002f40:	01db      	lsls	r3, r3, #7
 8002f42:	430b      	orrs	r3, r1
 8002f44:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 8002f46:	6822      	ldr	r2, [r4, #0]
 8002f48:	6853      	ldr	r3, [r2, #4]
 8002f4a:	2120      	movs	r1, #32
 8002f4c:	438b      	bics	r3, r1
 8002f4e:	432b      	orrs	r3, r5
 8002f50:	6053      	str	r3, [r2, #4]
  __HAL_UART_ENABLE(huart);
 8002f52:	6822      	ldr	r2, [r4, #0]
 8002f54:	6813      	ldr	r3, [r2, #0]
 8002f56:	391f      	subs	r1, #31
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002f5c:	0020      	movs	r0, r4
 8002f5e:	f7ff ff1f 	bl	8002da0 <UART_CheckIdleState>
}
 8002f62:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8002f64:	3384      	adds	r3, #132	@ 0x84
 8002f66:	2200      	movs	r2, #0
 8002f68:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8002f6a:	f7fd fe0d 	bl	8000b88 <HAL_UART_MspInit>
 8002f6e:	e7ca      	b.n	8002f06 <HAL_LIN_Init+0x22>
    UART_AdvFeatureConfig(huart);
 8002f70:	0020      	movs	r0, r4
 8002f72:	f7ff fdd7 	bl	8002b24 <UART_AdvFeatureConfig>
 8002f76:	e7d1      	b.n	8002f1c <HAL_LIN_Init+0x38>
    return HAL_ERROR;
 8002f78:	2001      	movs	r0, #1
 8002f7a:	e7f2      	b.n	8002f62 <HAL_LIN_Init+0x7e>
    return HAL_ERROR;
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	e7f0      	b.n	8002f62 <HAL_LIN_Init+0x7e>
    return HAL_ERROR;
 8002f80:	2001      	movs	r0, #1
 8002f82:	e7ee      	b.n	8002f62 <HAL_LIN_Init+0x7e>
 8002f84:	fffff7ff 	.word	0xfffff7ff

08002f88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8a:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002f8c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d105      	bne.n	8002f9e <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 8002f92:	3301      	adds	r3, #1
 8002f94:	226a      	movs	r2, #106	@ 0x6a
 8002f96:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 8002f98:	3a02      	subs	r2, #2
 8002f9a:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002f9e:	6802      	ldr	r2, [r0, #0]
 8002fa0:	6895      	ldr	r5, [r2, #8]
 8002fa2:	0e6d      	lsrs	r5, r5, #25
 8002fa4:	2307      	movs	r3, #7
 8002fa6:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002fa8:	6892      	ldr	r2, [r2, #8]
 8002faa:	0f52      	lsrs	r2, r2, #29
 8002fac:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002fae:	4f08      	ldr	r7, [pc, #32]	@ (8002fd0 <UARTEx_SetNbDataToProcess+0x48>)
 8002fb0:	5cf8      	ldrb	r0, [r7, r3]
 8002fb2:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002fb4:	4e07      	ldr	r6, [pc, #28]	@ (8002fd4 <UARTEx_SetNbDataToProcess+0x4c>)
 8002fb6:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002fb8:	f7fd f930 	bl	800021c <__divsi3>
 8002fbc:	236a      	movs	r3, #106	@ 0x6a
 8002fbe:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002fc0:	5d78      	ldrb	r0, [r7, r5]
 8002fc2:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002fc4:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002fc6:	f7fd f929 	bl	800021c <__divsi3>
 8002fca:	2368      	movs	r3, #104	@ 0x68
 8002fcc:	52e0      	strh	r0, [r4, r3]
}
 8002fce:	e7e5      	b.n	8002f9c <UARTEx_SetNbDataToProcess+0x14>
 8002fd0:	08003288 	.word	0x08003288
 8002fd4:	08003280 	.word	0x08003280

08002fd8 <HAL_UARTEx_WakeupCallback>:
}
 8002fd8:	4770      	bx	lr

08002fda <HAL_UARTEx_RxFifoFullCallback>:
}
 8002fda:	4770      	bx	lr

08002fdc <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_UARTEx_DisableFifoMode>:
{
 8002fe0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8002fe2:	2384      	movs	r3, #132	@ 0x84
 8002fe4:	5cc3      	ldrb	r3, [r0, r3]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d015      	beq.n	8003016 <HAL_UARTEx_DisableFifoMode+0x36>
 8002fea:	2484      	movs	r4, #132	@ 0x84
 8002fec:	2601      	movs	r6, #1
 8002fee:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8002ff0:	2588      	movs	r5, #136	@ 0x88
 8002ff2:	2324      	movs	r3, #36	@ 0x24
 8002ff4:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ff6:	6802      	ldr	r2, [r0, #0]
 8002ff8:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8002ffa:	6811      	ldr	r1, [r2, #0]
 8002ffc:	43b1      	bics	r1, r6
 8002ffe:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003000:	4a06      	ldr	r2, [pc, #24]	@ (800301c <HAL_UARTEx_DisableFifoMode+0x3c>)
 8003002:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003004:	2200      	movs	r2, #0
 8003006:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003008:	6801      	ldr	r1, [r0, #0]
 800300a:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800300c:	2320      	movs	r3, #32
 800300e:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8003010:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8003012:	2000      	movs	r0, #0
}
 8003014:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8003016:	2002      	movs	r0, #2
 8003018:	e7fc      	b.n	8003014 <HAL_UARTEx_DisableFifoMode+0x34>
 800301a:	46c0      	nop			@ (mov r8, r8)
 800301c:	dfffffff 	.word	0xdfffffff

08003020 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	0004      	movs	r4, r0
 8003024:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8003026:	2384      	movs	r3, #132	@ 0x84
 8003028:	5cc3      	ldrb	r3, [r0, r3]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d01b      	beq.n	8003066 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800302e:	2584      	movs	r5, #132	@ 0x84
 8003030:	2001      	movs	r0, #1
 8003032:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003034:	2688      	movs	r6, #136	@ 0x88
 8003036:	2324      	movs	r3, #36	@ 0x24
 8003038:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800303e:	6819      	ldr	r1, [r3, #0]
 8003040:	4381      	bics	r1, r0
 8003042:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003044:	6820      	ldr	r0, [r4, #0]
 8003046:	6883      	ldr	r3, [r0, #8]
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	08d9      	lsrs	r1, r3, #3
 800304c:	4311      	orrs	r1, r2
 800304e:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003050:	0020      	movs	r0, r4
 8003052:	f7ff ff99 	bl	8002f88 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800305a:	2320      	movs	r3, #32
 800305c:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800305e:	2300      	movs	r3, #0
 8003060:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003062:	2000      	movs	r0, #0
}
 8003064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8003066:	2002      	movs	r0, #2
 8003068:	e7fc      	b.n	8003064 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

0800306c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306e:	0004      	movs	r4, r0
 8003070:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8003072:	2284      	movs	r2, #132	@ 0x84
 8003074:	5c82      	ldrb	r2, [r0, r2]
 8003076:	2a01      	cmp	r2, #1
 8003078:	d01b      	beq.n	80030b2 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800307a:	2584      	movs	r5, #132	@ 0x84
 800307c:	2001      	movs	r0, #1
 800307e:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003080:	2688      	movs	r6, #136	@ 0x88
 8003082:	2224      	movs	r2, #36	@ 0x24
 8003084:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003086:	6822      	ldr	r2, [r4, #0]
 8003088:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800308a:	6811      	ldr	r1, [r2, #0]
 800308c:	4381      	bics	r1, r0
 800308e:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003090:	6822      	ldr	r2, [r4, #0]
 8003092:	6891      	ldr	r1, [r2, #8]
 8003094:	4808      	ldr	r0, [pc, #32]	@ (80030b8 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 8003096:	4001      	ands	r1, r0
 8003098:	4319      	orrs	r1, r3
 800309a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800309c:	0020      	movs	r0, r4
 800309e:	f7ff ff73 	bl	8002f88 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80030a6:	2320      	movs	r3, #32
 80030a8:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 80030aa:	2300      	movs	r3, #0
 80030ac:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80030ae:	2000      	movs	r0, #0
}
 80030b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80030b2:	2002      	movs	r0, #2
 80030b4:	e7fc      	b.n	80030b0 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	f1ffffff 	.word	0xf1ffffff

080030bc <memset>:
 80030bc:	0003      	movs	r3, r0
 80030be:	1882      	adds	r2, r0, r2
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d100      	bne.n	80030c6 <memset+0xa>
 80030c4:	4770      	bx	lr
 80030c6:	7019      	strb	r1, [r3, #0]
 80030c8:	3301      	adds	r3, #1
 80030ca:	e7f9      	b.n	80030c0 <memset+0x4>

080030cc <__libc_init_array>:
 80030cc:	b570      	push	{r4, r5, r6, lr}
 80030ce:	2600      	movs	r6, #0
 80030d0:	4c0c      	ldr	r4, [pc, #48]	@ (8003104 <__libc_init_array+0x38>)
 80030d2:	4d0d      	ldr	r5, [pc, #52]	@ (8003108 <__libc_init_array+0x3c>)
 80030d4:	1b64      	subs	r4, r4, r5
 80030d6:	10a4      	asrs	r4, r4, #2
 80030d8:	42a6      	cmp	r6, r4
 80030da:	d109      	bne.n	80030f0 <__libc_init_array+0x24>
 80030dc:	2600      	movs	r6, #0
 80030de:	f000 f819 	bl	8003114 <_init>
 80030e2:	4c0a      	ldr	r4, [pc, #40]	@ (800310c <__libc_init_array+0x40>)
 80030e4:	4d0a      	ldr	r5, [pc, #40]	@ (8003110 <__libc_init_array+0x44>)
 80030e6:	1b64      	subs	r4, r4, r5
 80030e8:	10a4      	asrs	r4, r4, #2
 80030ea:	42a6      	cmp	r6, r4
 80030ec:	d105      	bne.n	80030fa <__libc_init_array+0x2e>
 80030ee:	bd70      	pop	{r4, r5, r6, pc}
 80030f0:	00b3      	lsls	r3, r6, #2
 80030f2:	58eb      	ldr	r3, [r5, r3]
 80030f4:	4798      	blx	r3
 80030f6:	3601      	adds	r6, #1
 80030f8:	e7ee      	b.n	80030d8 <__libc_init_array+0xc>
 80030fa:	00b3      	lsls	r3, r6, #2
 80030fc:	58eb      	ldr	r3, [r5, r3]
 80030fe:	4798      	blx	r3
 8003100:	3601      	adds	r6, #1
 8003102:	e7f2      	b.n	80030ea <__libc_init_array+0x1e>
 8003104:	08003290 	.word	0x08003290
 8003108:	08003290 	.word	0x08003290
 800310c:	08003294 	.word	0x08003294
 8003110:	08003290 	.word	0x08003290

08003114 <_init>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	46c0      	nop			@ (mov r8, r8)
 8003118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311a:	bc08      	pop	{r3}
 800311c:	469e      	mov	lr, r3
 800311e:	4770      	bx	lr

08003120 <_fini>:
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003126:	bc08      	pop	{r3}
 8003128:	469e      	mov	lr, r3
 800312a:	4770      	bx	lr
